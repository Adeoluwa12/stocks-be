//@version=6
indicator(
  title = "Cycles Analysis", 
  shorttitle = "", 
  overlay = true, 
  max_labels_count=500,
  max_lines_count = 500)

//VERSION HISTORY
// >=1 - first working version
// >=2 
//    - added decimals to % direction change
//    - fixed an exception when there are 0 periods
//    - changed the indicator to work real time and with replays
//    - split percent change for bull and bear markets
//    - added ability to calculate duration periods in Days or Candles
//    - added minimum period duration
//  >=2.1 - pinescript update to V6
var const string revision = "2.1"

//#region ======Consts======
string GROUP_MAIN = "Main"
string GROUP_TWEAKS = "Tweaks"
string GROUP_CUSTOM = "Custom"
string GROUP_DURATION = "How to present durations?"
string GROUP_BENNER = "Benner"
string GROUP_VISUAL = "Other Visuals"

var int DAYS_IN_WEEK = 7
var int MS_IN_DAY = 1000*60*60*24
var int BACKGROUND_TRANSPARENCY = 90

var string DIRECTION_BULL = "Bull"
var string DIRECTION_BEAR = "Bear"
var string DIRECTION_BOTH = "Both"
var string DIRECTION_NONE = "None"
var string CREST_PEAK = "Peak"
var string CREST_TROUGH = "Trough"
var string DIRECTION_CHANGE_PERCENTAGE = "Percentage"
var string DIRECTION_CHANGE_DURATION = "Duration"
var string DIRECTION_CHANGE_BOTH = "Both"
var string TIME_DURATION_DAYS = "Days"
var string TIME_DURATION_CANDLES = "Candles"
//#endregion

//#region ======Inputs======
var string revisionInput = input.string(defval = revision, options = [revision], title = "Version", tooltip = "Ignore it", group = GROUP_MAIN)
var float changeInDirectionPercentsInput = input.float(defval = 30, title = "Change in Direction, %", minval = 0.1, maxval = 100, tooltip = 'How many % has to happen for us to decide that the market has started moving up', group=GROUP_MAIN)

var string changeInDirectionModeInput = input.string(defval = DIRECTION_CHANGE_PERCENTAGE, options = [DIRECTION_CHANGE_PERCENTAGE, DIRECTION_CHANGE_DURATION, DIRECTION_CHANGE_BOTH], title = "Direction Change Mode", tooltip = "Should we identify directions by % change or duration?", group = GROUP_TWEAKS)
var string durationUnitsInput = input.string(defval = TIME_DURATION_DAYS, options = [TIME_DURATION_DAYS, TIME_DURATION_CANDLES], title = "Duration Units", tooltip = "You might want to use Days for higher TFs, and Candles for lower", group = GROUP_TWEAKS)
var bool useSeparatePercentageForBearChangeInput = input.bool(defval = false, title = "Use Separate Value for Bear Percentage Change", tooltip = 'Just in case if you think 20% up != 20% down', group = GROUP_TWEAKS)
var float changeInDirectionPercentsBearInput = input.float(defval = 30, title = "Change in Bear Direction, %", minval = 0.1, maxval = 100, tooltip = 'How many % has to happen for us to decide that the market has started moving down', group=GROUP_TWEAKS)
var int changeInDirectionUnitsInput = input.int(defval = 182, title = "Change in Direction, time", minval = 1, maxval = 365, tooltip = 'How many days has to happen without a new top/bottom for us to decide that the market has change direction', group=GROUP_TWEAKS)
var string enforceMinimumPeriodDurationModeInput = input.string(defval = DIRECTION_NONE, options = [DIRECTION_NONE, DIRECTION_BOTH, DIRECTION_BULL, DIRECTION_BEAR], title = "Enforce Minimum Period Duration For", tooltip = "Use this if you want to remove pull backs from the analysis", group = GROUP_TWEAKS)
var int minimumPeriodDurationUnitsInput = input.int(defval = 90, title = "Minimum Period Duration, time", minval = 1, maxval = 365, tooltip = 'The minimum duration in time units for each period', group=GROUP_TWEAKS)
var string firstPeriodDirectionInput = input.string(defval = DIRECTION_BULL, options = [DIRECTION_BULL, DIRECTION_BEAR], title = "First Period Direction", tooltip = "Likely you know which direction the first custom period went", group = GROUP_TWEAKS)
var bool showStagnationInput = input.bool(defval = false, title = "Show Stagnations", group = GROUP_TWEAKS)
var int stagnationUnitsInput = input.int(defval = 182, title = "Stagnation, time", minval = 0, maxval = 1000, tooltip = 'How many days has to happen without a new top/bottom for us to decide that the market is stagnating', group=GROUP_TWEAKS)
var bool showPredictionZoneInput = input.bool(defval = true, title = "Show Predictions Zone", group = GROUP_TWEAKS)
var bool calculatePercentileInput = input.bool(defval = true, title = "Calculate Percentile", tooltip = 'Use percentiles to remove fat tails. You need to have at least 3 full periods to be able to calculate perceniles.', group = GROUP_TWEAKS)
var int percentileInput = input.int(defval = 80, title = "Percentile", minval = 1, maxval = 99, group=GROUP_TWEAKS)
var bool showAggregatesInput = input.bool(defval = true, title = "Show Aggeragates Table", group = GROUP_TWEAKS)

var bool useCustomStartRangeInput = input.bool(defval = false, title = "Use Custom Start Date", tooltip = 'Just in case if you want to analyse only a subset of data', group = GROUP_CUSTOM)
var int rangeStartDateInput = input.time(defval = 0, title = "Range Start Date", tooltip = "Start of the analysis period", group = GROUP_CUSTOM)
var bool useCustomEndRangeInput = input.bool(defval = false, title = "Use Custom End Date", tooltip = 'Just in case if you want to analyse only a subset of data', group = GROUP_CUSTOM)
var int rangeEndDateInput = input.time(defval = 0, title = "Range End Exit", tooltip = "End of the analysis period", group = GROUP_CUSTOM)

var bool durationInYearsInput = input.bool(defval = true, title = "Years", group = GROUP_DURATION, inline = GROUP_DURATION)
var bool durationInMonthsInput = input.bool(defval = true, title = "Month", group = GROUP_DURATION, inline = GROUP_DURATION)
var bool durationInDaysInput = input.bool(defval = true, title = "Days", group = GROUP_DURATION, inline = GROUP_DURATION)
var bool durationInHoursInput = input.bool(defval = false, title = "Hours", group = GROUP_DURATION, inline = GROUP_DURATION)
var bool durationInMinutesInput = input.bool(defval = false, title = "Minutes", group = GROUP_DURATION, inline = GROUP_DURATION)
var bool durationInSecondsInput = input.bool(defval = false, title = "Seconds", group = GROUP_DURATION, inline = GROUP_DURATION)

var bool showBackgroundInput = input.bool(defval = true, title = "Show Background", group = GROUP_VISUAL)
var bool showLablesInput = input.bool(defval = true, title = "Show Lables", group = GROUP_VISUAL)
var bool showNewHighsLowsInput = input.bool(defval = false, title = "Show New Highs/Lows", group = GROUP_VISUAL)
var bool showReversalDetectionPointInput = input.bool(defval = true, title = "Show the point when the direction change was detected", group = GROUP_VISUAL)
//#endregion

//#region ======Types======
type crestType
    string crestCategory
    int crestTime
    int crestBar
    float price
    int durationMs
    float changePercentage
    line marker
    int totalStagnation = 0

type periodType
    string direction 
    float curHighPrice
    int curHighDate
    int curHighBar
    float curLowPrice
    int curLowDate
    int curLowBar
    int totalStagnation = 0

type iterationDataType
    string printText = ""
    string printYLocation = ""

    bool newHigh = false
    bool newLow = false
    bool displayLastCrest = false
    bool stagnationFinished = false
    int stagnationStart = na
    int stagnationEnd = na
    int stagnatioDurationMs = na
    float stagnationCrest = na
    float stagnationChangePercent = na

    float bennerCrest = na
    color bennerColor = na

type resultTableType
    string title
    string valueBull
    string valueBear

type calcVisualsType
    line finalLine = na
    linefill finalFill = na
    box predictionBox = na
    label predictionMean = na
    label predictionMedian = na
//#endregion

//#region ======Long term vars======
var array<crestType> crests = array.new<crestType>()

var periodType period = periodType.new()

var calcVisuals = calcVisualsType.new(
  finalLine = line.new(na, close, na, close + 1, xloc.bar_index, extend.both, color.gray),
  finalFill = linefill.new(na, na, na),
  predictionBox = box.new(left = na, top = na, right = na, bottom = na, border_color = na, border_width = 1, border_style = line.style_solid, extend = extend.none, xloc = xloc.bar_time, bgcolor = na),
  predictionMean = label.new(x = na, y = na, text = "X", xloc = xloc.bar_time, yloc = yloc.price, color = color(na), style = label.style_none, textcolor = na, size = size.normal, textalign = text.align_center),
  predictionMedian = label.new(x = na, y = na, text = "O", xloc = xloc.bar_time, yloc = yloc.price, color = color(na), style = label.style_none, textcolor = na, size = size.normal, textalign = text.align_center))

var bool usePercentageChange = changeInDirectionModeInput == DIRECTION_CHANGE_BOTH or changeInDirectionModeInput == DIRECTION_CHANGE_PERCENTAGE
var bool useDurationChange = changeInDirectionModeInput == DIRECTION_CHANGE_BOTH or changeInDirectionModeInput == DIRECTION_CHANGE_DURATION

var bool enforceMinimumDurationForBull = enforceMinimumPeriodDurationModeInput == DIRECTION_CHANGE_BOTH or enforceMinimumPeriodDurationModeInput == DIRECTION_BULL
var bool enforceMinimumDurationForBear = enforceMinimumPeriodDurationModeInput == DIRECTION_CHANGE_BOTH or enforceMinimumPeriodDurationModeInput == DIRECTION_BEAR
//#endregion

//#region ======Short term vars======
iterationDataType iterationData = iterationDataType.new()
//#endregion

//#region ======Functions======
addPrintText(txt, string yPosition = yloc.price) =>
    string newText = iterationData.printText
    if (newText != "")
        newText += "\n"
    newText += str.tostring(txt)
    iterationData.printText := newText
    iterationData.printYLocation := yPosition

print(bool display = true) =>
    if (iterationData.printText != "" and display)
        lbl = label.new(bar_index, high, iterationData.printText, xloc.bar_index, iterationData.printYLocation, color(na), label.style_none, color.gray, size.normal, text.align_left)

calculateDifferenceBetween(duration) =>
    yearsBetween = (duration) / (1000*60*60*24*360)
    monthsBetween = (yearsBetween - math.floor(yearsBetween)) * 12
    daysBetween = (monthsBetween - math.floor(monthsBetween)) * 30
    hoursBetween = (daysBetween - math.floor(daysBetween)) * 24
    minutesBetween = (hoursBetween - math.floor(hoursBetween)) * 60
    secondsBetween = (minutesBetween - math.floor(minutesBetween)) * 60
    [math.floor(yearsBetween), math.floor(monthsBetween), math.floor(daysBetween), math.floor(hoursBetween), math.floor(minutesBetween), math.floor(secondsBetween)]

calculateDifferenceInUnits(startTime, endTime, startBar, endBar) =>
    float result = durationUnitsInput == TIME_DURATION_DAYS ? math.round((endTime - startTime) / MS_IN_DAY) : endBar - startBar

calculateDifferenceInPercentage(start, end) =>
    math.abs(end * 100 / start - 100)

isInTimePeriod() =>
    bool afterBeginning = (useCustomStartRangeInput == false or time >= rangeStartDateInput)
    bool beforeEnd = (useCustomEndRangeInput == false or time <= rangeEndDateInput)
    afterBeginning and beforeEnd

formatDuration(duration) =>
    [yearsBetween, monthsBetween, daysBetween, hoursBetween, minutesBetween, secondsBetween] = calculateDifferenceBetween(duration)
    array<string> result = array.new_string(0)
    if durationInYearsInput
        result.push(str.tostring(yearsBetween) + "y")
    else 
        monthsBetween := monthsBetween + 12 * yearsBetween
    if durationInMonthsInput
        result.push(str.tostring(monthsBetween) + "m")
    else 
        daysBetween := daysBetween + 30 * monthsBetween
    if durationInDaysInput
        result.push(str.tostring(daysBetween) + "d")
    else 
        hoursBetween := hoursBetween + 24 * daysBetween
    if durationInHoursInput
        result.push(str.tostring(hoursBetween) + "h")
    else 
        minutesBetween := minutesBetween + 60 * hoursBetween
    if durationInMinutesInput
        result.push(str.tostring(minutesBetween) + "min")
    else 
        secondsBetween := secondsBetween + 60 * minutesBetween
    if durationInSecondsInput
        result.push(str.tostring(secondsBetween) + "sec")
 
    array.join(result, ", ")

addResultDurationsData(resultData, bullDurations, bearDurations, titlePrefix = "") =>
    resultData.push(resultTableType.new(title = titlePrefix + "Shortest", valueBull = str.tostring(formatDuration(array.min(bullDurations))), valueBear = str.tostring(formatDuration(array.min(bearDurations)))))
    resultData.push(resultTableType.new(title = titlePrefix + "Longest", valueBull = str.tostring(formatDuration(array.max(bullDurations))), valueBear = str.tostring(formatDuration(array.max(bearDurations)))))
    resultData.push(resultTableType.new(title = titlePrefix + "Median Duraion", valueBull = str.tostring(formatDuration(array.median(bullDurations))), valueBear = str.tostring(formatDuration(array.median(bearDurations)))))
    resultData.push(resultTableType.new(title = titlePrefix + " Mean Duraiton", valueBull = str.tostring(formatDuration(array.avg(bullDurations))), valueBear = str.tostring(formatDuration(array.avg(bearDurations)))))

addResultChangesData(resultData, bullChanges, bearChanges, titlePrefix = "") =>
    resultData.push(resultTableType.new(title = titlePrefix + "Smallest Change", valueBull = str.tostring(array.min(bullChanges), format.percent), valueBear = str.tostring(array.min(bearChanges), format.percent)))
    resultData.push(resultTableType.new(title = titlePrefix + "Biggest Change", valueBull = str.tostring(array.max(bullChanges), format.percent), valueBear = str.tostring(array.max(bearChanges), format.percent)))
    resultData.push(resultTableType.new(title = titlePrefix + "Median Change", valueBull = str.tostring(array.median(bullChanges), format.percent), valueBear = str.tostring(array.median(bearChanges), format.percent)))
    resultData.push(resultTableType.new(title = titlePrefix + "Mean Change", valueBull = str.tostring(array.avg(bullChanges), format.percent), valueBear = str.tostring(array.avg(bearChanges), format.percent)))

addResultData(resultData, bullChanges, bullDurations, bearChanges, bearDurations, titlePrefix = "") =>
    addResultDurationsData(resultData, bullDurations, bearDurations, titlePrefix)
    addResultChangesData(resultData, bullChanges, bearChanges, titlePrefix)

calculatePercentileItemsToRemove(arr) =>
    int itemsToRemove = 0
    int size = array.size(arr)
    if (size >= 3)
        float halfPsize = size * (1 - percentileInput / 100) / 2
        //we have to remove at least one item from each side. That's why we need at least 3 items in the original array.
        if (halfPsize < 1)
            halfPsize := 1
        itemsToRemove := math.floor(halfPsize)
    itemsToRemove

getPeriodColor() =>
    period.direction == DIRECTION_BEAR ? color.red : color.green
//#endregion

//#region ======Input check======
if useCustomStartRangeInput and useCustomEndRangeInput and rangeStartDateInput > rangeEndDateInput
    runtime.error("Range Start Date should be before Range End Date")

//#endregion

//#region ======Init======
//initialisation when:
//no custom date selected and this is the first bar
//or there is custom date and (we just entered this range or this is the first date and the range start is before the first date)
if (useCustomStartRangeInput == false and bar_index == 0) or (useCustomStartRangeInput == true and (time[1] < rangeStartDateInput and time >= rangeStartDateInput) or (bar_index == 0 and rangeStartDateInput < time))
    //we need the first crest calculate the distance to the next proper crest
    string firstCrestCategory = firstPeriodDirectionInput == DIRECTION_BULL ? CREST_TROUGH : CREST_PEAK
    crestType firstCrest = crestType.new(crestCategory = CREST_TROUGH, crestTime = time, crestBar = bar_index, price = low, durationMs = 0, changePercentage = 0)
    if showBackgroundInput
        line start = line.new(bar_index, close, bar_index, close + 1, xloc.bar_index, extend.both, color.gray)
        firstCrest.marker := start
    crests.push(firstCrest)
    period.direction := firstPeriodDirectionInput
    period.curHighPrice := high
    period.curHighDate := time
    period.curHighBar := bar_index
    period.curLowPrice := low
    period.curLowDate := time
    period.curLowBar := bar_index
//#endregion

//#region ======Main logic======
if (isInTimePeriod())
    crestType prevCrest = crests.last()

    int prevHighDate = period.curHighDate
    int prevHighBar = period.curHighBar
    int prevLowDate = period.curLowDate
    int prevLowBar = period.curLowBar
    if (high > period.curHighPrice)
        period.curHighPrice := high
        period.curHighDate := time
        period.curHighBar := bar_index
        iterationData.newHigh := true
    if (low < period.curLowPrice)
        period.curLowPrice := low
        period.curLowDate := time
        period.curLowBar := bar_index
        iterationData.newLow := true

    if period.direction == DIRECTION_BULL
        if iterationData.newHigh
            iterationData.stagnationCrest := period.curLowPrice
            period.curLowPrice := low
            period.curLowDate := time
            period.curLowBar := bar_index
            //we calculate stagnations even if we don't show them, for that reason we can't use showStagnationInput here
            if stagnationUnitsInput > 0 and calculateDifferenceInUnits(prevHighDate, time, prevHighBar, bar_index) >= stagnationUnitsInput
                iterationData.stagnationFinished := true
                iterationData.stagnationStart := prevHighDate
                iterationData.stagnationEnd := period.curHighDate
                iterationData.stagnationChangePercent := calculateDifferenceInPercentage(period.curHighPrice, iterationData.stagnationCrest) 
                iterationData.stagnatioDurationMs := iterationData.stagnationEnd - iterationData.stagnationStart
                period.totalStagnation += iterationData.stagnatioDurationMs
        
        //change in direction
        //we change if we get a new low that is % lower than the current high
        //and it can't happen on the same candle when we got a new high (it's possible if we are on a higher timeframe like monthly and the whole candle is bigger than % selected)  
        //or if it's been X days without new high
        //also we have to check that we've passed the minimum period duration
        float bearChangePercentage = useSeparatePercentageForBearChangeInput ? changeInDirectionPercentsBearInput : changeInDirectionPercentsInput
        if (
          (iterationData.newHigh == false and usePercentageChange == true and low < period.curHighPrice * (1 - bearChangePercentage/100)) 
          or (useDurationChange == true and calculateDifferenceInUnits(period.curHighDate, time, period.curHighBar, bar_index) >= changeInDirectionUnitsInput)
          )
          and
          (enforceMinimumDurationForBear == false or calculateDifferenceInUnits(period.curHighDate, period.curLowDate, period.curHighBar, period.curLowBar) >= minimumPeriodDurationUnitsInput)
            //add a new crest record
            
            int duration = period.curHighDate - prevCrest.crestTime
            float distance = calculateDifferenceInPercentage(prevCrest.price, period.curHighPrice)
            crestType newCrest = crestType.new(crestCategory = CREST_PEAK, crestTime = period.curHighDate, crestBar = bar_index, price = period.curHighPrice, durationMs = duration, changePercentage = distance, totalStagnation = period.totalStagnation)
            crests.push(newCrest)

            //display the last crest
            iterationData.displayLastCrest := true

            //reset the period value
            period.direction := DIRECTION_BEAR
            period.curHighPrice := high
            period.curHighDate := time
            period.curHighBar := bar_index
            period.totalStagnation := 0
            
    else // in bear now
        if iterationData.newLow
            iterationData.stagnationCrest := period.curHighPrice
            period.curHighPrice := high
            period.curHighDate := time
            period.curHighBar := bar_index
            //we calculate stagnations even if we don't show them, for that reason we can't use showStagnationInput here
            if stagnationUnitsInput > 0 and calculateDifferenceInUnits(prevLowDate, time, prevLowBar, bar_index) >= stagnationUnitsInput
                iterationData.stagnationFinished := true
                iterationData.stagnationStart := prevLowDate
                iterationData.stagnationEnd := period.curLowDate
                iterationData.stagnationChangePercent := calculateDifferenceInPercentage(period.curLowPrice, iterationData.stagnationCrest) 
                iterationData.stagnatioDurationMs := iterationData.stagnationEnd - iterationData.stagnationStart
                period.totalStagnation += iterationData.stagnatioDurationMs
        //change in direction
        //we change if we get a new high that is % higher than the current low
        //and it can't happen on the same candle when we got a new low (it's possible if we are on a higher timeframe like monthly and the whole candle is bigger than % selected)  
        //or if it's been X days without new low
        //also we have to check that we've passed the minimum period duration
        if (
          (iterationData.newLow == false and usePercentageChange == true and high > period.curLowPrice * (1 + changeInDirectionPercentsInput/100)) 
          or 
          (useDurationChange == true and calculateDifferenceInUnits(period.curLowDate, time, period.curLowBar, bar_index) >= changeInDirectionUnitsInput)
          )
          and
          (enforceMinimumDurationForBull == false or calculateDifferenceInUnits(period.curLowDate, period.curHighDate, period.curLowBar, period.curHighBar) >= minimumPeriodDurationUnitsInput)
            //add a new crest record
            int duration = period.curLowDate - prevCrest.crestTime
            float distance = calculateDifferenceInPercentage(prevCrest.price, period.curLowPrice)
            crestType newCrest = crestType.new(crestCategory = CREST_TROUGH, crestTime = period.curLowDate, crestBar = bar_index, price = period.curLowPrice, durationMs = duration, changePercentage = distance, totalStagnation = period.totalStagnation)
            crests.push(newCrest)

            //display the last crest
            iterationData.displayLastCrest := true

            //reset the period value
            period.direction := DIRECTION_BULL
            period.curLowPrice := low
            period.curLowDate := time
            period.curLowBar := bar_index
            period.totalStagnation := 0
//#endregion

//#region ======Visuals======
//show a new high was found
plotshape(showNewHighsLowsInput ? iterationData.newHigh : false, location = location.abovebar, style=shape.triangleup, color = color.green)

//show a new low was found
plotshape(showNewHighsLowsInput ? iterationData.newLow : false, location = location.belowbar, style=shape.triangledown, color = color.red)

if (iterationData.displayLastCrest)

    crestType lastCrest = crests.last()
    string yLoc = yloc.belowbar
    string lblStyle = label.style_label_up
    color lineColor = color.red
    if lastCrest.crestCategory == CREST_PEAK
        yLoc := yloc.abovebar
        lblStyle := label.style_label_down
        lineColor := color.green
    
    if showLablesInput
        string fromCrest = "n/a"
        //we need at least 3 crests to figure out the distance to the previous crest of the same direction
        if (array.size(crests) > 2)
            crestType lastSameDirectionCrest = crests.get(array.size(crests)-3)
            fromCrest := formatDuration(lastCrest.crestTime - lastSameDirectionCrest.crestTime)
        string crestTxt = str.format("Price: {0}\nChange: {1}\nDuration: {2}\nFrom Crest: {3}\nTotal Stagnation: {4}", 
          str.tostring(lastCrest.price, format.mintick), 
          str.tostring(lastCrest.changePercentage, format.percent), 
          formatDuration(lastCrest.durationMs),
          fromCrest,
          formatDuration(lastCrest.totalStagnation))
        label.new(lastCrest.crestTime, 0, crestTxt, xloc=xloc.bar_time, yloc=yLoc, color=color.new(lineColor, 30), style=lblStyle)

    //paint the area with appropriate color
    crestType lastButOneCrest = crests.get(array.size(crests)-2)
    if showBackgroundInput
        lastCrest.marker := line.new(lastCrest.crestTime, close, lastCrest.crestTime, close + 1, xloc.bar_time, extend.both, lineColor)
        linefill.new(lastCrest.marker, lastButOneCrest.marker, color.new(lineColor, BACKGROUND_TRANSPARENCY))

    
//show a new crest was found
plotshape(showReversalDetectionPointInput ? iterationData.displayLastCrest : false, location = location.belowbar, style=shape.diamond, color = color.fuchsia, size = size.tiny)

//show stagnation
if (showStagnationInput and iterationData.stagnationFinished)
    color lineColor = color.gray
    if showBackgroundInput
        line stagnationStartLine = line.new(iterationData.stagnationStart, close, iterationData.stagnationStart, close + 1, xloc.bar_time, extend.both, lineColor)
        line stagnationEndLine = line.new(iterationData.stagnationEnd, close, iterationData.stagnationEnd, close + 1, xloc.bar_time, extend.both, lineColor)
        linefill.new(stagnationStartLine, stagnationEndLine, color.new(lineColor, 80))
    if showLablesInput
        string stagTxt = str.format("Duration: {0}\nChange: {1}", 
          formatDuration(iterationData.stagnatioDurationMs),
          str.tostring(iterationData.stagnationChangePercent, format.percent))
        int stagPosition = iterationData.stagnationEnd - math.round((iterationData.stagnationEnd - iterationData.stagnationStart)/2)
        label.new(stagPosition, 0, stagTxt, xloc=xloc.bar_time, yloc=yloc.belowbar, color=color.new(lineColor, 30), style=label.style_label_center)
//#endregion


//#region ======Last Close======
if ((useCustomEndRangeInput == false) or (useCustomEndRangeInput == true and time >= rangeStartDateInput and time <= rangeEndDateInput)) and barstate.islast
    if showBackgroundInput
        color lineColor = getPeriodColor()
        crestType lastCrest = crests.last()
        line.set_x1(calcVisuals.finalLine, bar_index)
        line.set_x2(calcVisuals.finalLine, bar_index)
        //becase linefill is between lastcrest and the last line, and lastcrest might change any time - we have to delete the fill before refilling
        //it would be possible to make it faster by comparing the fill's fist line with the lastcrest and deleting only if they are different, but the speed is not too important in this setup, hence opting out for simplicity 
        linefill.delete(calcVisuals.finalFill)
        calcVisuals.finalFill := linefill.new(lastCrest.marker, calcVisuals.finalLine, color.new(lineColor, BACKGROUND_TRANSPARENCY))

    //the first element is a default fake crest, so we ignore it
    array<float> bullChanges = array.new_float(0)
    array<float> bearChanges = array.new_float(0)
    array<int> bullDurations = array.new_int(0)
    array<int> bearDurations = array.new_int(0)
    if array.size(crests) > 1
        for i = 1 to array.size(crests) - 1
            crestType curCrest = array.get(crests, i)
            if (curCrest.crestCategory == CREST_PEAK)
                bullChanges.push(curCrest.changePercentage)
                bullDurations.push(curCrest.durationMs)
            else
                bearChanges.push(curCrest.changePercentage)
                bearDurations.push(curCrest.durationMs)
    bullChanges.sort(order.ascending)
    bearChanges.sort(order.ascending)
    bullDurations.sort(order.ascending)
    bearDurations.sort(order.ascending)

    array<resultTableType> resultData = array.new<resultTableType>()
    resultData.push(resultTableType.new(title = "", valueBull = "Bull", valueBear = "Bear"))
    resultData.push(resultTableType.new(title = "Periods", valueBull = str.tostring(array.size(bullChanges)), valueBear = str.tostring(array.size(bearChanges))))
    addResultData(resultData, bullChanges, bullDurations, bearChanges, bearDurations)

    array<float> bullPercentileChanges = array.new_float(0)
    array<float> bearPercentileChanges = array.new_float(0)
    array<int> bullPercentileDurations = array.new_int(0)
    array<int> bearPercentileDurations = array.new_int(0)
    //we need at least 3 items for percentile
    if calculatePercentileInput
        int percentileItemsRemoveBull = calculatePercentileItemsToRemove(bullDurations)
        int percentileItemsRemoveBear = calculatePercentileItemsToRemove(bearDurations)
        string pPrefix = "P" + str.tostring(percentileInput) + " "
        if array.size(bullChanges) > 0
            bullPercentileChanges := array.slice(bullChanges, percentileItemsRemoveBull, array.size(bullChanges) - percentileItemsRemoveBull)
        if array.size(bearChanges) > 0
            bearPercentileChanges := array.slice(bearChanges, percentileItemsRemoveBear, array.size(bearChanges) - percentileItemsRemoveBear)
        if array.size(bullDurations) > 0
            bullPercentileDurations := array.slice(bullDurations, percentileItemsRemoveBull, array.size(bullDurations) - percentileItemsRemoveBull)
        if array.size(bearDurations) > 0    
            bearPercentileDurations := array.slice(bearDurations, percentileItemsRemoveBear, array.size(bearDurations) - percentileItemsRemoveBear)
        resultData.push(resultTableType.new(title = pPrefix + "Duration Periods", valueBull = str.tostring(array.size(bullDurations) - 2 * percentileItemsRemoveBull), valueBear = str.tostring(array.size(bearDurations) - 2 * percentileItemsRemoveBear)))
        addResultData(resultData, bullPercentileChanges, bullPercentileDurations, bearPercentileChanges, bearPercentileDurations, pPrefix)
    table results = table.new(position.top_right, 3, array.size(resultData), frame_width = 1, frame_color = color.black, border_color = color.black, border_width = 1, bgcolor = color.white)

    if showAggregatesInput
        for [i, row] in resultData
            table.cell(results, 0, i, text = row.title, text_halign = text.align_right)
            table.cell(results, 1, i, text = row.valueBull, text_halign = text.align_left)
            table.cell(results, 2, i, text = row.valueBear, text_halign = text.align_left)

    if showPredictionZoneInput
        color boxColor = getPeriodColor()
        crestType lastCrest = crests.last()
        array<float> changesArr = array.new_float(0)
        array<int> durationsArr = array.new_int(0)
        int directionSign = period.direction == DIRECTION_BULL ? 1 : -1
        if period.direction == DIRECTION_BULL 
            if calculatePercentileInput == true
                durationsArr := bullPercentileDurations
                changesArr := bullPercentileChanges
            else //
                durationsArr := bullDurations
                changesArr := bullChanges
        else //bear
            if calculatePercentileInput == true
                durationsArr := bearPercentileDurations
                changesArr := bearPercentileChanges
            else //
                durationsArr := bearDurations
                changesArr := bearChanges

        int predictionLeft = lastCrest.crestTime + array.min(durationsArr)
        int predictionRight = lastCrest.crestTime + array.max(durationsArr)
        float predictionBottom = lastCrest.price * (1 + directionSign * array.min(changesArr) / 100)
        float predictionTop = lastCrest.price * (1 + directionSign * array.max(changesArr) / 100)
        int predictionMeanX = lastCrest.crestTime + array.avg(durationsArr)
        int predictionMedianX = lastCrest.crestTime + array.median(durationsArr)
        float predictionMeanY = lastCrest.price * (1 + directionSign * array.avg(changesArr) / 100)
        float predictionMedianY = lastCrest.price * (1 + directionSign * array.median(changesArr) / 100)
        box.set_lefttop(calcVisuals.predictionBox, left = predictionLeft, top = predictionTop)
        box.set_rightbottom(calcVisuals.predictionBox, right = predictionRight, bottom = predictionBottom)
        box.set_bgcolor(calcVisuals.predictionBox, color.new(boxColor, BACKGROUND_TRANSPARENCY))
        box.set_border_color(calcVisuals.predictionBox, boxColor)
        label.set_xy(calcVisuals.predictionMean, x = predictionMeanX, y = predictionMeanY)
        label.set_textcolor(calcVisuals.predictionMean, boxColor)
        label.set_xy(calcVisuals.predictionMedian, x = predictionMedianX, y = predictionMedianY)
        label.set_textcolor(calcVisuals.predictionMedian, boxColor)
//#endregion

//#region ======Iteration Close======
print()
//#endregion






import Trendoscope/Drawing/2 as dr
import Trendoscope/Zigzag/10 as zg
import Trendoscope/utils/2 as ut
import Trendoscope/Waves/3 as w

indicator('Motive Wave Scanner [Trendoscope®]', 'MW[Trendoscope®]', overlay = true, max_lines_count = 500, max_labels_count = 500, max_bars_back = 1000)
theme = input.enum(ut.Theme.DARK, title = 'Theme', group = 'Generic Settings', tooltip = 'Chart theme settings. Line and label colors are generted based on the theme settings. If dark theme is selected, ' + 'lighter colors are used and if light theme is selected, darker colors are used.', display = display.none)

zigzagLength = input.int(5, step = 5, minval = 3, title = 'Length', group = 'Zigzag', tooltip = 'Zigzag length for level 0 zigzag', display = display.none)
depth = input.int(200, 'Depth', step = 25, maxval = 500, group = 'Zigzag', tooltip = 'Max number of zigzag swings to consider for recursive calculation', display = display.none)

levelType = input.string('Minimum', 'Level', ['Minimum', 'Absolute'], group = 'Waves', inline = 'l', display = display.none)
level = input.int(1, '', group = 'Waves', minval = 1, inline = 'l', tooltip = 'Zigzag Level to consider for scanning waves', display = display.none)
limitSubwaves = input.bool(true, 'Draw only first subwave', group = 'Waves', tooltip = 'If there are multiple subwave combinations, draw only the first so that chart will look cleaner', display = display.none)
repaint = input.bool(true, 'Rapaint', group = 'Waves', inline = 'r', display = display.none, tooltip = 'If selected, waves are identified immediately, but the formations can repaint. If repaint is not selected,  then the waves are only presented after the confirmation. This means, there may be delay in printing the formation. Please note that, due to some internal pine issues, if repaint is selected, the indicator may throw some runtime error when running through the alerts')

useRealTimeBars = true

allowedTypes = array.from(w.WaveType.ContractingDiagonal, w.WaveType.ExpandingDiagonal, w.WaveType.ImpulseWave)
offset = useRealTimeBars ? 0 : 1

indicators = matrix.new<float>()
indicatorNames = array.new<string>()

var themeColors = theme.getColors()
var zg.Zigzag zigzag = zg.Zigzag.new(zigzagLength, depth, offset)
zigzag.calculate(array.from(high, low), indicators, indicatorNames)

var array<w.Wave> motiveWaves = array.new<w.Wave>()

if zigzag.flags.newPivot and (repaint or not zigzag.flags.updateLastPivot)
    mlzigzag = zigzag
    rowNum = 0
    while mlzigzag.zigzagPivots.size() >= (repaint ? 3 : 4)
        if levelType == 'Minimum' ? mlzigzag.level >= level : mlzigzag.level == level
            pivot = repaint ? mlzigzag.zigzagPivots.first() : mlzigzag.zigzagPivots.get(1)
            lastPivot = repaint ? mlzigzag.zigzagPivots.get(1) : mlzigzag.zigzagPivots.get(2)
            llastPivot = repaint ? mlzigzag.zigzagPivots.get(2) : mlzigzag.zigzagPivots.get(3)

            motiveSubwaveIndices = lastPivot.scanMotiveWave(llastPivot, motiveWaves, allowedTypes)
            if motiveSubwaveIndices.size() > 0
                alert('New Motive wave detected')
                if barstate.islast and barstate.isrealtime
                    log.info('New ImpuMotivelse wave detected')
                labelColor = themeColors.shift()
                themeColors.push(labelColor)

                motiveWave = lastPivot.createWave(labelColor, motiveWaves).createSubWaves(motiveSubwaveIndices).draw(limitSubwaves)
                motiveWave
        mlzigzag := mlzigzag.nextlevel()
        rowNum := rowNum + 1
        rowNum




//another



indicator('Smart Money Concepts [LuxAlgo]', 'LuxAlgo - Smart Money Concepts', overlay = true, max_labels_count = 500, max_lines_count = 500, )
//---------------------------------------------------------------------------------------------------------------------}
//CONSTANTS & STRINGS & INPUTS
//---------------------------------------------------------------------------------------------------------------------{
BULLISH_LEG                     = 1
BEARISH_LEG                     = 0

BULLISH                         = +1
BEARISH                         = -1

GREEN                           = #089981
RED                             = #F23645
BLUE                            = #2157f3
GRAY                            = #878b94
MONO_BULLISH                    = #b2b5be
MONO_BEARISH                    = #5d606b

HISTORICAL                      = 'Historical'
PRESENT                         = 'Present'

COLORED                         = 'Colored'
MONOCHROME                      = 'Monochrome'

ALL                             = 'All'
BOS                             = 'BOS'
CHOCH                           = 'CHoCH'

TINY                            = size.tiny
SMALL                           = size.small
NORMAL                          = size.normal

ATR                             = 'Atr'
RANGE                           = 'Cumulative Mean Range'

CLOSE                           = 'Close'
HIGHLOW                         = 'High/Low'

SOLID                           = '⎯⎯⎯'
DASHED                          = '----'
DOTTED                          = '····'

SMART_GROUP                     = 'Smart Money Concepts'
INTERNAL_GROUP                  = 'Real Time Internal Structure'
SWING_GROUP                     = 'Real Time Swing Structure'
BLOCKS_GROUP                    = 'Order Blocks'
EQUAL_GROUP                     = 'EQH/EQL'
GAPS_GROUP                      = 'Fair Value Gaps'
LEVELS_GROUP                    = 'Highs & Lows MTF'
ZONES_GROUP                     = 'Premium & Discount Zones'

modeTooltip                     = 'Allows to display historical Structure or only the recent ones'
styleTooltip                    = 'Indicator color theme'
showTrendTooltip                = 'Display additional candles with a color reflecting the current trend detected by structure'
showInternalsTooltip            = 'Display internal market structure'
internalFilterConfluenceTooltip = 'Filter non significant internal structure breakouts'
showStructureTooltip            = 'Display swing market Structure'
showSwingsTooltip               = 'Display swing point as labels on the chart'
showHighLowSwingsTooltip        = 'Highlight most recent strong and weak high/low points on the chart'
showInternalOrderBlocksTooltip  = 'Display internal order blocks on the chart\n\nNumber of internal order blocks to display on the chart'
showSwingOrderBlocksTooltip     = 'Display swing order blocks on the chart\n\nNumber of internal swing blocks to display on the chart'
orderBlockFilterTooltip         = 'Method used to filter out volatile order blocks \n\nIt is recommended to use the cumulative mean range method when a low amount of data is available'
orderBlockMitigationTooltip     = 'Select what values to use for order block mitigation'
showEqualHighsLowsTooltip       = 'Display equal highs and equal lows on the chart'
equalHighsLowsLengthTooltip     = 'Number of bars used to confirm equal highs and equal lows'
equalHighsLowsThresholdTooltip  = 'Sensitivity threshold in a range (0, 1) used for the detection of equal highs & lows\n\nLower values will return fewer but more pertinent results'
showFairValueGapsTooltip        = 'Display fair values gaps on the chart'
fairValueGapsThresholdTooltip   = 'Filter out non significant fair value gaps'
fairValueGapsTimeframeTooltip   = 'Fair value gaps timeframe'
fairValueGapsExtendTooltip      = 'Determine how many bars to extend the Fair Value Gap boxes on chart'
showPremiumDiscountZonesTooltip = 'Display premium, discount, and equilibrium zones on chart'

modeInput                       = input.string( HISTORICAL, 'Mode',                     group = SMART_GROUP,    tooltip = modeTooltip, options = [HISTORICAL, PRESENT])
styleInput                      = input.string( COLORED,    'Style',                    group = SMART_GROUP,    tooltip = styleTooltip,options = [COLORED, MONOCHROME])
showTrendInput                  = input(        false,      'Color Candles',            group = SMART_GROUP,    tooltip = showTrendTooltip)

showInternalsInput              = input(        true,       'Show Internal Structure',  group = INTERNAL_GROUP, tooltip = showInternalsTooltip)
showInternalBullInput           = input.string( ALL,        'Bullish Structure',        group = INTERNAL_GROUP, inline = 'ibull', options = [ALL,BOS,CHOCH])
internalBullColorInput          = input(        GREEN,      '',                         group = INTERNAL_GROUP, inline = 'ibull')
showInternalBearInput           = input.string( ALL,        'Bearish Structure' ,       group = INTERNAL_GROUP, inline = 'ibear', options = [ALL,BOS,CHOCH])
internalBearColorInput          = input(        RED,        '',                         group = INTERNAL_GROUP, inline = 'ibear')
internalFilterConfluenceInput   = input(        false,      'Confluence Filter',        group = INTERNAL_GROUP, tooltip = internalFilterConfluenceTooltip)
internalStructureSize           = input.string( TINY,       'Internal Label Size',      group = INTERNAL_GROUP, options = [TINY,SMALL,NORMAL])

showStructureInput              = input(        true,       'Show Swing Structure',     group = SWING_GROUP,    tooltip = showStructureTooltip)
showSwingBullInput              = input.string( ALL,        'Bullish Structure',        group = SWING_GROUP,    inline = 'bull',    options = [ALL,BOS,CHOCH])
swingBullColorInput             = input(        GREEN,      '',                         group = SWING_GROUP,    inline = 'bull')
showSwingBearInput              = input.string( ALL,        'Bearish Structure',        group = SWING_GROUP,    inline = 'bear',    options = [ALL,BOS,CHOCH])
swingBearColorInput             = input(        RED,        '',                         group = SWING_GROUP,    inline = 'bear')
swingStructureSize              = input.string( SMALL,      'Swing Label Size',         group = SWING_GROUP,    options = [TINY,SMALL,NORMAL])
showSwingsInput                 = input(        false,      'Show Swings Points',       group = SWING_GROUP,    tooltip = showSwingsTooltip,inline = 'swings')
swingsLengthInput               = input.int(    50,         '',                         group = SWING_GROUP,    minval = 10,                inline = 'swings')
showHighLowSwingsInput          = input(        true,       'Show Strong/Weak High/Low',group = SWING_GROUP,    tooltip = showHighLowSwingsTooltip)

showInternalOrderBlocksInput    = input(        true,       'Internal Order Blocks' ,   group = BLOCKS_GROUP,   tooltip = showInternalOrderBlocksTooltip,   inline = 'iob')
internalOrderBlocksSizeInput    = input.int(    5,          '',                         group = BLOCKS_GROUP,   minval = 1, maxval = 20,                    inline = 'iob')
showSwingOrderBlocksInput       = input(        false,      'Swing Order Blocks',       group = BLOCKS_GROUP,   tooltip = showSwingOrderBlocksTooltip,      inline = 'ob')
swingOrderBlocksSizeInput       = input.int(    5,          '',                         group = BLOCKS_GROUP,   minval = 1, maxval = 20,                    inline = 'ob') 
orderBlockFilterInput           = input.string( 'Atr',      'Order Block Filter',       group = BLOCKS_GROUP,   tooltip = orderBlockFilterTooltip,          options = [ATR, RANGE])
orderBlockMitigationInput       = input.string( HIGHLOW,    'Order Block Mitigation',   group = BLOCKS_GROUP,   tooltip = orderBlockMitigationTooltip,      options = [CLOSE,HIGHLOW])
internalBullishOrderBlockColor  = input.color(color.new(#3179f5, 80), 'Internal Bullish OB',    group = BLOCKS_GROUP)
internalBearishOrderBlockColor  = input.color(color.new(#f77c80, 80), 'Internal Bearish OB',    group = BLOCKS_GROUP)
swingBullishOrderBlockColor     = input.color(color.new(#1848cc, 80), 'Bullish OB',             group = BLOCKS_GROUP)
swingBearishOrderBlockColor     = input.color(color.new(#b22833, 80), 'Bearish OB',             group = BLOCKS_GROUP)

showEqualHighsLowsInput         = input(        true,       'Equal High/Low',           group = EQUAL_GROUP,    tooltip = showEqualHighsLowsTooltip)
equalHighsLowsLengthInput       = input.int(    3,          'Bars Confirmation',        group = EQUAL_GROUP,    tooltip = equalHighsLowsLengthTooltip,      minval = 1)
equalHighsLowsThresholdInput    = input.float(  0.1,        'Threshold',                group = EQUAL_GROUP,    tooltip = equalHighsLowsThresholdTooltip,   minval = 0, maxval = 0.5, step = 0.1)
equalHighsLowsSizeInput         = input.string( TINY,       'Label Size',               group = EQUAL_GROUP,    options = [TINY,SMALL,NORMAL])

showFairValueGapsInput          = input(        false,      'Fair Value Gaps',          group = GAPS_GROUP,     tooltip = showFairValueGapsTooltip)
fairValueGapsThresholdInput     = input(        true,       'Auto Threshold',           group = GAPS_GROUP,     tooltip = fairValueGapsThresholdTooltip)
fairValueGapsTimeframeInput     = input.timeframe('',       'Timeframe',                group = GAPS_GROUP,     tooltip = fairValueGapsTimeframeTooltip)
fairValueGapsBullColorInput     = input.color(color.new(#00ff68, 70), 'Bullish FVG' , group = GAPS_GROUP)
fairValueGapsBearColorInput     = input.color(color.new(#ff0008, 70), 'Bearish FVG' , group = GAPS_GROUP)
fairValueGapsExtendInput        = input.int(    1,          'Extend FVG',               group = GAPS_GROUP,     tooltip = fairValueGapsExtendTooltip,       minval = 0)

showDailyLevelsInput            = input(        false,      'Daily',    group = LEVELS_GROUP,   inline = 'daily')
dailyLevelsStyleInput           = input.string( SOLID,      '',         group = LEVELS_GROUP,   inline = 'daily',   options = [SOLID,DASHED,DOTTED])
dailyLevelsColorInput           = input(        BLUE,       '',         group = LEVELS_GROUP,   inline = 'daily')
showWeeklyLevelsInput           = input(        false,      'Weekly',   group = LEVELS_GROUP,   inline = 'weekly')
weeklyLevelsStyleInput          = input.string( SOLID,      '',         group = LEVELS_GROUP,   inline = 'weekly',  options = [SOLID,DASHED,DOTTED])
weeklyLevelsColorInput          = input(        BLUE,       '',         group = LEVELS_GROUP,   inline = 'weekly')
showMonthlyLevelsInput          = input(        false,      'Monthly',   group = LEVELS_GROUP,   inline = 'monthly')
monthlyLevelsStyleInput         = input.string( SOLID,      '',         group = LEVELS_GROUP,   inline = 'monthly', options = [SOLID,DASHED,DOTTED])
monthlyLevelsColorInput         = input(        BLUE,       '',         group = LEVELS_GROUP,   inline = 'monthly')

showPremiumDiscountZonesInput   = input(        false,      'Premium/Discount Zones',   group = ZONES_GROUP , tooltip = showPremiumDiscountZonesTooltip)
premiumZoneColorInput           = input.color(  RED,        'Premium Zone',             group = ZONES_GROUP)
equilibriumZoneColorInput       = input.color(  GRAY,       'Equilibrium Zone',         group = ZONES_GROUP)
discountZoneColorInput          = input.color(  GREEN,      'Discount Zone',            group = ZONES_GROUP)

//---------------------------------------------------------------------------------------------------------------------}
//DATA STRUCTURES & VARIABLES
//---------------------------------------------------------------------------------------------------------------------{
// @type                            UDT representing alerts as bool fields
// @field internalBullishBOS        internal structure custom alert
// @field internalBearishBOS        internal structure custom alert
// @field internalBullishCHoCH      internal structure custom alert
// @field internalBearishCHoCH      internal structure custom alert
// @field swingBullishBOS           swing structure custom alert
// @field swingBearishBOS           swing structure custom alert
// @field swingBullishCHoCH         swing structure custom alert
// @field swingBearishCHoCH         swing structure custom alert
// @field internalBullishOrderBlock internal order block custom alert
// @field internalBearishOrderBlock internal order block custom alert
// @field swingBullishOrderBlock    swing order block custom alert
// @field swingBearishOrderBlock    swing order block custom alert
// @field equalHighs                equal high low custom alert
// @field equalLows                 equal high low custom alert
// @field bullishFairValueGap       fair value gap custom alert
// @field bearishFairValueGap       fair value gap custom alert
type alerts
    bool internalBullishBOS         = false
    bool internalBearishBOS         = false
    bool internalBullishCHoCH       = false
    bool internalBearishCHoCH       = false
    bool swingBullishBOS            = false
    bool swingBearishBOS            = false
    bool swingBullishCHoCH          = false
    bool swingBearishCHoCH          = false
    bool internalBullishOrderBlock  = false
    bool internalBearishOrderBlock  = false
    bool swingBullishOrderBlock     = false
    bool swingBearishOrderBlock     = false
    bool equalHighs                 = false
    bool equalLows                  = false
    bool bullishFairValueGap        = false
    bool bearishFairValueGap        = false

// @type                            UDT representing last swing extremes (top & bottom)
// @field top                       last top swing price
// @field bottom                    last bottom swing price
// @field barTime                   last swing bar time
// @field barIndex                  last swing bar index
// @field lastTopTime               last top swing time
// @field lastBottomTime            last bottom swing time
type trailingExtremes
    float top
    float bottom
    int barTime
    int barIndex
    int lastTopTime
    int lastBottomTime

// @type                            UDT representing Fair Value Gaps
// @field top                       top price
// @field bottom                    bottom price
// @field bias                      bias (BULLISH or BEARISH)
// @field topBox                    top box
// @field bottomBox                 bottom box
type fairValueGap
    float top
    float bottom
    int bias
    box topBox
    box bottomBox

// @type                            UDT representing trend bias
// @field bias                      BULLISH or BEARISH
type trend
    int bias    

// @type                            UDT representing Equal Highs Lows display
// @field l_ine                     displayed line
// @field l_abel                    displayed label
type equalDisplay
    line l_ine      = na
    label l_abel    = na

// @type                            UDT representing a pivot point (swing point) 
// @field currentLevel              current price level
// @field lastLevel                 last price level
// @field crossed                   true if price level is crossed
// @field barTime                   bar time
// @field barIndex                  bar index    
type pivot
    float currentLevel
    float lastLevel
    bool crossed
    int barTime     = time
    int barIndex    = bar_index

// @type                            UDT representing an order block
// @field barHigh                   bar high
// @field barLow                    bar low
// @field barTime                   bar time
// @field bias                      BULLISH or BEARISH
type orderBlock
    float barHigh
    float barLow
    int barTime    
    int bias

// @variable                        current swing pivot high    
var pivot swingHigh                 = pivot.new(na,na,false)
// @variable                        current swing pivot low
var pivot swingLow                  = pivot.new(na,na,false)
// @variable                        current internal pivot high
var pivot internalHigh              = pivot.new(na,na,false)
// @variable                        current internal pivot low
var pivot internalLow               = pivot.new(na,na,false)
// @variable                        current equal high pivot
var pivot equalHigh                 = pivot.new(na,na,false)
// @variable                        current equal low pivot
var pivot equalLow                  = pivot.new(na,na,false)
// @variable                        swing trend bias
var trend swingTrend                = trend.new(0)
// @variable                        internal trend bias
var trend internalTrend             = trend.new(0)
// @variable                        equal high display
var equalDisplay equalHighDisplay   = equalDisplay.new()
// @variable                        equal low display
var equalDisplay equalLowDisplay    = equalDisplay.new()
// @variable                        storage for fairValueGap UDTs
var array<fairValueGap> fairValueGaps = array.new<fairValueGap>()
// @variable                        storage for parsed highs
var array<float> parsedHighs        = array.new<float>()
// @variable                        storage for parsed lows
var array<float> parsedLows         = array.new<float>()
// @variable                        storage for raw highs
var array<float> highs              = array.new<float>()
// @variable                        storage for raw lows
var array<float> lows               = array.new<float>()
// @variable                        storage for bar time values
var array<int> times                = array.new<int>()
// @variable                        last trailing swing high and low
var trailingExtremes trailing       = trailingExtremes.new()
// @variable                                storage for orderBlock UDTs (swing order blocks)
var array<orderBlock> swingOrderBlocks      = array.new<orderBlock>()
// @variable                                storage for orderBlock UDTs (internal order blocks)
var array<orderBlock> internalOrderBlocks   = array.new<orderBlock>()
// @variable                                storage for swing order blocks boxes
var array<box> swingOrderBlocksBoxes        = array.new<box>()
// @variable                                storage for internal order blocks boxes
var array<box> internalOrderBlocksBoxes     = array.new<box>()
// @variable                        color for swing bullish structures
var swingBullishColor               = styleInput == MONOCHROME ? MONO_BULLISH : swingBullColorInput
// @variable                        color for swing bearish structures
var swingBearishColor               = styleInput == MONOCHROME ? MONO_BEARISH : swingBearColorInput
// @variable                        color for bullish fair value gaps
var fairValueGapBullishColor        = styleInput == MONOCHROME ? color.new(MONO_BULLISH,70) : fairValueGapsBullColorInput
// @variable                        color for bearish fair value gaps
var fairValueGapBearishColor        = styleInput == MONOCHROME ? color.new(MONO_BEARISH,70) : fairValueGapsBearColorInput
// @variable                        color for premium zone
var premiumZoneColor                = styleInput == MONOCHROME ? MONO_BEARISH : premiumZoneColorInput
// @variable                        color for discount zone
var discountZoneColor               = styleInput == MONOCHROME ? MONO_BULLISH : discountZoneColorInput 
// @variable                        bar index on current script iteration
varip int currentBarIndex           = bar_index
// @variable                        bar index on last script iteration
varip int lastBarIndex              = bar_index
// @variable                        alerts in current bar
alerts currentAlerts                = alerts.new()
// @variable                        time at start of chart
var initialTime                     = time

// we create the needed boxes for displaying order blocks at the first execution
if barstate.isfirst
    if showSwingOrderBlocksInput
        for index = 1 to swingOrderBlocksSizeInput
            swingOrderBlocksBoxes.push(box.new(na,na,na,na,xloc = xloc.bar_time,extend = extend.right))
    if showInternalOrderBlocksInput
        for index = 1 to internalOrderBlocksSizeInput
            internalOrderBlocksBoxes.push(box.new(na,na,na,na,xloc = xloc.bar_time,extend = extend.right))

// @variable                        source to use in bearish order blocks mitigation
bearishOrderBlockMitigationSource   = orderBlockMitigationInput == CLOSE ? close : high
// @variable                        source to use in bullish order blocks mitigation
bullishOrderBlockMitigationSource   = orderBlockMitigationInput == CLOSE ? close : low
// @variable                        default volatility measure
atrMeasure                          = ta.atr(200)
// @variable                        parsed volatility measure by user settings
volatilityMeasure                   = orderBlockFilterInput == ATR ? atrMeasure : ta.cum(ta.tr)/bar_index
// @variable                        true if current bar is a high volatility bar
highVolatilityBar                   = (high - low) >= (2 * volatilityMeasure)
// @variable                        parsed high
parsedHigh                          = highVolatilityBar ? low : high
// @variable                        parsed low
parsedLow                           = highVolatilityBar ? high : low

// we store current values into the arrays at each bar
parsedHighs.push(parsedHigh)
parsedLows.push(parsedLow)
highs.push(high)
lows.push(low)
times.push(time)

//---------------------------------------------------------------------------------------------------------------------}
//USER-DEFINED FUNCTIONS
//---------------------------------------------------------------------------------------------------------------------{
// @function            Get the value of the current leg, it can be 0 (bearish) or 1 (bullish)
// @returns             int
leg(int size) =>
    var leg     = 0    
    newLegHigh  = high[size] > ta.highest( size)
    newLegLow   = low[size]  < ta.lowest(  size)
    
    if newLegHigh
        leg := BEARISH_LEG
    else if newLegLow
        leg := BULLISH_LEG
    leg

// @function            Identify whether the current value is the start of a new leg (swing)
// @param leg           (int) Current leg value
// @returns             bool
startOfNewLeg(int leg)      => ta.change(leg) != 0

// @function            Identify whether the current level is the start of a new bearish leg (swing)
// @param leg           (int) Current leg value
// @returns             bool
startOfBearishLeg(int leg)  => ta.change(leg) == -1

// @function            Identify whether the current level is the start of a new bullish leg (swing)
// @param leg           (int) Current leg value
// @returns             bool
startOfBullishLeg(int leg)  => ta.change(leg) == +1

// @function            create a new label
// @param labelTime     bar time coordinate
// @param labelPrice    price coordinate
// @param tag           text to display
// @param labelColor    text color
// @param labelStyle    label style
// @returns             label ID
drawLabel(int labelTime, float labelPrice, string tag, color labelColor, string labelStyle) =>    
    var label l_abel = na

    if modeInput == PRESENT
        l_abel.delete()

    l_abel := label.new(chart.point.new(labelTime,na,labelPrice),tag,xloc.bar_time,color=color(na),textcolor=labelColor,style = labelStyle,size = size.small)

// @function            create a new line and label representing an EQH or EQL
// @param p_ivot        starting pivot
// @param level         price level of current pivot
// @param size          how many bars ago was the current pivot detected
// @param equalHigh     true for EQH, false for EQL
// @returns             label ID
drawEqualHighLow(pivot p_ivot, float level, int size, bool equalHigh) =>
    equalDisplay e_qualDisplay = equalHigh ? equalHighDisplay : equalLowDisplay
    
    string tag          = 'EQL'
    color equalColor    = swingBullishColor
    string labelStyle   = label.style_label_up

    if equalHigh
        tag         := 'EQH'
        equalColor  := swingBearishColor
        labelStyle  := label.style_label_down

    if modeInput == PRESENT
        line.delete(    e_qualDisplay.l_ine)
        label.delete(   e_qualDisplay.l_abel)
        
    e_qualDisplay.l_ine     := line.new(chart.point.new(p_ivot.barTime,na,p_ivot.currentLevel), chart.point.new(time[size],na,level), xloc = xloc.bar_time, color = equalColor, style = line.style_dotted)
    labelPosition           = math.round(0.5*(p_ivot.barIndex + bar_index - size))
    e_qualDisplay.l_abel    := label.new(chart.point.new(na,labelPosition,level), tag, xloc.bar_index, color = color(na), textcolor = equalColor, style = labelStyle, size = equalHighsLowsSizeInput)

// @function            store current structure and trailing swing points, and also display swing points and equal highs/lows
// @param size          (int) structure size
// @param equalHighLow  (bool) true for displaying current highs/lows
// @param internal      (bool) true for getting internal structures
// @returns             label ID
getCurrentStructure(int size,bool equalHighLow = false, bool internal = false) =>        
    currentLeg              = leg(size)
    newPivot                = startOfNewLeg(currentLeg)
    pivotLow                = startOfBullishLeg(currentLeg)
    pivotHigh               = startOfBearishLeg(currentLeg)

    if newPivot
        if pivotLow
            pivot p_ivot    = equalHighLow ? equalLow : internal ? internalLow : swingLow    

            if equalHighLow and math.abs(p_ivot.currentLevel - low[size]) < equalHighsLowsThresholdInput * atrMeasure                
                drawEqualHighLow(p_ivot, low[size], size, false)

            p_ivot.lastLevel    := p_ivot.currentLevel
            p_ivot.currentLevel := low[size]
            p_ivot.crossed      := false
            p_ivot.barTime      := time[size]
            p_ivot.barIndex     := bar_index[size]

            if not equalHighLow and not internal
                trailing.bottom         := p_ivot.currentLevel
                trailing.barTime        := p_ivot.barTime
                trailing.barIndex       := p_ivot.barIndex
                trailing.lastBottomTime := p_ivot.barTime

            if showSwingsInput and not internal and not equalHighLow
                drawLabel(time[size], p_ivot.currentLevel, p_ivot.currentLevel < p_ivot.lastLevel ? 'LL' : 'HL', swingBullishColor, label.style_label_up)            
        else
            pivot p_ivot = equalHighLow ? equalHigh : internal ? internalHigh : swingHigh

            if equalHighLow and math.abs(p_ivot.currentLevel - high[size]) < equalHighsLowsThresholdInput * atrMeasure
                drawEqualHighLow(p_ivot,high[size],size,true)                

            p_ivot.lastLevel    := p_ivot.currentLevel
            p_ivot.currentLevel := high[size]
            p_ivot.crossed      := false
            p_ivot.barTime      := time[size]
            p_ivot.barIndex     := bar_index[size]

            if not equalHighLow and not internal
                trailing.top            := p_ivot.currentLevel
                trailing.barTime        := p_ivot.barTime
                trailing.barIndex       := p_ivot.barIndex
                trailing.lastTopTime    := p_ivot.barTime

            if showSwingsInput and not internal and not equalHighLow
                drawLabel(time[size], p_ivot.currentLevel, p_ivot.currentLevel > p_ivot.lastLevel ? 'HH' : 'LH', swingBearishColor, label.style_label_down)
                
// @function                draw line and label representing a structure
// @param p_ivot            base pivot point
// @param tag               test to display
// @param structureColor    base color
// @param lineStyle         line style
// @param labelStyle        label style
// @param labelSize         text size
// @returns                 label ID
drawStructure(pivot p_ivot, string tag, color structureColor, string lineStyle, string labelStyle, string labelSize) =>    
    var line l_ine      = line.new(na,na,na,na,xloc = xloc.bar_time)
    var label l_abel    = label.new(na,na)

    if modeInput == PRESENT
        l_ine.delete()
        l_abel.delete()

    l_ine   := line.new(chart.point.new(p_ivot.barTime,na,p_ivot.currentLevel), chart.point.new(time,na,p_ivot.currentLevel), xloc.bar_time, color=structureColor, style=lineStyle)
    l_abel  := label.new(chart.point.new(na,math.round(0.5*(p_ivot.barIndex+bar_index)),p_ivot.currentLevel), tag, xloc.bar_index, color=color(na), textcolor=structureColor, style=labelStyle, size = labelSize)

// @function            delete order blocks
// @param internal      true for internal order blocks
// @returns             orderBlock ID
deleteOrderBlocks(bool internal = false) =>
    array<orderBlock> orderBlocks = internal ? internalOrderBlocks : swingOrderBlocks

    for [index,eachOrderBlock] in orderBlocks
        bool crossedOderBlock = false
        
        if bearishOrderBlockMitigationSource > eachOrderBlock.barHigh and eachOrderBlock.bias == BEARISH
            crossedOderBlock := true
            if internal
                currentAlerts.internalBearishOrderBlock := true
            else
                currentAlerts.swingBearishOrderBlock    := true
        else if bullishOrderBlockMitigationSource < eachOrderBlock.barLow and eachOrderBlock.bias == BULLISH
            crossedOderBlock := true
            if internal
                currentAlerts.internalBullishOrderBlock := true
            else
                currentAlerts.swingBullishOrderBlock    := true
        if crossedOderBlock                    
            orderBlocks.remove(index)            

// @function            fetch and store order blocks
// @param p_ivot        base pivot point
// @param internal      true for internal order blocks
// @param bias          BULLISH or BEARISH
// @returns             void
storeOrdeBlock(pivot p_ivot,bool internal = false,int bias) =>
    if (not internal and showSwingOrderBlocksInput) or (internal and showInternalOrderBlocksInput)

        array<float> a_rray = na
        int parsedIndex = na

        if bias == BEARISH
            a_rray      := parsedHighs.slice(p_ivot.barIndex,bar_index)
            parsedIndex := p_ivot.barIndex + a_rray.indexof(a_rray.max())  
        else
            a_rray      := parsedLows.slice(p_ivot.barIndex,bar_index)
            parsedIndex := p_ivot.barIndex + a_rray.indexof(a_rray.min())                        

        orderBlock o_rderBlock          = orderBlock.new(parsedHighs.get(parsedIndex), parsedLows.get(parsedIndex), times.get(parsedIndex),bias)
        array<orderBlock> orderBlocks   = internal ? internalOrderBlocks : swingOrderBlocks
        
        if orderBlocks.size() >= 100
            orderBlocks.pop()
        orderBlocks.unshift(o_rderBlock)

// @function            draw order blocks as boxes
// @param internal      true for internal order blocks
// @returns             void
drawOrderBlocks(bool internal = false) =>        
    array<orderBlock> orderBlocks = internal ? internalOrderBlocks : swingOrderBlocks
    orderBlocksSize = orderBlocks.size()

    if orderBlocksSize > 0        
        maxOrderBlocks                      = internal ? internalOrderBlocksSizeInput : swingOrderBlocksSizeInput
        array<orderBlock> parsedOrdeBlocks  = orderBlocks.slice(0, math.min(maxOrderBlocks,orderBlocksSize))
        array<box> b_oxes                   = internal ? internalOrderBlocksBoxes : swingOrderBlocksBoxes        

        for [index,eachOrderBlock] in parsedOrdeBlocks
            orderBlockColor = styleInput == MONOCHROME ? (eachOrderBlock.bias == BEARISH ? color.new(MONO_BEARISH,80) : color.new(MONO_BULLISH,80)) : internal ? (eachOrderBlock.bias == BEARISH ? internalBearishOrderBlockColor : internalBullishOrderBlockColor) : (eachOrderBlock.bias == BEARISH ? swingBearishOrderBlockColor : swingBullishOrderBlockColor)

            box b_ox        = b_oxes.get(index)
            b_ox.set_top_left_point(    chart.point.new(eachOrderBlock.barTime,na,eachOrderBlock.barHigh))
            b_ox.set_bottom_right_point(chart.point.new(last_bar_time,na,eachOrderBlock.barLow))        
            b_ox.set_border_color(      internal ? na : orderBlockColor)
            b_ox.set_bgcolor(           orderBlockColor)

// @function            detect and draw structures, also detect and store order blocks
// @param internal      true for internal structures or order blocks
// @returns             void
displayStructure(bool internal = false) =>
    var bullishBar = true
    var bearishBar = true

    if internalFilterConfluenceInput
        bullishBar := high - math.max(close, open) > math.min(close, open - low)
        bearishBar := high - math.max(close, open) < math.min(close, open - low)
    
    pivot p_ivot    = internal ? internalHigh : swingHigh
    trend t_rend    = internal ? internalTrend : swingTrend

    lineStyle       = internal ? line.style_dashed : line.style_solid
    labelSize       = internal ? internalStructureSize : swingStructureSize

    extraCondition  = internal ? internalHigh.currentLevel != swingHigh.currentLevel and bullishBar : true
    bullishColor    = styleInput == MONOCHROME ? MONO_BULLISH : internal ? internalBullColorInput : swingBullColorInput

    if ta.crossover(close,p_ivot.currentLevel) and not p_ivot.crossed and extraCondition
        string tag = t_rend.bias == BEARISH ? CHOCH : BOS

        if internal
            currentAlerts.internalBullishCHoCH  := tag == CHOCH
            currentAlerts.internalBullishBOS    := tag == BOS
        else
            currentAlerts.swingBullishCHoCH     := tag == CHOCH
            currentAlerts.swingBullishBOS       := tag == BOS

        p_ivot.crossed  := true
        t_rend.bias     := BULLISH

        displayCondition = internal ? showInternalsInput and (showInternalBullInput == ALL or (showInternalBullInput == BOS and tag != CHOCH) or (showInternalBullInput == CHOCH and tag == CHOCH)) : showStructureInput and (showSwingBullInput == ALL or (showSwingBullInput == BOS and tag != CHOCH) or (showSwingBullInput == CHOCH and tag == CHOCH))

        if displayCondition                        
            drawStructure(p_ivot,tag,bullishColor,lineStyle,label.style_label_down,labelSize)

        if (internal and showInternalOrderBlocksInput) or (not internal and showSwingOrderBlocksInput)
            storeOrdeBlock(p_ivot,internal,BULLISH)

    p_ivot          := internal ? internalLow : swingLow    
    extraCondition  := internal ? internalLow.currentLevel != swingLow.currentLevel and bearishBar : true
    bearishColor    = styleInput == MONOCHROME ? MONO_BEARISH : internal ? internalBearColorInput : swingBearColorInput

    if ta.crossunder(close,p_ivot.currentLevel) and not p_ivot.crossed and extraCondition
        string tag = t_rend.bias == BULLISH ? CHOCH : BOS

        if internal
            currentAlerts.internalBearishCHoCH  := tag == CHOCH
            currentAlerts.internalBearishBOS    := tag == BOS
        else
            currentAlerts.swingBearishCHoCH     := tag == CHOCH
            currentAlerts.swingBearishBOS       := tag == BOS

        p_ivot.crossed := true
        t_rend.bias := BEARISH

        displayCondition = internal ? showInternalsInput and (showInternalBearInput == ALL or (showInternalBearInput == BOS and tag != CHOCH) or (showInternalBearInput == CHOCH and tag == CHOCH)) : showStructureInput and (showSwingBearInput == ALL or (showSwingBearInput == BOS and tag != CHOCH) or (showSwingBearInput == CHOCH and tag == CHOCH))
        
        if displayCondition                        
            drawStructure(p_ivot,tag,bearishColor,lineStyle,label.style_label_up,labelSize)

        if (internal and showInternalOrderBlocksInput) or (not internal and showSwingOrderBlocksInput)
            storeOrdeBlock(p_ivot,internal,BEARISH)

// @function            draw one fair value gap box (each fair value gap has two boxes)
// @param leftTime      left time coordinate
// @param rightTime     right time coordinate
// @param topPrice      top price level
// @param bottomPrice   bottom price level
// @param boxColor      box color
// @returns             box ID
fairValueGapBox(leftTime,rightTime,topPrice,bottomPrice,boxColor) => box.new(chart.point.new(leftTime,na,topPrice),chart.point.new(rightTime + fairValueGapsExtendInput * (time-time[1]),na,bottomPrice), xloc=xloc.bar_time, border_color = boxColor, bgcolor = boxColor)

// @function            delete fair value gaps
// @returns             fairValueGap ID
deleteFairValueGaps() =>
    for [index,eachFairValueGap] in fairValueGaps
        if (low < eachFairValueGap.bottom and eachFairValueGap.bias == BULLISH) or (high > eachFairValueGap.top and eachFairValueGap.bias == BEARISH)
            eachFairValueGap.topBox.delete()
            eachFairValueGap.bottomBox.delete()
            fairValueGaps.remove(index)
    
// @function            draw fair value gaps
// @returns             fairValueGap ID
drawFairValueGaps() => 
    [lastClose, lastOpen, lastTime, currentHigh, currentLow, currentTime, last2High, last2Low] = request.security(syminfo.tickerid, fairValueGapsTimeframeInput, [close[1], open[1], time[1], high[0], low[0], time[0], high[2], low[2]],lookahead = barmerge.lookahead_on)

    barDeltaPercent     = (lastClose - lastOpen) / (lastOpen * 100)
    newTimeframe        = timeframe.change(fairValueGapsTimeframeInput)
    threshold           = fairValueGapsThresholdInput ? ta.cum(math.abs(newTimeframe ? barDeltaPercent : 0)) / bar_index * 2 : 0

    bullishFairValueGap = currentLow > last2High and lastClose > last2High and barDeltaPercent > threshold and newTimeframe
    bearishFairValueGap = currentHigh < last2Low and lastClose < last2Low and -barDeltaPercent > threshold and newTimeframe

    if bullishFairValueGap
        currentAlerts.bullishFairValueGap := true
        fairValueGaps.unshift(fairValueGap.new(currentLow,last2High,BULLISH,fairValueGapBox(lastTime,currentTime,currentLow,math.avg(currentLow,last2High),fairValueGapBullishColor),fairValueGapBox(lastTime,currentTime,math.avg(currentLow,last2High),last2High,fairValueGapBullishColor)))
    if bearishFairValueGap
        currentAlerts.bearishFairValueGap := true
        fairValueGaps.unshift(fairValueGap.new(currentHigh,last2Low,BEARISH,fairValueGapBox(lastTime,currentTime,currentHigh,math.avg(currentHigh,last2Low),fairValueGapBearishColor),fairValueGapBox(lastTime,currentTime,math.avg(currentHigh,last2Low),last2Low,fairValueGapBearishColor)))

// @function            get line style from string
// @param style         line style
// @returns             string
getStyle(string style) =>
    switch style
        SOLID => line.style_solid
        DASHED => line.style_dashed
        DOTTED => line.style_dotted

// @function            draw MultiTimeFrame levels
// @param timeframe     base timeframe
// @param sameTimeframe true if chart timeframe is same as base timeframe
// @param style         line style
// @param levelColor    line and text color
// @returns             void
drawLevels(string timeframe, bool sameTimeframe, string style, color levelColor) =>
    [topLevel, bottomLevel, leftTime, rightTime] = request.security(syminfo.tickerid, timeframe, [high[1], low[1], time[1], time],lookahead = barmerge.lookahead_on)

    float parsedTop         = sameTimeframe ? high : topLevel
    float parsedBottom      = sameTimeframe ? low : bottomLevel    

    int parsedLeftTime      = sameTimeframe ? time : leftTime
    int parsedRightTime     = sameTimeframe ? time : rightTime

    int parsedTopTime       = time
    int parsedBottomTime    = time

    if not sameTimeframe
        int leftIndex               = times.binary_search_rightmost(parsedLeftTime)
        int rightIndex              = times.binary_search_rightmost(parsedRightTime)

        array<int> timeArray        = times.slice(leftIndex,rightIndex)
        array<float> topArray       = highs.slice(leftIndex,rightIndex)
        array<float> bottomArray    = lows.slice(leftIndex,rightIndex)

        parsedTopTime               := timeArray.size() > 0 ? timeArray.get(topArray.indexof(topArray.max())) : initialTime
        parsedBottomTime            := timeArray.size() > 0 ? timeArray.get(bottomArray.indexof(bottomArray.min())) : initialTime

    var line topLine        = line.new(na, na, na, na, xloc = xloc.bar_time, color = levelColor, style = getStyle(style))
    var line bottomLine     = line.new(na, na, na, na, xloc = xloc.bar_time, color = levelColor, style = getStyle(style))
    var label topLabel      = label.new(na, na, xloc = xloc.bar_time, text = str.format('P{0}H',timeframe), color=color(na), textcolor = levelColor, size = size.small, style = label.style_label_left)
    var label bottomLabel   = label.new(na, na, xloc = xloc.bar_time, text = str.format('P{0}L',timeframe), color=color(na), textcolor = levelColor, size = size.small, style = label.style_label_left)

    topLine.set_first_point(    chart.point.new(parsedTopTime,na,parsedTop))
    topLine.set_second_point(   chart.point.new(last_bar_time + 20 * (time-time[1]),na,parsedTop))   
    topLabel.set_point(         chart.point.new(last_bar_time + 20 * (time-time[1]),na,parsedTop))

    bottomLine.set_first_point( chart.point.new(parsedBottomTime,na,parsedBottom))    
    bottomLine.set_second_point(chart.point.new(last_bar_time + 20 * (time-time[1]),na,parsedBottom))
    bottomLabel.set_point(      chart.point.new(last_bar_time + 20 * (time-time[1]),na,parsedBottom))

// @function            true if chart timeframe is higher than provided timeframe
// @param timeframe     timeframe to check
// @returns             bool
higherTimeframe(string timeframe) => timeframe.in_seconds() > timeframe.in_seconds(timeframe)

// @function            update trailing swing points
// @returns             int
updateTrailingExtremes() =>
    trailing.top            := math.max(high,trailing.top)
    trailing.lastTopTime    := trailing.top == high ? time : trailing.lastTopTime
    trailing.bottom         := math.min(low,trailing.bottom)
    trailing.lastBottomTime := trailing.bottom == low ? time : trailing.lastBottomTime

// @function            draw trailing swing points
// @returns             void
drawHighLowSwings() =>
    var line topLine        = line.new(na, na, na, na, color = swingBearishColor, xloc = xloc.bar_time)
    var line bottomLine     = line.new(na, na, na, na, color = swingBullishColor, xloc = xloc.bar_time)
    var label topLabel      = label.new(na, na, color=color(na), textcolor = swingBearishColor, xloc = xloc.bar_time, style = label.style_label_down, size = size.tiny)
    var label bottomLabel   = label.new(na, na, color=color(na), textcolor = swingBullishColor, xloc = xloc.bar_time, style = label.style_label_up, size = size.tiny)

    rightTimeBar            = last_bar_time + 20 * (time - time[1])

    topLine.set_first_point(    chart.point.new(trailing.lastTopTime, na, trailing.top))
    topLine.set_second_point(   chart.point.new(rightTimeBar, na, trailing.top))
    topLabel.set_point(         chart.point.new(rightTimeBar, na, trailing.top))
    topLabel.set_text(          swingTrend.bias == BEARISH ? 'Strong High' : 'Weak High')

    bottomLine.set_first_point( chart.point.new(trailing.lastBottomTime, na, trailing.bottom))
    bottomLine.set_second_point(chart.point.new(rightTimeBar, na, trailing.bottom))
    bottomLabel.set_point(      chart.point.new(rightTimeBar, na, trailing.bottom))
    bottomLabel.set_text(       swingTrend.bias == BULLISH ? 'Strong Low' : 'Weak Low')

// @function            draw a zone with a label and a box
// @param labelLevel    price level for label
// @param labelIndex    bar index for label
// @param top           top price level for box
// @param bottom        bottom price level for box
// @param tag           text to display
// @param zoneColor     base color
// @param style         label style
// @returns             void
drawZone(float labelLevel, int labelIndex, float top, float bottom, string tag, color zoneColor, string style) =>
    var label l_abel    = label.new(na,na,text = tag, color=color(na),textcolor = zoneColor, style = style, size = size.small)
    var box b_ox        = box.new(na,na,na,na,bgcolor = color.new(zoneColor,80),border_color = color(na), xloc = xloc.bar_time)

    b_ox.set_top_left_point(    chart.point.new(trailing.barTime,na,top))
    b_ox.set_bottom_right_point(chart.point.new(last_bar_time,na,bottom))

    l_abel.set_point(           chart.point.new(na,labelIndex,labelLevel))

// @function            draw premium/discount zones
// @returns             void
drawPremiumDiscountZones() =>
    drawZone(trailing.top, math.round(0.5*(trailing.barIndex + last_bar_index)), trailing.top, 0.95*trailing.top + 0.05*trailing.bottom, 'Premium', premiumZoneColor, label.style_label_down)

    equilibriumLevel = math.avg(trailing.top, trailing.bottom)
    drawZone(equilibriumLevel, last_bar_index, 0.525*trailing.top + 0.475*trailing.bottom, 0.525*trailing.bottom + 0.475*trailing.top, 'Equilibrium', equilibriumZoneColorInput, label.style_label_left)

    drawZone(trailing.bottom, math.round(0.5*(trailing.barIndex + last_bar_index)), 0.95*trailing.bottom + 0.05*trailing.top, trailing.bottom, 'Discount', discountZoneColor, label.style_label_up)

//---------------------------------------------------------------------------------------------------------------------}
//MUTABLE VARIABLES & EXECUTION
//---------------------------------------------------------------------------------------------------------------------{
parsedOpen  = showTrendInput ? open : na
candleColor = internalTrend.bias == BULLISH ? swingBullishColor : swingBearishColor
plotcandle(parsedOpen,high,low,close,color = candleColor, wickcolor = candleColor, bordercolor = candleColor)

if showHighLowSwingsInput or showPremiumDiscountZonesInput
    updateTrailingExtremes()

    if showHighLowSwingsInput
        drawHighLowSwings()

    if showPremiumDiscountZonesInput
        drawPremiumDiscountZones()

if showFairValueGapsInput
    deleteFairValueGaps()

getCurrentStructure(swingsLengthInput,false)
getCurrentStructure(5,false,true)

if showEqualHighsLowsInput
    getCurrentStructure(equalHighsLowsLengthInput,true)

if showInternalsInput or showInternalOrderBlocksInput or showTrendInput
    displayStructure(true)

if showStructureInput or showSwingOrderBlocksInput or showHighLowSwingsInput
    displayStructure()

if showInternalOrderBlocksInput
    deleteOrderBlocks(true)

if showSwingOrderBlocksInput
    deleteOrderBlocks()

if showFairValueGapsInput
    drawFairValueGaps()

if barstate.islastconfirmedhistory or barstate.islast
    if showInternalOrderBlocksInput        
        drawOrderBlocks(true)
        
    if showSwingOrderBlocksInput        
        drawOrderBlocks()

lastBarIndex    := currentBarIndex
currentBarIndex := bar_index
newBar          = currentBarIndex != lastBarIndex

if barstate.islastconfirmedhistory or (barstate.isrealtime and newBar)
    if showDailyLevelsInput and not higherTimeframe('D')
        drawLevels('D',timeframe.isdaily,dailyLevelsStyleInput,dailyLevelsColorInput)

    if showWeeklyLevelsInput and not higherTimeframe('W')
        drawLevels('W',timeframe.isweekly,weeklyLevelsStyleInput,weeklyLevelsColorInput)

    if showMonthlyLevelsInput and not higherTimeframe('M')
        drawLevels('M',timeframe.ismonthly,monthlyLevelsStyleInput,monthlyLevelsColorInput)

//---------------------------------------------------------------------------------------------------------------------}
//ALERTS
//---------------------------------------------------------------------------------------------------------------------{
alertcondition(currentAlerts.internalBullishBOS,        'Internal Bullish BOS',         'Internal Bullish BOS formed')
alertcondition(currentAlerts.internalBullishCHoCH,      'Internal Bullish CHoCH',       'Internal Bullish CHoCH formed')
alertcondition(currentAlerts.internalBearishBOS,        'Internal Bearish BOS',         'Internal Bearish BOS formed')
alertcondition(currentAlerts.internalBearishCHoCH,      'Internal Bearish CHoCH',       'Internal Bearish CHoCH formed')

alertcondition(currentAlerts.swingBullishBOS,           'Bullish BOS',                  'Internal Bullish BOS formed')
alertcondition(currentAlerts.swingBullishCHoCH,         'Bullish CHoCH',                'Internal Bullish CHoCH formed')
alertcondition(currentAlerts.swingBearishBOS,           'Bearish BOS',                  'Bearish BOS formed')
alertcondition(currentAlerts.swingBearishCHoCH,         'Bearish CHoCH',                'Bearish CHoCH formed')

alertcondition(currentAlerts.internalBullishOrderBlock, 'Bullish Internal OB Breakout', 'Price broke bullish internal OB')
alertcondition(currentAlerts.internalBearishOrderBlock, 'Bearish Internal OB Breakout', 'Price broke bearish internal OB')
alertcondition(currentAlerts.swingBullishOrderBlock,    'Bullish Swing OB Breakout',    'Price broke bullish swing OB')
alertcondition(currentAlerts.swingBearishOrderBlock,    'Bearish Swing OB Breakout',    'Price broke bearish swing OB')

alertcondition(currentAlerts.equalHighs,                'Equal Highs',                  'Equal highs detected')
alertcondition(currentAlerts.equalLows,                 'Equal Lows',                   'Equal lows detected')

alertcondition(currentAlerts.bullishFairValueGap,       'Bullish FVG',                  'Bullish FVG formed')
alertcondition(currentAlerts.bearishFairValueGap,       'Bearish FVG',                  'Bearish FVG formed')

//---------------------------------------------------------------------------------------------------------------------}






new



// © theEccentricTrader
//@version=6

indicator('All Harmonic Patterns [theEccentricTrader]', overlay = true, max_lines_count = 500, max_labels_count = 500)

/////////////
// IMPORTS //
/////////////

import theEccentricTrader/PubLibSwing/3 as sw
import theEccentricTrader/PubLibPattern/4 as pa

////////////////////
// PATTERN INPUTS //
////////////////////

bear_pattern_color = input(color.red, 'Bearish Pattern Colour', group = 'Pattern Colours')
bull_pattern_color = input(color.green, 'Bullish Pattern Colour', group = 'Pattern Colours')
neutral_pattern_color = input(color.blue, 'Neutral Pattern Colour', group = 'Pattern Colours')
dot_color = input(color.blue, 'Dotted Line Colour', group = 'Pattern Colours')
label_color = input(color.blue, 'Label Colour', group = 'Pattern Colours')

show_bear_5_0 = input(true, 'Show Bear 5-0', group = 'Patterns')
show_bull_5_0 = input(true, 'Show Bull 5-0', group = 'Patterns')
show_bear_abcd = input(true, 'Show Bear ABCD', group = 'Patterns')
show_bull_abcd = input(true, 'Show Bull ABCD', group = 'Patterns')
show_bear_alt_bat = input(true, 'Show Bear Alt. Bat', group = 'Patterns')
show_bull_alt_bat = input(true, 'Show Bull Alt. Bat', group = 'Patterns')
show_bear_bat = input(true, 'Show Bear Bat', group = 'Patterns')
show_bull_bat = input(true, 'Show Bull Bat', group = 'Patterns')
show_bear_butterfly = input(true, 'Show Bear Butterfly', group = 'Patterns')
show_bull_butterfly = input(true, 'Show Bull Butterfly', group = 'Patterns')
show_bear_cassiopeia_a = input(true, 'Show Bear Cassiopeia A', group = 'Patterns')
show_bull_cassiopeia_a = input(true, 'Show Bull Cassiopeia A', group = 'Patterns')
show_bear_cassiopeia_b = input(true, 'Show Bear Cassiopeia B', group = 'Patterns')
show_bull_cassiopeia_b = input(true, 'Show Bull Cassiopeia B', group = 'Patterns')
show_bear_cassiopeia_c = input(true, 'Show Bear Cassiopeia C', group = 'Patterns')
show_bull_cassiopeia_c = input(true, 'Show Bull Cassiopeia C', group = 'Patterns')
show_bear_crab = input(true, 'Show Bear Crab', group = 'Patterns')
show_bull_crab = input(true, 'Show Bull Crab', group = 'Patterns')
show_bear_deep_crab = input(true, 'Show Bear Deep Crab', group = 'Patterns')
show_bull_deep_crab = input(true, 'Show Bull Deep Crab', group = 'Patterns')
show_bear_cypher = input(true, 'Show Bear Cypher', group = 'Patterns')
show_bull_cypher = input(true, 'Show Bull Cypher', group = 'Patterns')
show_bear_gartley = input(true, 'Show Bear Gartley', group = 'Patterns')
show_bull_gartley = input(true, 'Show Bull Gartley', group = 'Patterns')
show_bear_shark = input(true, 'Show Bear Shark', group = 'Patterns')
show_bull_shark = input(true, 'Show Bull Shark', group = 'Patterns')
show_bear_three_drive = input(true, 'Show Bear Three-Drive', group = 'Patterns')
show_bull_three_drive = input(true, 'Show Bull Three-Drive', group = 'Patterns')

ab_low_tol = input(defval = 10, title = 'AB Lower Tolerance (%)', group = 'Pattern Tolerances')
ab_up_tol = input(defval = 10, title = 'AB Upper Tolerance (%)', group = 'Pattern Tolerances')
bc_low_tol = input(defval = 10, title = 'BC Lower Tolerance (%)', group = 'Pattern Tolerances')
bc_up_tol = input(defval = 10, title = 'BC Upper Tolerance (%)', group = 'Pattern Tolerances')
cd_low_tol = input(defval = 10, title = 'CD Lower Tolerance (%)', group = 'Pattern Tolerances')
cd_up_tol = input(defval = 10, title = 'CD Upper Tolerance (%)', group = 'Pattern Tolerances')
ad_low_tol = input(defval = 10, title = 'AD Lower Tolerance (%)', group = 'Pattern Tolerances')
ad_up_tol = input(defval = 10, title = 'AD Upper Tolerance (%)', group = 'Pattern Tolerances')
xc_low_tol = input(defval = 10, title = 'XC Lower Tolerance (%)', group = 'Pattern Tolerances')
xc_up_tol = input(defval = 10, title = 'XC Upper Tolerance (%)', group = 'Pattern Tolerances')
x1_low_tol = input(defval = 20, title = 'X1 Lower Tolerance (%)', group = 'Pattern Tolerances')
a1_low_tol = input(defval = 20, title = 'A1 Lower Tolerance (%)', group = 'Pattern Tolerances')
a1_up_tol = input(defval = 20, title = 'A1 Upper Tolerance (%)', group = 'Pattern Tolerances')
a2_low_tol = input(defval = 20, title = 'A2 Lower Tolerance (%)', group = 'Pattern Tolerances')
a2_up_tol = input(defval = 20, title = 'A2 Upper Tolerance (%)', group = 'Pattern Tolerances')
b2_low_tol = input(defval = 20, title = 'B2 Lower Tolerance (%)', group = 'Pattern Tolerances')
b2_up_tol = input(defval = 20, title = 'B2 Upper Tolerance (%)', group = 'Pattern Tolerances')
b3_low_tol = input(defval = 20, title = 'B3 Lower Tolerance (%)', group = 'Pattern Tolerances')
b3_up_tol = input(defval = 20, title = 'B3 Upper Tolerance (%)', group = 'Pattern Tolerances')

bear_5_0_alert = input(true, 'Bear 5-0 Alert', group = 'Alerts')
bull_5_0_alert = input(true, 'Bull 5-0 Alert', group = 'Alerts')
bear_abcd_alert = input(true, 'Bear ABCD Alert', group = 'Alerts')
bull_abcd_alert = input(true, 'Bull ABCD Alert', group = 'Alerts')
bear_alt_bat_alert = input(true, 'Bear Alt. Bat Alert', group = 'Alerts')
bull_alt_bat_alert = input(true, 'Bull Alt. Bat Alert', group = 'Alerts')
bear_bat_alert = input(true, 'Bear Bat Alert', group = 'Alerts')
bull_bat_alert = input(true, 'Bull Bat Alert', group = 'Alerts')
bear_butterfly_alert = input(true, 'Bear Butterfly Alert', group = 'Alerts')
bull_butterfly_alert = input(true, 'Bull Butterfly Alert', group = 'Alerts')
bear_cassiopeia_a_alert = input(true, 'Bear Cassiopeia A Alert', group = 'Alerts')
bull_cassiopeia_a_alert = input(true, 'Bull Cassiopeia A Alert', group = 'Alerts')
bear_cassiopeia_b_alert = input(true, 'Bear Cassiopeia B Alert', group = 'Alerts')
bull_cassiopeia_b_alert = input(true, 'Bull Cassiopeia B Alert', group = 'Alerts')
bear_cassiopeia_c_alert = input(true, 'Bear Cassiopeia C Alert', group = 'Alerts')
bull_cassiopeia_c_alert = input(true, 'Bull Cassiopeia C Alert', group = 'Alerts')
bear_crab_alert = input(true, 'Bear Crab Alert', group = 'Alerts')
bull_crab_alert = input(true, 'Bull Crab Alert', group = 'Alerts')
bear_deep_crab_alert = input(true, 'Bear Deep Crab Alert', group = 'Alerts')
bull_deep_crab_alert = input(true, 'Bull Deep Crab Alert', group = 'Alerts')
bear_cypher_alert = input(true, 'Bear Cypher Alert', group = 'Alerts')
bull_cypher_alert = input(true, 'Bull Cypher Alert', group = 'Alerts')
bear_gartley_alert = input(true, 'Bear Gartley Alert', group = 'Alerts')
bull_gartley_alert = input(true, 'Bull Gartley Alert', group = 'Alerts')
bear_shark_alert = input(true, 'Bear Shark Alert', group = 'Alerts')
bull_shark_alert = input(true, 'Bull Shark Alert', group = 'Alerts')
bear_three_drive_alert = input(true, 'Bear Three-Drive Alert', group = 'Alerts')
bull_three_drive_alert = input(true, 'Bull Three-Drive Alert', group = 'Alerts')

///////////////////////////
// CONDITIONAL VARIABLES //
///////////////////////////

sh = sw.sh()
sl = sw.sl()

shp_0 = sw.shp(0)
shpbi_0 = sw.shpbi(0)
shrr_0 = sw.shrr(0)

slp_0 = sw.slp(0)
slpbi_0 = sw.slpbi(0)
slrr_0 = sw.slrr(0)

shp_1 = sw.shp(1)
shpbi_1 = sw.shpbi(1)
shrr_1 = sw.shrr(1)

slp_1 = sw.slp(1)
slpbi_1 = sw.slpbi(1)
slrr_1 = sw.slrr(1)

shp_2 = sw.shp(2)
shpbi_2 = sw.shpbi(2)
shrr_2 = sw.shrr(2)

slp_2 = sw.slp(2)
slpbi_2 = sw.slpbi(2)
slrr_2 = sw.slrr(2)

bear_5_0 = pa.bear_5_0(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)
bull_5_0 = pa.bull_5_0(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)

bear_abcd = pa.bear_abcd(bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)
bull_abcd = pa.bull_abcd(bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)

bear_alt_bat = pa.bear_alt_bat(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_alt_bat = pa.bull_alt_bat(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_bat = pa.bear_bat(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_bat = pa.bull_bat(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_butterfly = pa.bear_butterfly(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_butterfly = pa.bull_butterfly(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_cassiopeia_a = pa.bear_cassiopeia_a(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)
bull_cassiopeia_a = pa.bull_cassiopeia_a(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)

bear_cassiopeia_b = pa.bear_cassiopeia_b(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)
bull_cassiopeia_b = pa.bull_cassiopeia_b(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)

bear_cassiopeia_c = pa.bear_cassiopeia_c(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)
bull_cassiopeia_c = pa.bull_cassiopeia_c(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)

bear_crab = pa.bear_crab(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_crab = pa.bull_crab(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_deep_crab = pa.bear_deep_crab(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_deep_crab = pa.bull_deep_crab(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_cypher = pa.bear_cypher(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, xc_low_tol, xc_up_tol)
bull_cypher = pa.bull_cypher(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, xc_low_tol, xc_up_tol)

bear_gartley = pa.bear_gartley(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_gartley = pa.bull_gartley(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_shark = pa.bear_shark(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, xc_low_tol, xc_up_tol)
bull_shark = pa.bull_shark(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, xc_low_tol, xc_up_tol)

bear_three_drive = pa.bear_three_drive(x1_low_tol, a1_low_tol, a1_up_tol, a2_low_tol, a2_up_tol, b2_low_tol, b2_up_tol, b3_low_tol, b3_up_tol)
bull_three_drive = pa.bull_three_drive(x1_low_tol, a1_low_tol, a1_up_tol, a2_low_tol, a2_up_tol, b2_low_tol, b2_up_tol, b3_low_tol, b3_up_tol)

/////////
// 5-0 //
/////////

var bear_5_0_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_5_0_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_5_0_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_5_0_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_5_0_line_5 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_5_0_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_5_0_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_5_0_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_5_0_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'O', textcolor = label_color)
var bear_5_0_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bear_5_0_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bear_5_0_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_5_0_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_5_0_label_6 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_5_0 and barstate.isconfirmed
    if show_bear_5_0
        line.set_xy1(bear_5_0_line_1, slpbi_2, slp_2)
        line.set_xy2(bear_5_0_line_1, shpbi_2, shp_2)
        line.set_xy1(bear_5_0_line_2, shpbi_2, shp_2)
        line.set_xy2(bear_5_0_line_2, slpbi_1, slp_1)
        line.set_xy1(bear_5_0_line_3, slpbi_1, slp_1)
        line.set_xy2(bear_5_0_line_3, shpbi_1, shp_1)
        line.set_xy1(bear_5_0_line_4, shpbi_1, shp_1)
        line.set_xy2(bear_5_0_line_4, slpbi_0, slp_0)
        line.set_xy1(bear_5_0_line_5, slpbi_0, slp_0)
        line.set_xy2(bear_5_0_line_5, shpbi_0, shp_0)
        line.set_xy1(bear_5_0_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_5_0_line_6, shpbi_1, shp_1)
        line.set_xy1(bear_5_0_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_5_0_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_5_0_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_5_0_line_8, slpbi_0, slp_0)
        label.set_xy(bear_5_0_label_1, slpbi_2, slp_2)
        label.set_xy(bear_5_0_label_2, shpbi_2, shp_2)
        label.set_xy(bear_5_0_label_3, slpbi_1, slp_1)
        label.set_xy(bear_5_0_label_4, shpbi_1, shp_1)
        label.set_xy(bear_5_0_label_5, slpbi_0, slp_0)
        label.set_xy(bear_5_0_label_6, shpbi_0, shp_0)
        label.set_text(bear_5_0_label_4, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_5_0_label_5, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_5_0_label_6, 'BEAR 5-0\nD (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_5_0_alert
        alert('Bearish 5-0')

var bull_5_0_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_5_0_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_5_0_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_5_0_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_5_0_line_5 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_5_0_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_5_0_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_5_0_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_5_0_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'O', textcolor = label_color)
var bull_5_0_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bull_5_0_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_5_0_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_5_0_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_5_0_label_6 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_5_0 and barstate.isconfirmed
    if show_bull_5_0
        line.set_xy1(bull_5_0_line_1, shpbi_2, shp_2)
        line.set_xy2(bull_5_0_line_1, slpbi_2, slp_2)
        line.set_xy1(bull_5_0_line_2, slpbi_2, slp_2)
        line.set_xy2(bull_5_0_line_2, shpbi_1, shp_1)
        line.set_xy1(bull_5_0_line_3, shpbi_1, shp_1)
        line.set_xy2(bull_5_0_line_3, slpbi_1, slp_1)
        line.set_xy1(bull_5_0_line_4, slpbi_1, slp_1)
        line.set_xy2(bull_5_0_line_4, shpbi_0, shp_0)
        line.set_xy1(bull_5_0_line_5, shpbi_0, shp_0)
        line.set_xy2(bull_5_0_line_5, slpbi_0, slp_0)
        line.set_xy1(bull_5_0_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_5_0_line_6, slpbi_1, slp_1)
        line.set_xy1(bull_5_0_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_5_0_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_5_0_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_5_0_line_8, shpbi_0, shp_0)
        label.set_xy(bull_5_0_label_1, shpbi_2, shp_2)
        label.set_xy(bull_5_0_label_2, slpbi_2, slp_2)
        label.set_xy(bull_5_0_label_3, shpbi_1, shp_1)
        label.set_xy(bull_5_0_label_4, slpbi_1, slp_1)
        label.set_xy(bull_5_0_label_5, shpbi_0, shp_0)
        label.set_xy(bull_5_0_label_6, slpbi_0, slp_0)
        label.set_text(bull_5_0_label_4, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_5_0_label_5, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_5_0_label_6, 'Bull 5-0\nD (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_5_0_alert
        alert('Bullish 5-0')

//////////
// ABCD //
//////////

var bear_abcd_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_abcd_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_abcd_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_abcd_line_4 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_abcd_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_abcd_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bear_abcd_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'B', textcolor = label_color)
var bear_abcd_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_abcd_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_abcd and barstate.isconfirmed
    if show_bear_abcd
        line.set_xy1(bear_abcd_line_1, slpbi_1, slp_1)
        line.set_xy2(bear_abcd_line_1, shpbi_1, shp_1)
        line.set_xy1(bear_abcd_line_2, shpbi_1, shp_1)
        line.set_xy2(bear_abcd_line_2, slpbi_0, slp_0)
        line.set_xy1(bear_abcd_line_3, slpbi_0, slp_0)
        line.set_xy2(bear_abcd_line_3, shpbi_0, shp_0)
        line.set_xy1(bear_abcd_line_4, shpbi_1, shp_1)
        line.set_xy2(bear_abcd_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_abcd_line_5, slpbi_1, slp_1)
        line.set_xy2(bear_abcd_line_5, slpbi_0, slp_0)
        label.set_xy(bear_abcd_label_1, slpbi_1, slp_1)
        label.set_xy(bear_abcd_label_2, shpbi_1, shp_1)
        label.set_xy(bear_abcd_label_3, slpbi_0, slp_0)
        label.set_xy(bear_abcd_label_4, shpbi_0, shp_0)
        label.set_text(bear_abcd_label_3, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_abcd_label_4, 'BEAR ABCD\nD (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_abcd_alert
        alert('Bearish ABCD')

var bull_abcd_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_abcd_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_abcd_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_abcd_line_4 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_abcd_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_abcd_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_abcd_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'B', textcolor = label_color)
var bull_abcd_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_abcd_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_abcd and barstate.isconfirmed
    if show_bull_abcd
        line.set_xy1(bull_abcd_line_1, shpbi_1, shp_1)
        line.set_xy2(bull_abcd_line_1, slpbi_1, slp_1)
        line.set_xy1(bull_abcd_line_2, slpbi_1, slp_1)
        line.set_xy2(bull_abcd_line_2, shpbi_0, shp_0)
        line.set_xy1(bull_abcd_line_3, shpbi_0, shp_0)
        line.set_xy2(bull_abcd_line_3, slpbi_0, slp_0)
        line.set_xy1(bull_abcd_line_4, slpbi_1, slp_1)
        line.set_xy2(bull_abcd_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_abcd_line_5, shpbi_1, shp_1)
        line.set_xy2(bull_abcd_line_5, shpbi_0, shp_0)
        label.set_xy(bull_abcd_label_1, shpbi_1, shp_1)
        label.set_xy(bull_abcd_label_2, slpbi_1, slp_1)
        label.set_xy(bull_abcd_label_3, shpbi_0, shp_0)
        label.set_xy(bull_abcd_label_4, slpbi_0, slp_0)
        label.set_text(bull_abcd_label_3, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_abcd_label_4, 'Bull ABCD\nD (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_abcd_alert
        alert('Bullish ABCD')

///////////////////
// ALTERNATE BAT //
///////////////////

var bear_alt_bat_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_alt_bat_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_alt_bat_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_alt_bat_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_alt_bat_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_alt_bat_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_alt_bat_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_alt_bat_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_alt_bat_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bear_alt_bat_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bear_alt_bat_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_alt_bat_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_alt_bat_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_alt_bat and barstate.isconfirmed
    if show_bear_alt_bat
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_alt_bat_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_alt_bat_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_alt_bat_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_alt_bat_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_alt_bat_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_alt_bat_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_alt_bat_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_alt_bat_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_alt_bat_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_alt_bat_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_alt_bat_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_alt_bat_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_alt_bat_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_alt_bat_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_alt_bat_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_alt_bat_line_8, slpbi_0, slp_0)
        label.set_xy(bear_alt_bat_label_1, shpbi_2, shp_2)
        label.set_xy(bear_alt_bat_label_2, slpbi_1, slp_1)
        label.set_xy(bear_alt_bat_label_3, shpbi_1, shp_1)
        label.set_xy(bear_alt_bat_label_4, slpbi_0, slp_0)
        label.set_xy(bear_alt_bat_label_5, shpbi_0, shp_0)
        label.set_text(bear_alt_bat_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_alt_bat_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_alt_bat_label_5, 'BEAR ALT. BAT\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_alt_bat_alert
        alert('Bearish Alt. Bat')

var bull_alt_bat_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_alt_bat_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_alt_bat_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_alt_bat_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_alt_bat_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_alt_bat_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_alt_bat_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_alt_bat_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_alt_bat_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bull_alt_bat_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_alt_bat_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_alt_bat_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_alt_bat_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_alt_bat and barstate.isconfirmed
    if show_bull_alt_bat
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_alt_bat_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_alt_bat_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_alt_bat_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_alt_bat_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_alt_bat_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_alt_bat_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_alt_bat_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_alt_bat_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_alt_bat_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_alt_bat_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_alt_bat_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_alt_bat_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_alt_bat_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_alt_bat_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_alt_bat_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_alt_bat_line_8, shpbi_0, shp_0)
        label.set_xy(bull_alt_bat_label_1, slpbi_2, slp_2)
        label.set_xy(bull_alt_bat_label_2, shpbi_1, shp_1)
        label.set_xy(bull_alt_bat_label_3, slpbi_1, slp_1)
        label.set_xy(bull_alt_bat_label_4, shpbi_0, shp_0)
        label.set_xy(bull_alt_bat_label_5, slpbi_0, slp_0)
        label.set_text(bull_alt_bat_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_alt_bat_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_alt_bat_label_5, 'BULL ALT. BAT\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_alt_bat_alert
        alert('Bullish Alt. Bat')

/////////
// BAT //
/////////

var bear_bat_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_bat_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_bat_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_bat_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_bat_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_bat_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_bat_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_bat_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_bat_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bear_bat_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bear_bat_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_bat_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_bat_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_bat and barstate.isconfirmed
    if show_bear_bat
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_bat_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_bat_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_bat_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_bat_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_bat_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_bat_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_bat_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_bat_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_bat_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_bat_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_bat_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_bat_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_bat_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_bat_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_bat_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_bat_line_8, slpbi_0, slp_0)
        label.set_xy(bear_bat_label_1, shpbi_2, shp_2)
        label.set_xy(bear_bat_label_2, slpbi_1, slp_1)
        label.set_xy(bear_bat_label_3, shpbi_1, shp_1)
        label.set_xy(bear_bat_label_4, slpbi_0, slp_0)
        label.set_xy(bear_bat_label_5, shpbi_0, shp_0)
        label.set_text(bear_bat_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_bat_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_bat_label_5, 'BEAR BAT\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_bat_alert
        alert('Bearish Bat')

var bull_bat_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_bat_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_bat_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_bat_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_bat_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_bat_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_bat_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_bat_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_bat_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bull_bat_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_bat_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_bat_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_bat_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_bat and barstate.isconfirmed
    if show_bull_bat
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_bat_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_bat_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_bat_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_bat_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_bat_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_bat_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_bat_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_bat_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_bat_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_bat_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_bat_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_bat_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_bat_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_bat_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_bat_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_bat_line_8, shpbi_0, shp_0)
        label.set_xy(bull_bat_label_1, slpbi_2, slp_2)
        label.set_xy(bull_bat_label_2, shpbi_1, shp_1)
        label.set_xy(bull_bat_label_3, slpbi_1, slp_1)
        label.set_xy(bull_bat_label_4, shpbi_0, shp_0)
        label.set_xy(bull_bat_label_5, slpbi_0, slp_0)
        label.set_text(bull_bat_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_bat_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_bat_label_5, 'BULL BAT\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_bat_alert
        alert('Bullish Bat')

///////////////
// BUTTERFLY //
///////////////

var bear_butterfly_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_butterfly_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_butterfly_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_butterfly_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_butterfly_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_butterfly_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_butterfly_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_butterfly_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_butterfly_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bear_butterfly_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bear_butterfly_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_butterfly_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_butterfly_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_butterfly and barstate.isconfirmed
    if show_bear_butterfly
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_butterfly_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_butterfly_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_butterfly_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_butterfly_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_butterfly_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_butterfly_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_butterfly_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_butterfly_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_butterfly_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_butterfly_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_butterfly_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_butterfly_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_butterfly_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_butterfly_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_butterfly_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_butterfly_line_8, slpbi_0, slp_0)
        label.set_xy(bear_butterfly_label_1, shpbi_2, shp_2)
        label.set_xy(bear_butterfly_label_2, slpbi_1, slp_1)
        label.set_xy(bear_butterfly_label_3, shpbi_1, shp_1)
        label.set_xy(bear_butterfly_label_4, slpbi_0, slp_0)
        label.set_xy(bear_butterfly_label_5, shpbi_0, shp_0)
        label.set_text(bear_butterfly_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_butterfly_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_butterfly_label_5, 'BEAR BUTTERFLY\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_butterfly_alert
        alert('Bearish Butterfly')

var bull_butterfly_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_butterfly_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_butterfly_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_butterfly_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_butterfly_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_butterfly_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_butterfly_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_butterfly_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_butterfly_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bull_butterfly_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_butterfly_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_butterfly_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_butterfly_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_butterfly and barstate.isconfirmed
    if show_bull_butterfly
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_butterfly_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_butterfly_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_butterfly_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_butterfly_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_butterfly_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_butterfly_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_butterfly_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_butterfly_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_butterfly_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_butterfly_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_butterfly_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_butterfly_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_butterfly_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_butterfly_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_butterfly_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_butterfly_line_8, shpbi_0, shp_0)
        label.set_xy(bull_butterfly_label_1, slpbi_2, slp_2)
        label.set_xy(bull_butterfly_label_2, shpbi_1, shp_1)
        label.set_xy(bull_butterfly_label_3, slpbi_1, slp_1)
        label.set_xy(bull_butterfly_label_4, shpbi_0, shp_0)
        label.set_xy(bull_butterfly_label_5, slpbi_0, slp_0)
        label.set_text(bull_butterfly_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_butterfly_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_butterfly_label_5, 'BULL BUTTERFLY\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_butterfly_alert
        alert('Bullish Butterfly')

//////////////////
// CASSIOPEIA A //
//////////////////

var bear_cassiopeia_a_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_a_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_a_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_a_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_a_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_a_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_a_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_a_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_a_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bear_cassiopeia_a_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bear_cassiopeia_a_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_cassiopeia_a_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_cassiopeia_a_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_cassiopeia_a and barstate.isconfirmed
    if show_bear_cassiopeia_a
        line.set_xy1(bear_cassiopeia_a_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_a_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_cassiopeia_a_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_a_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_a_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_a_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_cassiopeia_a_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_cassiopeia_a_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_a_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_a_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_a_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_a_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_a_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_a_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_a_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_a_line_8, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_a_label_1, shpbi_2, shp_2)
        label.set_xy(bear_cassiopeia_a_label_2, slpbi_1, slp_1)
        label.set_xy(bear_cassiopeia_a_label_3, shpbi_1, shp_1)
        label.set_xy(bear_cassiopeia_a_label_4, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_a_label_5, shpbi_0, shp_0)
        label.set_text(bear_cassiopeia_a_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_cassiopeia_a_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_cassiopeia_a_label_5, 'BEAR CASSIOPEIA A\nD (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_cassiopeia_a_alert
        alert('Bearish Cassiopeia A')

var bull_cassiopeia_a_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_a_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_a_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_a_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_a_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_a_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_a_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_a_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_a_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bull_cassiopeia_a_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_cassiopeia_a_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_cassiopeia_a_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_cassiopeia_a_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_cassiopeia_a and barstate.isconfirmed
    if show_bull_cassiopeia_a
        line.set_xy1(bull_cassiopeia_a_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_a_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_cassiopeia_a_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_a_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_a_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_a_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_cassiopeia_a_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_cassiopeia_a_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_a_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_a_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_a_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_a_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_a_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_a_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_a_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_a_line_8, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_a_label_1, slpbi_2, slp_2)
        label.set_xy(bull_cassiopeia_a_label_2, shpbi_1, shp_1)
        label.set_xy(bull_cassiopeia_a_label_3, slpbi_1, slp_1)
        label.set_xy(bull_cassiopeia_a_label_4, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_a_label_5, slpbi_0, slp_0)
        label.set_text(bull_cassiopeia_a_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_cassiopeia_a_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_cassiopeia_a_label_5, 'BULL CASSIOPEIA A\nD (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_cassiopeia_a_alert
        alert('Bullish Cassiopeia A')

//////////////////
// CASSIOPEIA B //
//////////////////

var bear_cassiopeia_b_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_b_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_b_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_b_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_b_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_b_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_b_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_b_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_b_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bear_cassiopeia_b_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bear_cassiopeia_b_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_cassiopeia_b_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_cassiopeia_b_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_cassiopeia_b and barstate.isconfirmed
    if show_bear_cassiopeia_b
        line.set_xy1(bear_cassiopeia_b_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_b_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_cassiopeia_b_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_b_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_b_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_b_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_cassiopeia_b_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_cassiopeia_b_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_b_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_b_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_b_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_b_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_b_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_b_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_b_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_b_line_8, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_b_label_1, shpbi_2, shp_2)
        label.set_xy(bear_cassiopeia_b_label_2, slpbi_1, slp_1)
        label.set_xy(bear_cassiopeia_b_label_3, shpbi_1, shp_1)
        label.set_xy(bear_cassiopeia_b_label_4, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_b_label_5, shpbi_0, shp_0)
        label.set_text(bear_cassiopeia_b_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_cassiopeia_b_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_cassiopeia_b_label_5, 'BEAR CASSIOPEIA B\nD (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_cassiopeia_b_alert
        alert('Bearish Cassiopeia B')

var bull_cassiopeia_b_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_b_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_b_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_b_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_b_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_b_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_b_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_b_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_b_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bull_cassiopeia_b_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_cassiopeia_b_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_cassiopeia_b_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_cassiopeia_b_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_cassiopeia_b and barstate.isconfirmed
    if show_bull_cassiopeia_b
        line.set_xy1(bull_cassiopeia_b_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_b_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_cassiopeia_b_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_b_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_b_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_b_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_cassiopeia_b_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_cassiopeia_b_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_b_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_b_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_b_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_b_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_b_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_b_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_b_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_b_line_8, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_b_label_1, slpbi_2, slp_2)
        label.set_xy(bull_cassiopeia_b_label_2, shpbi_1, shp_1)
        label.set_xy(bull_cassiopeia_b_label_3, slpbi_1, slp_1)
        label.set_xy(bull_cassiopeia_b_label_4, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_b_label_5, slpbi_0, slp_0)
        label.set_text(bull_cassiopeia_b_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_cassiopeia_b_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_cassiopeia_b_label_5, 'BULL CASSIOPEIA B\nD (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_cassiopeia_b_alert
        alert('Bullish Cassiopeia B')

//////////////////
// CASSIOPEIA C //
//////////////////

var bear_cassiopeia_c_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_c_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_c_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_c_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cassiopeia_c_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_c_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_c_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_c_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cassiopeia_c_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bear_cassiopeia_c_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bear_cassiopeia_c_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_cassiopeia_c_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_cassiopeia_c_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_cassiopeia_c and barstate.isconfirmed
    if show_bear_cassiopeia_c
        line.set_xy1(bear_cassiopeia_c_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_c_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_cassiopeia_c_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_c_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_c_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_c_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_cassiopeia_c_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_cassiopeia_c_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_c_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_c_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_c_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_c_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_c_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_c_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_c_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_c_line_8, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_c_label_1, shpbi_2, shp_2)
        label.set_xy(bear_cassiopeia_c_label_2, slpbi_1, slp_1)
        label.set_xy(bear_cassiopeia_c_label_3, shpbi_1, shp_1)
        label.set_xy(bear_cassiopeia_c_label_4, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_c_label_5, shpbi_0, shp_0)
        label.set_text(bear_cassiopeia_c_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_cassiopeia_c_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_cassiopeia_c_label_5, 'BEAR CASSIOPEIA C\nD (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_cassiopeia_c_alert
        alert('Bearish Cassiopeia C')

var bull_cassiopeia_c_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_c_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_c_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_c_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cassiopeia_c_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_c_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_c_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_c_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cassiopeia_c_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bull_cassiopeia_c_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_cassiopeia_c_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_cassiopeia_c_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_cassiopeia_c_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_cassiopeia_c and barstate.isconfirmed
    if show_bull_cassiopeia_c
        line.set_xy1(bull_cassiopeia_c_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_c_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_cassiopeia_c_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_c_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_c_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_c_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_cassiopeia_c_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_cassiopeia_c_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_c_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_c_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_c_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_c_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_c_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_c_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_c_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_c_line_8, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_c_label_1, slpbi_2, slp_2)
        label.set_xy(bull_cassiopeia_c_label_2, shpbi_1, shp_1)
        label.set_xy(bull_cassiopeia_c_label_3, slpbi_1, slp_1)
        label.set_xy(bull_cassiopeia_c_label_4, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_c_label_5, slpbi_0, slp_0)
        label.set_text(bull_cassiopeia_c_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_cassiopeia_c_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_cassiopeia_c_label_5, 'BULL CASSIOPEIA C\nD (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_cassiopeia_c_alert
        alert('Bullish Cassiopeia C')

//////////
// CRAB //
//////////

var bear_crab_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_crab_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_crab_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_crab_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_crab_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_crab_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_crab_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_crab_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_crab_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bear_crab_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bear_crab_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_crab_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_crab_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_crab and barstate.isconfirmed
    if show_bear_crab
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_crab_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_crab_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_crab_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_crab_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_crab_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_crab_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_crab_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_crab_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_crab_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_crab_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_crab_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_crab_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_crab_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_crab_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_crab_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_crab_line_8, slpbi_0, slp_0)
        label.set_xy(bear_crab_label_1, shpbi_2, shp_2)
        label.set_xy(bear_crab_label_2, slpbi_1, slp_1)
        label.set_xy(bear_crab_label_3, shpbi_1, shp_1)
        label.set_xy(bear_crab_label_4, slpbi_0, slp_0)
        label.set_xy(bear_crab_label_5, shpbi_0, shp_0)
        label.set_text(bear_crab_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_crab_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_crab_label_5, 'BEAR CRAB\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_crab_alert
        alert('Bearish Crab')

var bull_crab_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_crab_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_crab_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_crab_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_crab_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_crab_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_crab_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_crab_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_crab_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bull_crab_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_crab_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_crab_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_crab_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_crab and barstate.isconfirmed
    if show_bull_crab
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_crab_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_crab_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_crab_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_crab_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_crab_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_crab_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_crab_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_crab_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_crab_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_crab_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_crab_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_crab_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_crab_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_crab_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_crab_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_crab_line_8, shpbi_0, shp_0)
        label.set_xy(bull_crab_label_1, slpbi_2, slp_2)
        label.set_xy(bull_crab_label_2, shpbi_1, shp_1)
        label.set_xy(bull_crab_label_3, slpbi_1, slp_1)
        label.set_xy(bull_crab_label_4, shpbi_0, shp_0)
        label.set_xy(bull_crab_label_5, slpbi_0, slp_0)
        label.set_text(bull_crab_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_crab_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_crab_label_5, 'BULL CRAB\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_crab_alert
        alert('Bullish Crab')

///////////////
// DEEP CRAB //
///////////////

var bear_deep_crab_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_deep_crab_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_deep_crab_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_deep_crab_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_deep_crab_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_deep_crab_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_deep_crab_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_deep_crab_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_deep_crab_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bear_deep_crab_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bear_deep_crab_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_deep_crab_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_deep_crab_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_deep_crab and barstate.isconfirmed
    if show_bear_deep_crab
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_deep_crab_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_deep_crab_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_deep_crab_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_deep_crab_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_deep_crab_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_deep_crab_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_deep_crab_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_deep_crab_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_deep_crab_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_deep_crab_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_deep_crab_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_deep_crab_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_deep_crab_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_deep_crab_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_deep_crab_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_deep_crab_line_8, slpbi_0, slp_0)
        label.set_xy(bear_deep_crab_label_1, shpbi_2, shp_2)
        label.set_xy(bear_deep_crab_label_2, slpbi_1, slp_1)
        label.set_xy(bear_deep_crab_label_3, shpbi_1, shp_1)
        label.set_xy(bear_deep_crab_label_4, slpbi_0, slp_0)
        label.set_xy(bear_deep_crab_label_5, shpbi_0, shp_0)
        label.set_text(bear_deep_crab_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_deep_crab_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_deep_crab_label_5, 'BEAR DEEP CRAB\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_deep_crab_alert
        alert('Bearish Deep Crab')

var bull_deep_crab_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_deep_crab_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_deep_crab_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_deep_crab_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_deep_crab_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_deep_crab_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_deep_crab_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_deep_crab_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_deep_crab_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bull_deep_crab_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_deep_crab_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_deep_crab_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_deep_crab_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_deep_crab and barstate.isconfirmed
    if show_bull_deep_crab
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_deep_crab_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_deep_crab_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_deep_crab_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_deep_crab_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_deep_crab_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_deep_crab_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_deep_crab_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_deep_crab_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_deep_crab_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_deep_crab_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_deep_crab_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_deep_crab_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_deep_crab_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_deep_crab_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_deep_crab_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_deep_crab_line_8, shpbi_0, shp_0)
        label.set_xy(bull_deep_crab_label_1, slpbi_2, slp_2)
        label.set_xy(bull_deep_crab_label_2, shpbi_1, shp_1)
        label.set_xy(bull_deep_crab_label_3, slpbi_1, slp_1)
        label.set_xy(bull_deep_crab_label_4, shpbi_0, shp_0)
        label.set_xy(bull_deep_crab_label_5, slpbi_0, slp_0)
        label.set_text(bull_deep_crab_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_deep_crab_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_deep_crab_label_5, 'BULL DEEP CRAB\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_deep_crab_alert
        alert('Bullish Deep Crab')

////////////
// CYPHER //
////////////

var bear_cypher_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cypher_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cypher_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cypher_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_cypher_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cypher_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cypher_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cypher_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_cypher_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bear_cypher_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bear_cypher_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_cypher_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_cypher_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_cypher and barstate.isconfirmed
    if show_bear_cypher
        xcrr = (shp_0 - slp_0) / (shp_2 - slp_0) * 100
        line.set_xy1(bear_cypher_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_cypher_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_cypher_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_cypher_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_cypher_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_cypher_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_cypher_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_cypher_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_cypher_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_cypher_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_cypher_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_cypher_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_cypher_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_cypher_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_cypher_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_cypher_line_8, slpbi_0, slp_0)
        label.set_xy(bear_cypher_label_1, shpbi_2, shp_2)
        label.set_xy(bear_cypher_label_2, slpbi_1, slp_1)
        label.set_xy(bear_cypher_label_3, shpbi_1, shp_1)
        label.set_xy(bear_cypher_label_4, slpbi_0, slp_0)
        label.set_xy(bear_cypher_label_5, shpbi_0, shp_0)
        label.set_text(bear_cypher_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_cypher_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_cypher_label_5, 'BEAR CYPHER\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(XC: ' + str.tostring(math.round(xcrr, 2)) + ')')
    if bear_cypher_alert
        alert('Bearish Cypher')

var bull_cypher_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cypher_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cypher_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cypher_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_cypher_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cypher_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cypher_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cypher_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_cypher_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bull_cypher_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_cypher_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_cypher_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_cypher_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_cypher and barstate.isconfirmed
    if show_bull_cypher
        xcrr = (shp_0 - slp_0) / (shp_0 - slp_2) * 100
        line.set_xy1(bull_cypher_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_cypher_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_cypher_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_cypher_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_cypher_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_cypher_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_cypher_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_cypher_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_cypher_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_cypher_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_cypher_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_cypher_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_cypher_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_cypher_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_cypher_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_cypher_line_8, shpbi_0, shp_0)
        label.set_xy(bull_cypher_label_1, slpbi_2, slp_2)
        label.set_xy(bull_cypher_label_2, shpbi_1, shp_1)
        label.set_xy(bull_cypher_label_3, slpbi_1, slp_1)
        label.set_xy(bull_cypher_label_4, shpbi_0, shp_0)
        label.set_xy(bull_cypher_label_5, slpbi_0, slp_0)
        label.set_text(bull_cypher_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_cypher_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_cypher_label_5, 'BULL CYPHER\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(XC: ' + str.tostring(math.round(xcrr, 2)) + ')')
    if bull_cypher_alert
        alert('Bullish Cypher')

/////////////
// GARTLEY //
/////////////

var bear_gartley_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_gartley_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_gartley_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_gartley_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_gartley_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_gartley_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_gartley_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_gartley_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_gartley_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bear_gartley_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bear_gartley_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_gartley_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_gartley_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_gartley and barstate.isconfirmed
    if show_bear_gartley
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_gartley_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_gartley_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_gartley_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_gartley_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_gartley_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_gartley_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_gartley_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_gartley_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_gartley_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_gartley_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_gartley_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_gartley_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_gartley_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_gartley_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_gartley_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_gartley_line_8, slpbi_0, slp_0)
        label.set_xy(bear_gartley_label_1, shpbi_2, shp_2)
        label.set_xy(bear_gartley_label_2, slpbi_1, slp_1)
        label.set_xy(bear_gartley_label_3, shpbi_1, shp_1)
        label.set_xy(bear_gartley_label_4, slpbi_0, slp_0)
        label.set_xy(bear_gartley_label_5, shpbi_0, shp_0)
        label.set_text(bear_gartley_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_gartley_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_gartley_label_5, 'BEAR GARTLEY\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_gartley_alert
        alert('Bearish Gartley')

var bull_gartley_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_gartley_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_gartley_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_gartley_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_gartley_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_gartley_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_gartley_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_gartley_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_gartley_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bull_gartley_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bull_gartley_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_gartley_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_gartley_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_gartley and barstate.isconfirmed
    if show_bull_gartley
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_gartley_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_gartley_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_gartley_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_gartley_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_gartley_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_gartley_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_gartley_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_gartley_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_gartley_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_gartley_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_gartley_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_gartley_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_gartley_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_gartley_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_gartley_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_gartley_line_8, shpbi_0, shp_0)
        label.set_xy(bull_gartley_label_1, slpbi_2, slp_2)
        label.set_xy(bull_gartley_label_2, shpbi_1, shp_1)
        label.set_xy(bull_gartley_label_3, slpbi_1, slp_1)
        label.set_xy(bull_gartley_label_4, shpbi_0, shp_0)
        label.set_xy(bull_gartley_label_5, slpbi_0, slp_0)
        label.set_text(bull_gartley_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_gartley_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_gartley_label_5, 'BULL GARTLEY\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_gartley_alert
        alert('Bullish Gartley')

///////////
// SHARK //
///////////

var bear_shark_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_shark_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_shark_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_shark_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_shark_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_shark_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_shark_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_shark_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'O', textcolor = label_color)
var bear_shark_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bear_shark_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_color)
var bear_shark_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_shark_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_shark and barstate.isconfirmed
    if show_bear_shark
        xcrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_shark_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_shark_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_shark_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_shark_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_shark_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_shark_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_shark_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_shark_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_shark_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_shark_line_5, shpbi_0, shp_0)
        line.set_xy1(bear_shark_line_6, shpbi_1, shp_1)
        line.set_xy2(bear_shark_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_shark_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_shark_line_7, slpbi_0, slp_0)
        label.set_xy(bear_shark_label_1, shpbi_2, shp_2)
        label.set_xy(bear_shark_label_2, slpbi_1, slp_1)
        label.set_xy(bear_shark_label_3, shpbi_1, shp_1)
        label.set_xy(bear_shark_label_4, slpbi_0, slp_0)
        label.set_xy(bear_shark_label_5, shpbi_0, shp_0)
        label.set_text(bear_shark_label_4, 'B (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_shark_label_5, 'BEAR SHARK\nC (' + str.tostring(math.round(shrr_0, 2)) + ')\n(XC: ' + str.tostring(math.round(xcrr, 2)) + ')')
    if bear_shark_alert
        alert('Bearish Shark')

var bull_shark_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_shark_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_shark_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_shark_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_shark_line_5 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_shark_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_shark_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_shark_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'O', textcolor = label_color)
var bull_shark_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bull_shark_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_color)
var bull_shark_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_shark_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_shark and barstate.isconfirmed
    if show_bull_shark
        xcrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_shark_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_shark_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_shark_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_shark_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_shark_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_shark_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_shark_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_shark_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_shark_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_shark_line_5, slpbi_0, slp_0)
        line.set_xy1(bull_shark_line_6, slpbi_1, slp_1)
        line.set_xy2(bull_shark_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_shark_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_shark_line_7, shpbi_0, shp_0)
        label.set_xy(bull_shark_label_1, slpbi_2, slp_2)
        label.set_xy(bull_shark_label_2, shpbi_1, shp_1)
        label.set_xy(bull_shark_label_3, slpbi_1, slp_1)
        label.set_xy(bull_shark_label_4, shpbi_0, shp_0)
        label.set_xy(bull_shark_label_5, slpbi_0, slp_0)
        label.set_text(bull_shark_label_4, 'B (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_shark_label_5, 'BULL SHARK\nC (' + str.tostring(math.round(slrr_0, 2)) + ')\n(XC: ' + str.tostring(math.round(xcrr, 2)) + ')')
    if bull_shark_alert
        alert('Bullish Shark')

/////////////////
// THREE-DRIVE //
/////////////////

var bear_three_drive_line_1 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_three_drive_line_2 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_three_drive_line_3 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_three_drive_line_4 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_three_drive_line_5 = line.new(na, na, na, na, color = bear_pattern_color, width = 2)
var bear_three_drive_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_three_drive_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_three_drive_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_three_drive_line_9 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bear_three_drive_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_color)
var bear_three_drive_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_three_drive_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_three_drive_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bear_three_drive_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bear_three_drive_label_6 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)

if sh and bear_three_drive and barstate.isconfirmed
    if show_bear_three_drive
        line.set_xy1(bear_three_drive_line_1, slpbi_2, slp_2)
        line.set_xy2(bear_three_drive_line_1, shpbi_2, shp_2)
        line.set_xy1(bear_three_drive_line_2, shpbi_2, shp_2)
        line.set_xy2(bear_three_drive_line_2, slpbi_1, slp_1)
        line.set_xy1(bear_three_drive_line_3, slpbi_1, slp_1)
        line.set_xy2(bear_three_drive_line_3, shpbi_1, shp_1)
        line.set_xy1(bear_three_drive_line_4, shpbi_1, shp_1)
        line.set_xy2(bear_three_drive_line_4, slpbi_0, slp_0)
        line.set_xy1(bear_three_drive_line_5, slpbi_0, slp_0)
        line.set_xy2(bear_three_drive_line_5, shpbi_0, shp_0)
        line.set_xy1(bear_three_drive_line_6, slpbi_2, slp_2)
        line.set_xy2(bear_three_drive_line_6, slpbi_1, slp_1)
        line.set_xy1(bear_three_drive_line_7, shpbi_2, shp_2)
        line.set_xy2(bear_three_drive_line_7, shpbi_1, shp_1)
        line.set_xy1(bear_three_drive_line_8, shpbi_1, shp_1)
        line.set_xy2(bear_three_drive_line_8, shpbi_0, shp_0)
        line.set_xy1(bear_three_drive_line_9, slpbi_1, slp_1)
        line.set_xy2(bear_three_drive_line_9, slpbi_0, slp_0)
        label.set_xy(bear_three_drive_label_1, slpbi_2, slp_2)
        label.set_xy(bear_three_drive_label_2, shpbi_2, shp_2)
        label.set_xy(bear_three_drive_label_3, slpbi_1, slp_1)
        label.set_xy(bear_three_drive_label_4, shpbi_1, shp_1)
        label.set_xy(bear_three_drive_label_5, slpbi_0, slp_0)
        label.set_xy(bear_three_drive_label_6, shpbi_0, shp_0)
        label.set_text(bear_three_drive_label_2, '1 (' + str.tostring(math.round(shrr_2, 2)) + ')')
        label.set_text(bear_three_drive_label_3, 'A (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bear_three_drive_label_4, '2 (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_three_drive_label_5, 'B (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_three_drive_label_6, 'BEAR THREE-DRIVE\n3 (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_three_drive_alert
        alert('Bearish Three-Drive')

var bull_three_drive_line_1 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_three_drive_line_2 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_three_drive_line_3 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_three_drive_line_4 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_three_drive_line_5 = line.new(na, na, na, na, color = bull_pattern_color, width = 2)
var bull_three_drive_line_6 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_three_drive_line_7 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_three_drive_line_8 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_three_drive_line_9 = line.new(na, na, na, na, color = dot_color, style = line.style_dashed)
var bull_three_drive_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_color)
var bull_three_drive_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_three_drive_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_three_drive_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)
var bull_three_drive_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_color)
var bull_three_drive_label_6 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_color)

if sl and bull_three_drive and barstate.isconfirmed
    if show_bull_three_drive
        line.set_xy1(bull_three_drive_line_1, shpbi_2, shp_2)
        line.set_xy2(bull_three_drive_line_1, slpbi_2, slp_2)
        line.set_xy1(bull_three_drive_line_2, slpbi_2, slp_2)
        line.set_xy2(bull_three_drive_line_2, shpbi_1, shp_1)
        line.set_xy1(bull_three_drive_line_3, shpbi_1, shp_1)
        line.set_xy2(bull_three_drive_line_3, slpbi_1, slp_1)
        line.set_xy1(bull_three_drive_line_4, slpbi_1, slp_1)
        line.set_xy2(bull_three_drive_line_4, shpbi_0, shp_0)
        line.set_xy1(bull_three_drive_line_5, shpbi_0, shp_0)
        line.set_xy2(bull_three_drive_line_5, slpbi_0, slp_0)
        line.set_xy1(bull_three_drive_line_6, shpbi_2, shp_2)
        line.set_xy2(bull_three_drive_line_6, shpbi_1, shp_1)
        line.set_xy1(bull_three_drive_line_7, slpbi_2, slp_2)
        line.set_xy2(bull_three_drive_line_7, slpbi_1, slp_1)
        line.set_xy1(bull_three_drive_line_8, slpbi_1, slp_1)
        line.set_xy2(bull_three_drive_line_8, slpbi_0, slp_0)
        line.set_xy1(bull_three_drive_line_9, shpbi_1, shp_1)
        line.set_xy2(bull_three_drive_line_9, shpbi_0, shp_0)
        label.set_xy(bull_three_drive_label_1, shpbi_2, shp_2)
        label.set_xy(bull_three_drive_label_2, slpbi_2, slp_2)
        label.set_xy(bull_three_drive_label_3, shpbi_1, shp_1)
        label.set_xy(bull_three_drive_label_4, slpbi_1, slp_1)
        label.set_xy(bull_three_drive_label_5, shpbi_0, shp_0)
        label.set_xy(bull_three_drive_label_6, slpbi_0, slp_0)
        label.set_text(bull_three_drive_label_2, '1 (' + str.tostring(math.round(slrr_2, 2)) + ')')
        label.set_text(bull_three_drive_label_3, 'A (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bull_three_drive_label_4, '2 (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_three_drive_label_5, 'B (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_three_drive_label_6, 'BULL THREE-DRIVE\n3 (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_three_drive_alert
        alert('Bullish Three-Drive')




