//@version=6

import Trendoscope/utils/1 as ut
import Trendoscope/ohlc/3 as o
import Trendoscope/LineWrapper/2 as wr
import Trendoscope/ZigzagLite/3 as zg

import Trendoscope/abstractchartpatterns/9 as p
import Trendoscope/basechartpatterns/8 as bp
import theEccentricTrader/PubLibSwing/3 as sw
import theEccentricTrader/PubLibPattern/4 as pa

import theEccentricTrader/PubLibSwing/3 as sw
import theEccentricTrader/PubLibPattern/4 as pa

indicator("Oluwaferanmi's Masterclass", "LoverTrade", overlay = true, max_lines_count=500, max_labels_count=500, max_polylines_count = 100, calc_bars_count = 5000)

openSource = input.source(open, '', inline='cs', group='Source', display = display.none)
highSource = input.source(high, '', inline='cs', group='Source', display = display.none)
lowSource = input.source(low, '', inline='cs', group='Source', display = display.none)
closeSource = input.source(close, '', inline='cs', group='Source', display = display.none, tooltip = 'Source on which the zigzag and pattern calculation is done')

useZigzag1 = input.bool(true, '', group = 'Zigzag', inline='z1', display = display.none)
zigzagLength1 = input.int(8, step=5, minval=1, title='', group='Zigzag', inline='z1', display=display.none)
depth1 = input.int(55, "", step=25, maxval=500, group='Zigzag', inline='z1', display=display.none, tooltip = 'Enable and set Length and Dept of Zigzag 1')

useZigzag2 = input.bool(false, '', group = 'Zigzag', inline='z2', display = display.none)
zigzagLength2 = input.int(13, step=5, minval=1, title='', group='Zigzag', inline='z2', display=display.none)
depth2 = input.int(34, "", step=25, maxval=500, group='Zigzag', inline='z2', display=display.none, tooltip = 'Enable and set Length and Dept of Zigzag 2')

useZigzag3 = input.bool(false, '', group = 'Zigzag', inline='z3', display = display.none)
zigzagLength3 = input.int(21, step=5, minval=1, title='', group='Zigzag', inline='z3', display=display.none)
depth3 = input.int(21, "", step=25, maxval=500, group='Zigzag', inline='z3', display=display.none, tooltip = 'Enable and set Length and Dept of Zigzag 3')

useZigzag4 = input.bool(false, '', group = 'Zigzag', inline='z4', display = display.none)
zigzagLength4 = input.int(34, step=5, minval=1, title='', group='Zigzag', inline='z4', display=display.none)
depth4 = input.int(13, "", step=25, maxval=500, group='Zigzag', inline='z4', display=display.none, tooltip = 'Enable and set Length and Dept of Zigzag 4')

numberOfPivots = input.int(5, "Number of Pivots", [5, 6], 'Number of pivots used for pattern identification.', group='Scanning', display = display.none)
errorThresold = input.float(20.0, 'Error Threshold', 0.0, 100, 5, 'Error Threshold for trend line validation', group='Scanning', display = display.none)
flatThreshold = input.float(20.0, 'Flat Threshold', 0.0, 30, 5, 'Ratio threshold to identify the slope of trend lines', group='Scanning', display = display.none)
lastPivotDirection = input.string('both', 'Last Pivot Direction', ['up', 'down', 'both', 'custom'], 'Filter pattern based on the last pivot direction. '+
                             'This option is useful while backtesting individual patterns. When custom is selected, then the individual pattern last pivot direction setting is used',
                             group='Scanning', display=display.none)
checkBarRatio = input.bool(true, 'Verify Bar Ratio ', 'Along with checking the price, also verify if the bars are proportionately placed.', group='Scanning', inline = 'br', display = display.none)
barRatioLimit = input.float(0.382, '', group='Scanning', display = display.none, inline='br')
avoidOverlap = input.bool(true, 'Avoid Overlap',  group='Scanning', inline='a', display = display.none)
repaint = input.bool(false, 'Repaint', 'Avoid Overlap - Will not consider the pattern if it starts before the end of an existing pattern\n\n'+
                     'Repaint - Uses real time bars to search for patterns. If unselected, then only use confirmed bars.', 
                     group='Scanning', inline='a', display = display.none)

allowChannels = input.bool(true, 'Channels', group='Pattern Groups - Geometric Shapes', display = display.none, inline='g')
allowWedges = input.bool(true, 'Wedge', group='Pattern Groups - Geometric Shapes', display = display.none, inline='g')
allowTriangles = input.bool(true, 'Triangle', group='Pattern Groups - Geometric Shapes', display = display.none, inline='g',
         tooltip = 'Channels - Trend Lines are parralel to each other creating equidistance price channels'+
                     '\n\t- Ascending Channel\n\t- Descending Channel\n\t- Ranging Channel'+
                     '\n\nWedges - Trend lines are either converging or diverging from each other and both the trend lines are moving in the same direction'+
                     '\n\t- Rising Wedge (Expanding)\n\t- Rising Wedge (Contracting)\n\t- Falling Wedge (Expanding)\n\t- Falling Wedge (Contracting)'+
                     '\n\nTriangles - Trend lines are either converging or diverging from each other and both trend lines are moving in different directions'+
                     '\n\t- Converging Triangle\n\t- Diverging Triangle\n\t- Ascending Triangle (Contracting)\n\t- Ascending Triangle (Expanding)\n\t- Descending Triangle(Contracting)\n\t- Descending Triangle(Expanding)')

allowRisingPatterns = input.bool(true, 'Rising', group='Pattern Groups - Direction', display = display.none, inline = 'd')
allowFallingPatterns = input.bool(true, 'Falling', group='Pattern Groups - Direction', display = display.none, inline = 'd')
allowNonDirectionalPatterns = input.bool(true, 'Flat/Bi-Directional', group='Pattern Groups - Direction', display = display.none, inline = 'd',
         tooltip = 'Rising - Either both trend lines are moving up or one trend line is flat and the other one is moving up.'+
                     '\n\t- Ascending Channel\n\t- Rising Wedge (Expanding)\n\t- Rising Wedge (Contracting)\n\t- Ascending Triangle (Expanding)\n\t- Ascending Triangle (Contracting)'+
                     '\n\nFalling - Either both trend lines are moving down or one trend line is flat and the other one is moving down.'+
                     '\n\t- Descending Channel\n\t- Falling Wedge (Expanding)\n\t- Falling Wedge (Contracting)\n\t- Descending Triangle (Expanding)\n\t- Descending Triangle (Contracting)'+
                     '\n\nFlat/Bi-Directional - Trend Lines move in different directions or both flat.'+
                     '\n\t- Ranging Channel\n\t- Converging Triangle\n\t- Diverging Triangle')

allowExpandingPatterns = input.bool(true, 'Expanding', group='Pattern Groups - Formation Dynamics', display = display.none, inline = 'f')
allowContractingPatterns = input.bool(true, 'Contracting', group='Pattern Groups - Formation Dynamics', display = display.none, inline='f')
allowParallelChannels = input.bool(true, 'Parallel', group = 'Pattern Groups - Formation Dynamics', display = display.none, inline = 'f',
         tooltip = 'Expanding - Trend Lines are diverging from each other.'+
                     '\n\t- Rising Wedge (Expanding)\n\t- Falling Wedge (Expanding)\n\t- Ascending Triangle (Expanding)\n\t- Descending Triangle (Expanding)\n\t- Diverging Triangle'+
                     '\n\nContracting - Trend Lines are converging towards each other.'+
                     '\n\t- Rising Wedge (Contracting)\n\t- Falling Wedge (Contracting)\n\t- Ascending Triangle (Contracting)\n\t- Descending Triangle (Contracting)\n\t- Converging Triangle'+
                     '\n\nParallel - Trend Lines are almost parallel to each other.'+
                     '\n\t- Ascending Channel\n\t- Descending Channel\n\t- Ranging Channel')

allowUptrendChannel = input.bool(true, 'Ascending  ', group = 'Price Channels', inline='uc', display = display.none)
upTrendChannelLastPivotDirection = input.string('both', '', ['up', 'down', 'both'], inline='uc', group='Price Channels', display = display.none,
             tooltip='Enable Ascending Channel and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowDowntrendChannel = input.bool(true, 'Descending', group = 'Price Channels', inline='dc', display = display.none)
downTrendChannelLastPivotDirection = input.string('both', '', ['up', 'down', 'both'], inline='dc', group='Price Channels', display = display.none,
             tooltip='Enable Descending Channel and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowRangingChannel = input.bool(true, 'Ranging   ', group = 'Price Channels', inline='rc', display = display.none)
rangingChannelLastPivotDirection = input.string('both', '', ['up', 'down', 'both'], inline='rc', group='Price Channels', display = display.none,
             tooltip='Enable Ranging Channel and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowRisingWedgeExpanding = input.bool(true, 'Rising    ', inline='rwe', group = 'Expanding Wedges', display = display.none)
risingWedgeExpandingLastPivotDirection = input.string('down', '', ['up', 'down', 'both'], inline='rwe', group='Expanding Wedges', display = display.none,
             tooltip='Enable Rising Wedge (Expanding) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowFallingWedgeExpanding = input.bool(true, 'Falling   ', inline='fwe', group = 'Expanding Wedges', display = display.none)
fallingWedgeExpandingLastPivotDirection = input.string('up', '', ['up', 'down', 'both'], inline='fwe', group='Expanding Wedges', display = display.none,
             tooltip='Enable Falling Wedge (Expanding) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowRisingWedgeContracting = input.bool(true, 'Rising    ', inline='rwc', group = 'Contracting Wedges', display = display.none)
risingWedgeContractingLastPivotDirection = input.string('down', '', ['up', 'down', 'both'], inline='rwc', group='Contracting Wedges', display = display.none,
             tooltip='Enable Rising Wedge (Contracting) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowFallingWedgeContracting = input.bool(true, 'Falling   ', inline='fwc', group = 'Contracting Wedges', display = display.none)
fallingWedgeContractingLastPivotDirection = input.string('up', '', ['up', 'down', 'both'], inline='fwc', group='Contracting Wedges', display = display.none,
             tooltip='Enable Falling Wedge (Contracting) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowRisingTriangleExpanding = input.bool(true, 'Ascending  ', inline='rte', group = 'Expanding Triangles', display = display.none)
risingTriangleExpandingLastPivotDirection = input.string('up', '', ['up', 'down', 'both'], inline='rte', group='Expanding Triangles', display = display.none,
             tooltip='Enable Ascending Triangle (Expanding) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowFallingTriangleExpanding = input.bool(true, 'Descending', inline='fte', group = 'Expanding Triangles', display = display.none)
fallingTriangleExpandingLastPivotDirection = input.string('down', '', ['up', 'down', 'both'], inline='fte', group='Expanding Triangles', display = display.none,
             tooltip='Enable Descending Triangle (Expanding) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowExpandingTriangle = input.bool(true, 'Diverging ', inline='dt', group = 'Expanding Triangles', display = display.none)
divergineTriangleLastPivotDirection = input.string('both', '', ['up', 'down', 'both'], inline='dt', group='Expanding Triangles', display = display.none,
             tooltip='Enable Diverging Triangle and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')


allowRisingTriangleConverging= input.bool(true, 'Ascending  ', inline='rtc', group = 'Contracting Triangles', display = display.none)
risingTriangleContractingLastPivotDirection = input.string('up', '', ['up', 'down', 'both'], inline='rtc', group='Contracting Triangles', display = display.none,
             tooltip='Enable Ascending Triangle (Contracting) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowFallingTriangleConverging = input.bool(true, 'Descending', inline='ftc', group = 'Contracting Triangles', display = display.none)
fallingTriangleContractingLastPivotDirection = input.string('down', '', ['up', 'down', 'both'], inline='ftc', group='Contracting Triangles', display = display.none,
             tooltip='Enable Descending Triangle (Contracting) and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowConvergingTriangle = input.bool(true, 'Converging ', inline='ct', group = 'Contracting Triangles', display = display.none)
convergingTriangleLastPivotDirection = input.string('both', '', ['up', 'down', 'both'], inline='ct', group='Contracting Triangles', display = display.none,
             tooltip='Enable Converging Triangle and select the last pivot direction filter. Last pivot direction will only be used if the Generic Last Pivot Direction parameter is set to Custom')

allowedPatterns = array.from(
     false,
     allowUptrendChannel and allowRisingPatterns and allowParallelChannels and allowChannels,
     allowDowntrendChannel and allowFallingPatterns and allowParallelChannels and allowChannels,
     allowRangingChannel and allowNonDirectionalPatterns and allowParallelChannels and allowChannels,
     allowRisingWedgeExpanding and allowRisingPatterns and allowExpandingPatterns and allowWedges,
     allowFallingWedgeExpanding and allowFallingPatterns and allowExpandingPatterns and allowWedges,
     allowExpandingTriangle and allowNonDirectionalPatterns and allowExpandingPatterns and allowTriangles,
     allowRisingTriangleExpanding and allowRisingPatterns and allowExpandingPatterns and allowTriangles,
     allowFallingTriangleExpanding and allowFallingPatterns and allowExpandingPatterns and allowTriangles,
     allowRisingWedgeContracting and allowRisingPatterns and allowContractingPatterns and allowWedges,
     allowFallingWedgeContracting and allowFallingPatterns and allowContractingPatterns and allowWedges,
     allowConvergingTriangle and allowNonDirectionalPatterns and allowContractingPatterns and allowTriangles,
     allowFallingTriangleConverging and allowFallingPatterns and allowContractingPatterns and allowTriangles,
     allowRisingTriangleConverging and allowRisingPatterns and allowContractingPatterns and allowTriangles
     )

getLastPivotDirectionInt(lastPivotDirection)=>lastPivotDirection == 'up'? 1 : lastPivotDirection == 'down'? -1 : 0
allowedLastPivotDirections = array.from( 
     0,
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(upTrendChannelLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(downTrendChannelLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(rangingChannelLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(risingWedgeExpandingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(fallingWedgeExpandingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(divergineTriangleLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(risingTriangleExpandingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(fallingTriangleExpandingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(risingWedgeContractingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(fallingWedgeContractingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(convergingTriangleLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(fallingTriangleContractingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection),
     lastPivotDirection == 'custom'? getLastPivotDirectionInt(risingTriangleContractingLastPivotDirection) : getLastPivotDirectionInt(lastPivotDirection)
     )

theme = input.enum(ut.Theme.DARK, title='Theme', group='Display', inline='pc',
         tooltip='Chart theme settings. Line and label colors are generted based on the theme settings. If dark theme is selected, '+
         'lighter colors are used and if light theme is selected, darker colors are used.\n\n'+
         'Pattern Line width - to be used for drawing pattern lines', display=display.none)
patternLineWidth = input.int(2, '', minval=1, inline='pc', group = 'Display', display = display.none)

useCustomColors = input.bool(false, 'Custom Colors', group='Display', display = display.none)
customColorsArray = array.from(
     input.color(color.rgb(251, 244, 109), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(141, 186, 81), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(74, 159, 245), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(255, 153, 140), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(255, 149, 0), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(0, 234, 211), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(167, 153, 183), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(255, 210, 113), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(119, 217, 112), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(95, 129, 228), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(235, 146, 190), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(198, 139, 89), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(200, 149, 149), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(196, 182, 182), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(255, 190, 15), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(192, 226, 24), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(153, 140, 235), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(206, 31, 107), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(251, 54, 64), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(194, 255, 217), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(255, 219, 197), '', '', inline='c1', group = 'Display', display = display.none),
     input.color(color.rgb(121, 180, 183), '', '', inline='c1', group = 'Display', display = display.none)
 )
showPatternLabel = input.bool(true, 'Pattern Label', inline='pl1', group = 'Display', display = display.none)
patternLabelSize = input.string(size.normal, '', [size.tiny, size.small, size.normal, size.large, size.huge], inline='pl1', group = 'Display', display = display.none,
                     tooltip = 'Option to display Pattern Label and select the size')

showPivotLabels = input.bool(true, 'Pivot Labels ', inline='pl2', group = 'Display', display = display.none, tooltip = 'Option to display pivot labels and select the size')
pivotLabelSize = input.string(size.normal, '', [size.tiny, size.small, size.normal, size.large, size.huge], inline='pl2', group = 'Display', display = display.none)

showZigzag = input.bool(true, 'Zigzag', inline='z', group = 'Display', display = display.none)
zigzagColor = input.color(color.blue, '', inline='z', group = 'Display', display = display.none, tooltip = 'Option to display zigzag within pattern and the default zigzag line color')

deleteOldPatterns = input.bool(true, 'Max Patterns', inline='do', group = 'Display', display = display.none)
maxPatterns = input.int(20, '', minval=1, step=5, inline = 'do', group = 'Display', display = display.none, tooltip = 'If selected, only last N patterns will be preserved on the chart.')

errorRatio = errorThresold/100
flatRatio = flatThreshold/100
showLabel = true
offset = 0

type Scanner
    bool enabled
    string ticker
    string timeframe
    p.ScanProperties sProperties
    p.DrawingProperties dProperties
    array<p.Pattern> patterns
    array<zg.Zigzag> zigzags

method getZigzagAndPattern(Scanner this, int length, int depth, array<o.OHLC> ohlcArray, int offset=0)=>
    var zg.Zigzag zigzag = zg.Zigzag.new(length, depth, 0)
    var map<int, int> lastDBar = map.new<int, int>()
    zigzag.calculate(array.from(highSource, lowSource))

    var validPatterns = 0
    mlzigzag = zigzag
    if(zigzag.flags.newPivot)
        while(mlzigzag.zigzagPivots.size() >= 6+offset)
            lastBar = mlzigzag.zigzagPivots.first().point.index
            lastDir = int(math.sign(mlzigzag.zigzagPivots.first().dir))
            if(lastDBar.contains(mlzigzag.level)? lastDBar.get(mlzigzag.level) < lastBar : true)
                lastDBar.put(mlzigzag.level, lastBar)
                [valid, currentPattern] = mlzigzag.find(this.sProperties, this.dProperties, this.patterns, ohlcArray)
                if(valid)
                    validPatterns+=1
                    currentPattern.draw()
                    this.patterns.push(currentPattern, maxPatterns)
                    alert('New Pattern Alert')
            else
                break
            mlzigzag := mlzigzag.nextlevel()
    true

method scan(Scanner this)=>
    var array<o.OHLC> ohlcArray = array.new<o.OHLC>()
    var array<p.Pattern> patterns = array.new<p.Pattern>()
    ohlcArray.push(o.OHLC.new(openSource, highSource, lowSource, closeSource))
    if(useZigzag1)
        this.getZigzagAndPattern(zigzagLength1, depth1, ohlcArray)
    if(useZigzag2)
        this.getZigzagAndPattern(zigzagLength2, depth2, ohlcArray)
    if(useZigzag3)
        this.getZigzagAndPattern(zigzagLength3, depth3, ohlcArray)
    if(useZigzag4)
        this.getZigzagAndPattern(zigzagLength4, depth4, ohlcArray)

var scanner = Scanner.new(true, "", "", 
             p.ScanProperties.new(
                     offset, numberOfPivots, errorRatio, flatRatio, checkBarRatio, barRatioLimit, avoidOverlap, 
                     allowedPatterns=allowedPatterns, allowedLastPivotDirections= allowedLastPivotDirections, themeColors = useCustomColors? customColorsArray : theme.getColors()),
             p.DrawingProperties.new(
                     patternLineWidth, showZigzag, 1, zigzagColor, showPatternLabel, patternLabelSize, 
                     showPivotLabels, pivotLabelSize, deleteOnPop = deleteOldPatterns),
             array.new<p.Pattern>())

if(barstate.isconfirmed or repaint)
    scanner.scan()


////////////////////
// PATTERN INPUTS //
////////////////////

bear_pattern_colour = input(color.red, 'Bearish Pattern Colour', group = 'Pattern Colours')
bull_pattern_colour = input(color.green, 'Bullish Pattern Colour', group = 'Pattern Colours')
neutral_pattern_colour = input(color.blue, 'Neutral Pattern Colour', group = 'Pattern Colours')
dot_colour = input(color.blue, 'Dotted Line Colour', group = 'Pattern Colours')
label_colour = input(color.blue, 'Label Colour', group = 'Pattern Colours')

show_asc_broadening = input(true, 'Show Asc. Broadening', group = 'Patterns')
show_broadening = input(true, 'Show Broadening', group = 'Patterns')
show_desc_broadening = input(true, 'Show Desc. Broadening', group = 'Patterns')
show_double_bot = input(true, 'Show Double Bottom', group = 'Patterns')
show_double_top = input(true, 'Show Double Top', group = 'Patterns')
show_triple_bot = input(true, 'Show Triple Bottom', group = 'Patterns')
show_triple_top = input(true, 'Show Triple Top', group = 'Patterns')
show_bear_elliot = input(true, 'Show Bear Elliot Wave', group = 'Patterns')
show_bull_elliot = input(true, 'Show Bull Elliot Wave', group = 'Patterns')
show_bear_alt_flag = input(true, 'Show Bear Alt. Flag', group = 'Patterns')
show_bull_alt_flag = input(true, 'Show Bull Alt. Flag', group = 'Patterns')
show_bear_flag = input(true, 'Show Bear Flag', group = 'Patterns')
show_bull_flag = input(true, 'Show Bull Flag', group = 'Patterns')
show_bear_asc_head_shoulders = input(true, 'Show Bear Asc. Head and Shoulders', group = 'Patterns')
show_bull_asc_head_shoulders = input(true, 'Show Bull Asc. Head and Shoulders', group = 'Patterns')
show_bear_desc_head_shoulders = input(true, 'Show Bear Desc. Head and Shoulders', group = 'Patterns')
show_bull_desc_head_shoulders = input(true, 'Show Bull Desc. Head and Shoulders', group = 'Patterns')
show_bear_head_shoulders = input(false, 'Show Bear Head and Shoulders', group = 'Patterns')
show_bull_head_shoulders = input(false, 'Show Bull Head and Shoulders', group = 'Patterns')
show_bear_pennant = input(true, 'Show Bear Pennant', group = 'Patterns')
show_bull_pennant = input(true, 'Show Bull Pennant', group = 'Patterns')
show_asc_wedge = input(true, 'Show Asc. Wedge', group = 'Patterns')
show_desc_wedge = input(true, 'Show Desc. Wedge', group = 'Patterns')
show_wedge = input(true, 'Show Wedge', group = 'Patterns')

ab_ratio = input(defval = 100, title = 'AB Minimum Ratio', group = 'Pattern Ratios')
bc_ratio = input(defval = 30, title = 'BC Maximum Ratio', group = 'Pattern Ratios')
be_ratio = input(defval = 40, title = 'BE Maximum Ratio', group = 'Pattern Ratios')

low_tol = input(defval = 10, title = 'Lower Tolerance (%)', group = 'Pattern Tolerances')
up_tol = input(defval = 10, title = 'Upper Tolerance (%)', group = 'Pattern Tolerances')

asc_broadening_alert = input(true, 'Asc. Broadening Alert', group = 'Alerts')
broadening_alert = input(true, 'Broadening Alert', group = 'Alerts')
desc_broadening_alert = input(true, 'Desc. Broadening Alert', group = 'Alerts')
double_bot_alert = input(true, 'Double Bot Alert', group = 'Alerts')
double_top_alert = input(true, 'Double Top Alert', group = 'Alerts')
triple_bot_alert = input(true, 'Triple Bot Alert', group = 'Alerts')
triple_top_alert = input(true, 'Triple Top Alert', group = 'Alerts')
bear_elliot_alert = input(true, 'Bear Elliot Wave Alert', group = 'Alerts')
bull_elliot_alert = input(true, 'Bull Elliot Wave Alert', group = 'Alerts')
bear_alt_flag_alert = input(true, 'Bear Alt. Flag Alert', group = 'Alerts')
bull_alt_flag_alert = input(true, 'Bull Alt. Flag Alert', group = 'Alerts')
bear_flag_alert = input(true, 'Bear Flag Alert', group = 'Alerts')
bull_flag_alert = input(true, 'Bull Flag Alert', group = 'Alerts')
bear_asc_head_shoulders_alert = input(true, 'Bear Asc. Head and Shoulders Alert', group = 'Alerts')
bull_asc_head_shoulders_alert = input(true, 'Bull Asc. Head and Shoulders Alert', group = 'Alerts')
bear_desc_head_shoulders_alert = input(true, 'Bear Desc. Head and Shoulders Alert', group = 'Alerts')
bull_desc_head_shoulders_alert = input(true, 'Bull Desc. Head and Shoulders Alert', group = 'Alerts')
bear_head_shoulders_alert = input(false, 'Bear Head and Shoulders Alert', group = 'Alerts')
bull_head_shoulders_alert = input(false, 'Bull Head and Shoulders Alert', group = 'Alerts')
bear_pennant_alert = input(true, 'Bear Pennant Alert', group = 'Alerts')
bull_pennant_alert = input(true, 'Bull Pennant Alert', group = 'Alerts')
asc_wedge_alert = input(true, 'Asc. Wedge Alert', group = 'Alerts')
desc_wedge_alert = input(true, 'Desc. Wedge Alert', group = 'Alerts')
wedge_alert = input(true, 'Wedge Alert', group = 'Alerts')

///////////////////////////
// CONDITIONAL VARIABLES //
///////////////////////////

sl = sw.sl()
sh = sw.sh()

shp_0 = sw.shp(0)
shpbi_0 = sw.shpbi(0)
shrr_0 = sw.shrr(0)

slp_0 = sw.slp(0)
slpbi_0 = sw.slpbi(0)
slrr_0 = sw.slrr(0)

shp_1 = sw.shp(1)
shpbi_1 = sw.shpbi(1)
shrr_1 = sw.shrr(1)

slp_1 = sw.slp(1)
slpbi_1 = sw.slpbi(1)
slrr_1 = sw.slrr(1)

shp_2 = sw.shp(2)
shpbi_2 = sw.shpbi(2)
shrr_2 = sw.shrr(2)

slp_2 = sw.slp(2)
slpbi_2 = sw.slpbi(2)
slrr_2 = sw.slrr(2)

shp_3 = sw.shp(3)
shpbi_3 = sw.shpbi(3)
shrr_3 = sw.shrr(3)

slp_3 = sw.slp(3)
slpbi_3 = sw.slpbi(3)
slrr_3 = sw.slrr(3)

asc_broadening = pa.asc_broadening()
broadening = pa.broadening()
desc_broadening = pa.desc_broadening()

double_bot = pa.double_bot(low_tol, up_tol)
double_top = pa.double_top(low_tol, up_tol)

triple_bot = pa.triple_bot(low_tol, up_tol)
triple_top = pa.triple_top(low_tol, up_tol)

bear_elliot = pa.bear_elliot()
bull_elliot = pa.bull_elliot()

bear_alt_flag = pa.bear_alt_flag(ab_ratio, bc_ratio)
bull_alt_flag = pa.bull_alt_flag(ab_ratio, bc_ratio)

bear_flag = pa.bear_flag(ab_ratio, bc_ratio, be_ratio)
bull_flag = pa.bull_flag(ab_ratio, bc_ratio, be_ratio)

bear_asc_head_shoulders = pa.bear_asc_head_shoulders()
bull_asc_head_shoulders = pa.bull_asc_head_shoulders()

bear_desc_head_shoulders = pa.bear_desc_head_shoulders()
bull_desc_head_shoulders = pa.bull_desc_head_shoulders()

bear_head_shoulders = pa.bear_head_shoulders()
bull_head_shoulders = pa.bull_head_shoulders()

bear_pennant = pa.bear_pennant(ab_ratio, bc_ratio)
bull_pennant = pa.bull_pennant(ab_ratio, bc_ratio)

asc_wedge = pa.asc_wedge()
desc_wedge = pa.desc_wedge()
wedge = pa.wedge()

//////////////////////////
// ASCENDING BROADENING //
//////////////////////////

var asc_broadening_line_1 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var asc_broadening_line_2 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var asc_broadening_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_none, text = 'ASC. BROADENING', textcolor = label_colour)

if sh and asc_broadening and barstate.isconfirmed
    if show_asc_broadening
        line.set_xy1(asc_broadening_line_1, slpbi_1, slp_1)
        line.set_xy2(asc_broadening_line_1, slpbi_0, slp_0)
        line.set_xy1(asc_broadening_line_2, shpbi_1, shp_1)
        line.set_xy2(asc_broadening_line_2, shpbi_0, shp_0)
        label.set_xy(asc_broadening_label_1, shpbi_0, shp_0)
        label.set_style(asc_broadening_label_1, label.style_label_down)
    if asc_broadening_alert
        alert('Asc. Broadening')

if sl and asc_broadening and barstate.isconfirmed
    if show_asc_broadening
        line.set_xy1(asc_broadening_line_1, slpbi_1, slp_1)
        line.set_xy2(asc_broadening_line_1, slpbi_0, slp_0)
        line.set_xy1(asc_broadening_line_2, shpbi_1, shp_1)
        line.set_xy2(asc_broadening_line_2, shpbi_0, shp_0)
        label.set_xy(asc_broadening_label_1, slpbi_0, slp_0)
        label.set_style(asc_broadening_label_1, label.style_label_up)
    if asc_broadening_alert
        alert('Asc. Broadening')

////////////////
// BROADENING //
////////////////

var broadening_line_1 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var broadening_line_2 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var broadening_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_none, text = 'BROADENING', textcolor = label_colour)

if sh and broadening and barstate.isconfirmed
    if show_broadening
        line.set_xy1(broadening_line_1, slpbi_1, slp_1)
        line.set_xy2(broadening_line_1, slpbi_0, slp_0)
        line.set_xy1(broadening_line_2, shpbi_1, shp_1)
        line.set_xy2(broadening_line_2, shpbi_0, shp_0)
        label.set_xy(broadening_label_1, shpbi_0, shp_0)
        label.set_style(broadening_label_1, label.style_label_down)
    if broadening_alert
        alert('Broadening')

if sl and broadening and barstate.isconfirmed
    if show_broadening
        line.set_xy1(broadening_line_1, slpbi_1, slp_1)
        line.set_xy2(broadening_line_1, slpbi_0, slp_0)
        line.set_xy1(broadening_line_2, shpbi_1, shp_1)
        line.set_xy2(broadening_line_2, shpbi_0, shp_0)
        label.set_xy(broadening_label_1, slpbi_0, slp_0)
        label.set_style(broadening_label_1, label.style_label_up)
    if broadening_alert
        alert('Broadening')

///////////////////////////
// DESCENDING BROADENING //
///////////////////////////

var desc_broadening_line_1 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var desc_broadening_line_2 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var desc_broadening_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_none, text = 'DESC. BROADENING', textcolor = label_colour)

if sh and desc_broadening and barstate.isconfirmed
    if show_desc_broadening
        line.set_xy1(desc_broadening_line_1, slpbi_1, slp_1)
        line.set_xy2(desc_broadening_line_1, slpbi_0, slp_0)
        line.set_xy1(desc_broadening_line_2, shpbi_1, shp_1)
        line.set_xy2(desc_broadening_line_2, shpbi_0, shp_0)
        label.set_xy(desc_broadening_label_1, shpbi_0, shp_0)
        label.set_style(desc_broadening_label_1, label.style_label_down)
    if desc_broadening_alert
        alert('Desc. Broadening')

if sl and desc_broadening and barstate.isconfirmed
    if show_desc_broadening
        line.set_xy1(desc_broadening_line_1, slpbi_1, slp_1)
        line.set_xy2(desc_broadening_line_1, slpbi_0, slp_0)
        line.set_xy1(desc_broadening_line_2, shpbi_1, shp_1)
        line.set_xy2(desc_broadening_line_2, shpbi_0, shp_0)
        label.set_xy(desc_broadening_label_1, slpbi_0, slp_0)
        label.set_style(desc_broadening_label_1, label.style_label_up)
    if desc_broadening_alert
        alert('Desc. Broadening')

///////////////////////
// DOUBLE BOTTOM/TOP //
///////////////////////

var double_bot_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var double_bot_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var double_bot_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var double_bot_line_4 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var double_bot_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'DOUBLE BOTTOM', textcolor = label_colour)

if sl and double_bot and barstate.isconfirmed
    if show_double_bot
        line.set_xy1(double_bot_line_1, slpbi_1, slp_1)
        line.set_xy2(double_bot_line_1, shpbi_0, shp_0)
        line.set_xy1(double_bot_line_2, shpbi_0, shp_0)
        line.set_xy2(double_bot_line_2, slpbi_0, slp_0)
        line.set_xy1(double_bot_line_3, slpbi_1, slp_1)
        line.set_xy2(double_bot_line_3, bar_index, slp_1)
        line.set_xy1(double_bot_line_4, shpbi_0, shp_0)
        line.set_xy2(double_bot_line_4, bar_index, shp_0)
        label.set_xy(double_bot_label_1, slpbi_0, slp_0)
    if double_bot_alert
        alert('Double Bottom')

var double_top_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var double_top_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var double_top_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var double_top_line_4 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var double_top_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'DOUBLE TOP', textcolor = label_colour)

if sh and double_top and barstate.isconfirmed
    if show_double_top
        line.set_xy1(double_top_line_1, shpbi_1, shp_1)
        line.set_xy2(double_top_line_1, slpbi_0, slp_0)
        line.set_xy1(double_top_line_2, slpbi_0, slp_0)
        line.set_xy2(double_top_line_2, shpbi_0, shp_0)
        line.set_xy1(double_top_line_3, shpbi_1, shp_1)
        line.set_xy2(double_top_line_3, bar_index, shp_1)
        line.set_xy1(double_top_line_4, slpbi_0, slp_0)
        line.set_xy2(double_top_line_4, bar_index, slp_0)
        label.set_xy(double_top_label_1, shpbi_0, shp_0)
    if double_top_alert
        alert('Double Top')

///////////////////////
// TRIPLE BOTTOM/TOP //
///////////////////////

var triple_bot_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var triple_bot_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var triple_bot_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var triple_bot_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var triple_bot_line_5 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var triple_bot_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var triple_bot_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'TRIPLE BOTTOM', textcolor = label_colour)

if sl and triple_bot and barstate.isconfirmed
    if show_triple_bot
        line.set_xy1(triple_bot_line_1, slpbi_2, slp_2)
        line.set_xy2(triple_bot_line_1, shpbi_1, shp_1)
        line.set_xy1(triple_bot_line_2, shpbi_1, shp_1)
        line.set_xy2(triple_bot_line_2, slpbi_1, slp_1)
        line.set_xy1(triple_bot_line_3, slpbi_1, slp_1)
        line.set_xy2(triple_bot_line_3, shpbi_0, shp_0)
        line.set_xy1(triple_bot_line_4, shpbi_0, shp_0)
        line.set_xy2(triple_bot_line_4, slpbi_0, slp_0)
        line.set_xy1(triple_bot_line_5, slpbi_2, slp_2)
        line.set_xy2(triple_bot_line_5, bar_index, slp_2)
        line.set_xy1(triple_bot_line_6, shpbi_0, shp_0)
        line.set_xy2(triple_bot_line_6, bar_index, shp_0)
        label.set_xy(triple_bot_label_1, slpbi_0, slp_0)
    if triple_bot_alert
        alert('Triple Bottom')

var triple_top_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var triple_top_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var triple_top_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var triple_top_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var triple_top_line_5 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var triple_top_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var triple_top_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'TRIPLE TOP', textcolor = label_colour)

if sh and triple_top and barstate.isconfirmed
    if show_triple_top
        line.set_xy1(triple_top_line_1, shpbi_2, shp_2)
        line.set_xy2(triple_top_line_1, slpbi_1, slp_1)
        line.set_xy1(triple_top_line_2, slpbi_1, slp_1)
        line.set_xy2(triple_top_line_2, shpbi_1, shp_1)
        line.set_xy1(triple_top_line_3, shpbi_1, shp_1)
        line.set_xy2(triple_top_line_3, slpbi_0, slp_0)
        line.set_xy1(triple_top_line_4, slpbi_0, slp_0)
        line.set_xy2(triple_top_line_4, shpbi_0, shp_0)
        line.set_xy1(triple_top_line_5, shpbi_2, shp_2)
        line.set_xy2(triple_top_line_5, bar_index, shp_2)
        line.set_xy1(triple_top_line_6, slpbi_0, slp_0)
        line.set_xy2(triple_top_line_6, bar_index, slp_0)
        label.set_xy(triple_top_label_1, shpbi_0, shp_0)
    if triple_top_alert
        alert('Triple Top')

/////////////////
// ELLIOT WAVE //
/////////////////

var bear_elliot_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_elliot_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_elliot_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_elliot_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_elliot_line_5 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_elliot_line_6 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_elliot_line_7 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_elliot_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_elliot_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_elliot_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_elliot_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_elliot_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_elliot_label_6 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_elliot_label_7 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_elliot and barstate.isconfirmed
    if show_bear_elliot
        line.set_xy1(bear_elliot_line_1, slpbi_3, slp_3)
        line.set_xy2(bear_elliot_line_1, shpbi_3, shp_3)
        line.set_xy1(bear_elliot_line_2, shpbi_3, shp_3)
        line.set_xy2(bear_elliot_line_2, slpbi_2, slp_2)
        line.set_xy1(bear_elliot_line_3, slpbi_2, slp_2)
        line.set_xy2(bear_elliot_line_3, shpbi_2, shp_2)
        line.set_xy1(bear_elliot_line_4, shpbi_2, shp_2)
        line.set_xy2(bear_elliot_line_4, slpbi_1, slp_1)
        line.set_xy1(bear_elliot_line_5, slpbi_1, slp_1)
        line.set_xy2(bear_elliot_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_elliot_line_6, shpbi_1, shp_1)
        line.set_xy2(bear_elliot_line_6, slpbi_0, slp_0)
        line.set_xy1(bear_elliot_line_7, slpbi_0, slp_0)
        line.set_xy2(bear_elliot_line_7, shpbi_0, shp_0)
        label.set_xy(bear_elliot_label_1, shpbi_3, shp_3)
        label.set_xy(bear_elliot_label_2, slpbi_2, slp_2)
        label.set_xy(bear_elliot_label_3, shpbi_2, shp_2)
        label.set_xy(bear_elliot_label_4, slpbi_1, slp_1)
        label.set_xy(bear_elliot_label_5, shpbi_1, shp_1)
        label.set_xy(bear_elliot_label_6, slpbi_0, slp_0)
        label.set_xy(bear_elliot_label_7, shpbi_0, shp_0)
        label.set_text(bear_elliot_label_1, '1 (' + str.tostring(math.round(shrr_3, 2)) + ')')
        label.set_text(bear_elliot_label_2, '2 (' + str.tostring(math.round(slrr_2, 2)) + ')')
        label.set_text(bear_elliot_label_3, '3 (' + str.tostring(math.round(shrr_2, 2)) + ')')
        label.set_text(bear_elliot_label_4, '4 (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bear_elliot_label_5, '5 (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_elliot_label_6, 'A (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_elliot_label_7, 'BEAR ELLIOT WAVE\nB (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_elliot_alert
        alert('Bearish Elliot Wave')

var bull_elliot_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_elliot_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_elliot_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_elliot_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_elliot_line_5 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_elliot_line_6 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_elliot_line_7 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_elliot_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_elliot_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_elliot_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_elliot_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_elliot_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_elliot_label_6 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_elliot_label_7 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_elliot and barstate.isconfirmed
    if show_bull_elliot
        line.set_xy1(bull_elliot_line_1, shpbi_3, shp_3)
        line.set_xy2(bull_elliot_line_1, slpbi_3, slp_3)
        line.set_xy1(bull_elliot_line_2, slpbi_3, slp_3)
        line.set_xy2(bull_elliot_line_2, shpbi_2, shp_2)
        line.set_xy1(bull_elliot_line_3, shpbi_2, shp_2)
        line.set_xy2(bull_elliot_line_3, slpbi_2, slp_2)
        line.set_xy1(bull_elliot_line_4, slpbi_2, slp_2)
        line.set_xy2(bull_elliot_line_4, shpbi_1, shp_1)
        line.set_xy1(bull_elliot_line_5, shpbi_1, shp_1)
        line.set_xy2(bull_elliot_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_elliot_line_6, slpbi_1, slp_1)
        line.set_xy2(bull_elliot_line_6, shpbi_0, shp_0)
        line.set_xy1(bull_elliot_line_7, shpbi_0, shp_0)
        line.set_xy2(bull_elliot_line_7, slpbi_0, slp_0)
        label.set_xy(bull_elliot_label_1, slpbi_3, slp_3)
        label.set_xy(bull_elliot_label_2, shpbi_2, shp_2)
        label.set_xy(bull_elliot_label_3, slpbi_2, slp_2)
        label.set_xy(bull_elliot_label_4, shpbi_1, shp_1)
        label.set_xy(bull_elliot_label_5, slpbi_1, slp_1)
        label.set_xy(bull_elliot_label_6, shpbi_0, shp_0)
        label.set_xy(bull_elliot_label_7, slpbi_0, slp_0)
        label.set_text(bull_elliot_label_1, '1 (' + str.tostring(math.round(slrr_3, 2)) + ')')
        label.set_text(bull_elliot_label_2, '2 (' + str.tostring(math.round(shrr_2, 2)) + ')')
        label.set_text(bull_elliot_label_3, '3 (' + str.tostring(math.round(slrr_2, 2)) + ')')
        label.set_text(bull_elliot_label_4, '4 (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bull_elliot_label_5, '5 (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_elliot_label_6, 'A (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_elliot_label_7, 'BULL ELLIOT WAVE\nB (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_elliot_alert
        alert('Bullish Elliot Wave')

////////////////////
// ALTERNATE FLAG //
////////////////////

var bear_alt_flag_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_alt_flag_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_alt_flag_line_3 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_alt_flag_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bear_alt_flag_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_alt_flag_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_alt_flag and barstate.isconfirmed
    if show_bear_alt_flag
        line.set_xy1(bear_alt_flag_line_1, shpbi_1, shp_1)
        line.set_xy2(bear_alt_flag_line_1, slpbi_0, slp_0)
        line.set_xy1(bear_alt_flag_line_2, slpbi_0, slp_0)
        line.set_xy2(bear_alt_flag_line_2, shpbi_0, shp_0)
        line.set_xy1(bear_alt_flag_line_3, shpbi_0, shp_0)
        line.set_xy2(bear_alt_flag_line_3, shpbi_0 - 1, shp_0)
        label.set_xy(bear_alt_flag_label_1, shpbi_1, shp_1)
        label.set_xy(bear_alt_flag_label_2, slpbi_0, slp_0)
        label.set_xy(bear_alt_flag_label_3, shpbi_0, shp_0)
        label.set_text(bear_alt_flag_label_2, 'B (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_alt_flag_label_3, 'BEAR ALT. FLAG\nC (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_alt_flag_alert
        alert('Bearish Alt. Flag')

var bull_alt_flag_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_alt_flag_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_alt_flag_line_3 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_alt_flag_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bull_alt_flag_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_alt_flag_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_alt_flag and barstate.isconfirmed
    if show_bull_alt_flag
        line.set_xy1(bull_alt_flag_line_1, slpbi_1, slp_1)
        line.set_xy2(bull_alt_flag_line_1, shpbi_0, shp_0)
        line.set_xy1(bull_alt_flag_line_2, shpbi_0, shp_0)
        line.set_xy2(bull_alt_flag_line_2, slpbi_0, slp_0)
        line.set_xy1(bull_alt_flag_line_3, slpbi_0, slp_0)
        line.set_xy2(bull_alt_flag_line_3, slpbi_0 - 1, slp_0)
        label.set_xy(bull_alt_flag_label_1, slpbi_1, slp_1)
        label.set_xy(bull_alt_flag_label_2, shpbi_0, shp_0)
        label.set_xy(bull_alt_flag_label_3, slpbi_0, slp_0)
        label.set_text(bull_alt_flag_label_2, 'B (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_alt_flag_label_3, 'BULL ALT. FLAG\nC (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_alt_flag_alert
        alert('Bullish Alt. Flag')

//////////
// FLAG //
//////////

var bear_flag_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_flag_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_flag_line_3 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_flag_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bear_flag_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_flag_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_flag_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_flag_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_flag and barstate.isconfirmed
    if show_bear_flag
        berr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_flag_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_flag_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_flag_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_flag_line_2, slpbi_0, slp_0)
        line.set_xy1(bear_flag_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_flag_line_3, shpbi_0, shp_0)
        label.set_xy(bear_flag_label_1, shpbi_2, shp_2)
        label.set_xy(bear_flag_label_2, slpbi_1, slp_1)
        label.set_xy(bear_flag_label_3, shpbi_1, shp_1)
        label.set_xy(bear_flag_label_4, slpbi_0, slp_0)
        label.set_xy(bear_flag_label_5, shpbi_0, shp_0)
        label.set_text(bear_flag_label_2, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bear_flag_label_3, 'C (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_flag_label_4, 'D (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_flag_label_5, 'BEAR FLAG\nE (' + str.tostring(math.round(berr, 2)) + ')')
    if bear_flag_alert
        alert('Bearish Flag')

var bull_flag_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_flag_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_flag_line_3 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_flag_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bull_flag_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_flag_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_flag_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_flag_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_flag and barstate.isconfirmed
    if show_bull_flag
        berr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_flag_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_flag_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_flag_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_flag_line_2, shpbi_0, shp_0)
        line.set_xy1(bull_flag_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_flag_line_3, slpbi_0, slp_0)
        label.set_xy(bull_flag_label_1, slpbi_2, slp_2)
        label.set_xy(bull_flag_label_2, shpbi_1, shp_1)
        label.set_xy(bull_flag_label_3, slpbi_1, slp_1)
        label.set_xy(bull_flag_label_4, shpbi_0, shp_0)
        label.set_xy(bull_flag_label_5, slpbi_0, slp_0)
        label.set_text(bull_flag_label_2, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bull_flag_label_3, 'C (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_flag_label_4, 'D (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_flag_label_5, 'BULL FLAG\nE (' + str.tostring(math.round(berr, 2)) + ')')
    if bull_flag_alert
        alert('Bullish Flag')

//////////////////////////////////
// ASCENDING HEAD AND SHOULDERS //
//////////////////////////////////

var bear_asc_head_shoulders_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_asc_head_shoulders_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_asc_head_shoulders_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_asc_head_shoulders_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_asc_head_shoulders_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_asc_head_shoulders_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_asc_head_shoulders_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'BEAR ASC. HEAD AND SHOULDERS', textcolor = label_colour)

if sh and bear_asc_head_shoulders and barstate.isconfirmed
    if show_bear_asc_head_shoulders
        line.set_xy1(bear_asc_head_shoulders_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_asc_head_shoulders_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_asc_head_shoulders_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_asc_head_shoulders_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_asc_head_shoulders_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_asc_head_shoulders_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_asc_head_shoulders_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_asc_head_shoulders_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_asc_head_shoulders_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_asc_head_shoulders_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_asc_head_shoulders_line_6, shpbi_1, shp_1)
        line.set_xy2(bear_asc_head_shoulders_line_6, shpbi_0, shp_0)
        label.set_xy(bear_asc_head_shoulders_label_1, shpbi_1, shp_1)
    if bear_asc_head_shoulders_alert
        alert('Bearish Asc. Head and Shoulders')

var bull_asc_head_shoulders_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_asc_head_shoulders_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_asc_head_shoulders_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_asc_head_shoulders_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_asc_head_shoulders_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_asc_head_shoulders_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_asc_head_shoulders_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'BULL ASC. HEAD AND SHOULDERS', textcolor = label_colour)

if sl and bull_asc_head_shoulders and barstate.isconfirmed
    if show_bull_asc_head_shoulders
        line.set_xy1(bull_asc_head_shoulders_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_asc_head_shoulders_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_asc_head_shoulders_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_asc_head_shoulders_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_asc_head_shoulders_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_asc_head_shoulders_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_asc_head_shoulders_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_asc_head_shoulders_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_asc_head_shoulders_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_asc_head_shoulders_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_asc_head_shoulders_line_6, slpbi_1, slp_1)
        line.set_xy2(bull_asc_head_shoulders_line_6, slpbi_0, slp_0)
        label.set_xy(bull_asc_head_shoulders_label_1, slpbi_1, slp_1)
    if bull_asc_head_shoulders_alert
        alert('Bullish Asc. Head and Shoulders')

///////////////////////////////////
// DESCENDING HEAD AND SHOULDERS //
///////////////////////////////////

var bear_desc_head_shoulders_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_desc_head_shoulders_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_desc_head_shoulders_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_desc_head_shoulders_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_desc_head_shoulders_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_desc_head_shoulders_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_desc_head_shoulders_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'BEAR DESC. HEAD AND SHOULDERS', textcolor = label_colour)

if sh and bear_desc_head_shoulders and barstate.isconfirmed
    if show_bear_desc_head_shoulders
        line.set_xy1(bear_desc_head_shoulders_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_desc_head_shoulders_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_desc_head_shoulders_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_desc_head_shoulders_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_desc_head_shoulders_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_desc_head_shoulders_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_desc_head_shoulders_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_desc_head_shoulders_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_desc_head_shoulders_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_desc_head_shoulders_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_desc_head_shoulders_line_6, shpbi_1, shp_1)
        line.set_xy2(bear_desc_head_shoulders_line_6, shpbi_0, shp_0)
        label.set_xy(bear_desc_head_shoulders_label_1, shpbi_1, shp_1)
    if bear_desc_head_shoulders_alert
        alert('Bearish Desc. Head and Shoulders')

var bull_desc_head_shoulders_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_desc_head_shoulders_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_desc_head_shoulders_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_desc_head_shoulders_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_desc_head_shoulders_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_desc_head_shoulders_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_desc_head_shoulders_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'BULL DESC. HEAD AND SHOULDERS', textcolor = label_colour)

if sl and bull_desc_head_shoulders and barstate.isconfirmed
    if show_bull_desc_head_shoulders
        line.set_xy1(bull_desc_head_shoulders_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_desc_head_shoulders_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_desc_head_shoulders_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_desc_head_shoulders_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_desc_head_shoulders_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_desc_head_shoulders_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_desc_head_shoulders_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_desc_head_shoulders_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_desc_head_shoulders_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_desc_head_shoulders_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_desc_head_shoulders_line_6, slpbi_1, slp_1)
        line.set_xy2(bull_desc_head_shoulders_line_6, slpbi_0, slp_0)
        label.set_xy(bull_desc_head_shoulders_label_1, slpbi_1, slp_1)
    if bull_desc_head_shoulders_alert
        alert('Bullish Desc. Head and Shoulders')

////////////////////////
// HEAD AND SHOULDERS //
////////////////////////

var bear_head_shoulders_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_head_shoulders_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_head_shoulders_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_head_shoulders_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_head_shoulders_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_head_shoulders_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_head_shoulders_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'BEAR HEAD AND SHOULDERS', textcolor = label_colour)

if sh and bear_head_shoulders and barstate.isconfirmed
    if show_bear_head_shoulders
        line.set_xy1(bear_head_shoulders_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_head_shoulders_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_head_shoulders_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_head_shoulders_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_head_shoulders_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_head_shoulders_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_head_shoulders_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_head_shoulders_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_head_shoulders_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_head_shoulders_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_head_shoulders_line_6, shpbi_1, shp_1)
        line.set_xy2(bear_head_shoulders_line_6, shpbi_0, shp_0)
        label.set_xy(bear_head_shoulders_label_1, shpbi_1, shp_1)
    if bear_head_shoulders_alert
        alert('Bearish Head and Shoulders')

var bull_head_shoulders_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_head_shoulders_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_head_shoulders_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_head_shoulders_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_head_shoulders_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_head_shoulders_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_head_shoulders_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'BULL HEAD AND SHOULDERS', textcolor = label_colour)

if sl and bull_head_shoulders and barstate.isconfirmed
    if show_bull_head_shoulders
        line.set_xy1(bull_head_shoulders_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_head_shoulders_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_head_shoulders_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_head_shoulders_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_head_shoulders_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_head_shoulders_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_head_shoulders_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_head_shoulders_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_head_shoulders_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_head_shoulders_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_head_shoulders_line_6, slpbi_1, slp_1)
        line.set_xy2(bull_head_shoulders_line_6, slpbi_0, slp_0)
        label.set_xy(bull_head_shoulders_label_1, slpbi_1, slp_1)
    if bull_head_shoulders_alert
        alert('Bullish Head and Shoulders')

/////////////
// PENNANT //
/////////////

var bear_pennant_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_pennant_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_pennant_line_3 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_pennant_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bear_pennant_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_pennant_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_pennant_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_pennant_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_pennant and barstate.isconfirmed
    if show_bear_pennant
        line.set_xy1(bear_pennant_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_pennant_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_pennant_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_pennant_line_2, slpbi_0, slp_0)
        line.set_xy1(bear_pennant_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_pennant_line_3, shpbi_0, shp_0)
        label.set_xy(bear_pennant_label_1, shpbi_2, shp_2)
        label.set_xy(bear_pennant_label_2, slpbi_1, slp_1)
        label.set_xy(bear_pennant_label_3, shpbi_1, shp_1)
        label.set_xy(bear_pennant_label_4, slpbi_0, slp_0)
        label.set_xy(bear_pennant_label_5, shpbi_0, shp_0)
        label.set_text(bear_pennant_label_2, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bear_pennant_label_3, 'C (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_pennant_label_4, 'D (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_pennant_label_5, 'BEAR PENNANT\nE (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_pennant_alert
        alert('Bearish Pennant')

var bull_pennant_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_pennant_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_pennant_line_3 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_pennant_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bull_pennant_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_pennant_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_pennant_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_pennant_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_pennant and barstate.isconfirmed
    if show_bull_pennant
        line.set_xy1(bull_pennant_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_pennant_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_pennant_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_pennant_line_2, shpbi_0, shp_0)
        line.set_xy1(bull_pennant_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_pennant_line_3, slpbi_0, slp_0)
        label.set_xy(bull_pennant_label_1, slpbi_2, slp_2)
        label.set_xy(bull_pennant_label_2, shpbi_1, shp_1)
        label.set_xy(bull_pennant_label_3, slpbi_1, slp_1)
        label.set_xy(bull_pennant_label_4, shpbi_0, shp_0)
        label.set_xy(bull_pennant_label_5, slpbi_0, slp_0)
        label.set_text(bull_pennant_label_2, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bull_pennant_label_3, 'C (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_pennant_label_4, 'D (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_pennant_label_5, 'BULL PENNANT\nE (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_pennant_alert
        alert('Bullish Pennant')

/////////////////////
// ASCENDING WEDGE //
/////////////////////

var asc_wedge_line_1 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var asc_wedge_line_2 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var asc_wedge_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_none, text = 'ASC. WEDGE', textcolor = label_colour)

if sh and asc_wedge and barstate.isconfirmed
    if show_asc_wedge
        line.set_xy1(asc_wedge_line_1, slpbi_1, slp_1)
        line.set_xy2(asc_wedge_line_1, slpbi_0, slp_0)
        line.set_xy1(asc_wedge_line_2, shpbi_1, shp_1)
        line.set_xy2(asc_wedge_line_2, shpbi_0, shp_0)
        label.set_xy(asc_wedge_label_1, shpbi_0, shp_0)
        label.set_style(asc_wedge_label_1, label.style_label_down)
    if asc_wedge_alert
        alert('Asc. Wedge')

if sl and asc_wedge and barstate.isconfirmed
    if show_asc_wedge
        line.set_xy1(asc_wedge_line_1, slpbi_1, slp_1)
        line.set_xy2(asc_wedge_line_1, slpbi_0, slp_0)
        line.set_xy1(asc_wedge_line_2, shpbi_1, shp_1)
        line.set_xy2(asc_wedge_line_2, shpbi_0, shp_0)
        label.set_xy(asc_wedge_label_1, slpbi_0, slp_0)
        label.set_style(asc_wedge_label_1, label.style_label_up)
    if asc_wedge_alert
        alert('Asc. Wedge')

///////////////////////
// DESCENDING WEDGE  //
///////////////////////

var desc_wedge_line_1 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var desc_wedge_line_2 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var desc_wedge_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_none, text = 'DESC. WEDGE', textcolor = label_colour)

if sh and desc_wedge and barstate.isconfirmed
    if show_desc_wedge
        line.set_xy1(desc_wedge_line_1, slpbi_1, slp_1)
        line.set_xy2(desc_wedge_line_1, slpbi_0, slp_0)
        line.set_xy1(desc_wedge_line_2, shpbi_1, shp_1)
        line.set_xy2(desc_wedge_line_2, shpbi_0, shp_0)
        label.set_xy(desc_wedge_label_1, shpbi_0, shp_0)
        label.set_style(desc_wedge_label_1, label.style_label_down)
    if desc_wedge_alert
        alert('Desc. Wedge')

if sl and desc_wedge and barstate.isconfirmed
    if show_desc_wedge
        line.set_xy1(desc_wedge_line_1, slpbi_1, slp_1)
        line.set_xy2(desc_wedge_line_1, slpbi_0, slp_0)
        line.set_xy1(desc_wedge_line_2, shpbi_1, shp_1)
        line.set_xy2(desc_wedge_line_2, shpbi_0, shp_0)
        label.set_xy(desc_wedge_label_1, slpbi_0, slp_0)
        label.set_style(desc_wedge_label_1, label.style_label_up)
    if desc_wedge_alert
        alert('Desc. Wedge')

///////////
// WEDGE //
///////////

var wedge_line_1 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var wedge_line_2 = line.new(na, na, na, na, color = neutral_pattern_colour, width = 2)
var wedge_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_none, text = 'WEDGE', textcolor = label_colour)

if sh and wedge and barstate.isconfirmed
    if show_wedge
        line.set_xy1(wedge_line_1, slpbi_1, slp_1)
        line.set_xy2(wedge_line_1, slpbi_0, slp_0)
        line.set_xy1(wedge_line_2, shpbi_1, shp_1)
        line.set_xy2(wedge_line_2, shpbi_0, shp_0)
        label.set_xy(wedge_label_1, shpbi_0, shp_0)
        label.set_style(wedge_label_1, label.style_label_down)
    if wedge_alert
        alert('Wedge')

if sl and wedge and barstate.isconfirmed
    if show_wedge
        line.set_xy1(wedge_line_1, slpbi_1, slp_1)
        line.set_xy2(wedge_line_1, slpbi_0, slp_0)
        line.set_xy1(wedge_line_2, shpbi_1, shp_1)
        line.set_xy2(wedge_line_2, shpbi_0, shp_0)
        label.set_xy(wedge_label_1, slpbi_0, slp_0)
        label.set_style(wedge_label_1, label.style_label_up)
    if wedge_alert
        alert('Wedge')


// Getting inputs
fast_length = input(title = "Fast Length", defval = 12)
slow_length = input(title = "Slow Length", defval = 26)
src = input(title = "Source", defval = close)
signal_length = input.int(title = "Signal Smoothing",  minval = 1, maxval = 50, defval = 9, display = display.data_window)
sma_source = input.string(title = "Oscillator MA Type",  defval = "EMA", options = ["SMA", "EMA"], display = display.data_window)
sma_signal = input.string(title = "Signal Line MA Type", defval = "EMA", options = ["SMA", "EMA"], display = display.data_window)
// Calculating
fast_ma = sma_source == "SMA" ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
slow_ma = sma_source == "SMA" ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal

alertcondition(hist[1] >= 0 and hist < 0, title = 'Rising to falling', message = 'The MACD histogram switched from a rising to falling state')
alertcondition(hist[1] <= 0 and hist > 0, title = 'Falling to rising', message = 'The MACD histogram switched from a falling to rising state')

hline(0, "Zero Line", color = color.new(#787B86, 50))
plot(hist, title = "Histogram", style = plot.style_columns, color = (hist >= 0 ? (hist[1] < hist ? #26A69A : #B2DFDB) : (hist[1] < hist ? #FFCDD2 : #FF5252)))
plot(macd,   title = "MACD",   color = #2962FF)
plot(signal, title = "Signal", color = #FF6D00)

var const string revision = "2.1"

//#region ======Consts======
string GROUP_MAIN = "Main"
string GROUP_TWEAKS = "Tweaks"
string GROUP_CUSTOM = "Custom"
string GROUP_DURATION = "How to present durations?"
string GROUP_BENNER = "Benner"
string GROUP_VISUAL = "Other Visuals"

var int DAYS_IN_WEEK = 7
var int MS_IN_DAY = 1000*60*60*24
var int BACKGROUND_TRANSPARENCY = 90

var string DIRECTION_BULL = "Bull"
var string DIRECTION_BEAR = "Bear"
var string DIRECTION_BOTH = "Both"
var string DIRECTION_NONE = "None"
var string CREST_PEAK = "Peak"
var string CREST_TROUGH = "Trough"
var string DIRECTION_CHANGE_PERCENTAGE = "Percentage"
var string DIRECTION_CHANGE_DURATION = "Duration"
var string DIRECTION_CHANGE_BOTH = "Both"
var string TIME_DURATION_DAYS = "Days"
var string TIME_DURATION_CANDLES = "Candles"
//#endregion

//#region ======Inputs======
var string revisionInput = input.string(defval = revision, options = [revision], title = "Version", tooltip = "Ignore it", group = GROUP_MAIN)
var float changeInDirectionPercentsInput = input.float(defval = 30, title = "Change in Direction, %", minval = 0.1, maxval = 100, tooltip = 'How many % has to happen for us to decide that the market has started moving up', group=GROUP_MAIN)

var string changeInDirectionModeInput = input.string(defval = DIRECTION_CHANGE_PERCENTAGE, options = [DIRECTION_CHANGE_PERCENTAGE, DIRECTION_CHANGE_DURATION, DIRECTION_CHANGE_BOTH], title = "Direction Change Mode", tooltip = "Should we identify directions by % change or duration?", group = GROUP_TWEAKS)
var string durationUnitsInput = input.string(defval = TIME_DURATION_DAYS, options = [TIME_DURATION_DAYS, TIME_DURATION_CANDLES], title = "Duration Units", tooltip = "You might want to use Days for higher TFs, and Candles for lower", group = GROUP_TWEAKS)
var bool useSeparatePercentageForBearChangeInput = input.bool(defval = false, title = "Use Separate Value for Bear Percentage Change", tooltip = 'Just in case if you think 20% up != 20% down', group = GROUP_TWEAKS)
var float changeInDirectionPercentsBearInput = input.float(defval = 30, title = "Change in Bear Direction, %", minval = 0.1, maxval = 100, tooltip = 'How many % has to happen for us to decide that the market has started moving down', group=GROUP_TWEAKS)
var int changeInDirectionUnitsInput = input.int(defval = 182, title = "Change in Direction, time", minval = 1, maxval = 365, tooltip = 'How many days has to happen without a new top/bottom for us to decide that the market has change direction', group=GROUP_TWEAKS)
var string enforceMinimumPeriodDurationModeInput = input.string(defval = DIRECTION_NONE, options = [DIRECTION_NONE, DIRECTION_BOTH, DIRECTION_BULL, DIRECTION_BEAR], title = "Enforce Minimum Period Duration For", tooltip = "Use this if you want to remove pull backs from the analysis", group = GROUP_TWEAKS)
var int minimumPeriodDurationUnitsInput = input.int(defval = 90, title = "Minimum Period Duration, time", minval = 1, maxval = 365, tooltip = 'The minimum duration in time units for each period', group=GROUP_TWEAKS)
var string firstPeriodDirectionInput = input.string(defval = DIRECTION_BULL, options = [DIRECTION_BULL, DIRECTION_BEAR], title = "First Period Direction", tooltip = "Likely you know which direction the first custom period went", group = GROUP_TWEAKS)
var bool showStagnationInput = input.bool(defval = false, title = "Show Stagnations", group = GROUP_TWEAKS)
var int stagnationUnitsInput = input.int(defval = 182, title = "Stagnation, time", minval = 0, maxval = 1000, tooltip = 'How many days has to happen without a new top/bottom for us to decide that the market is stagnating', group=GROUP_TWEAKS)
var bool showPredictionZoneInput = input.bool(defval = true, title = "Show Predictions Zone", group = GROUP_TWEAKS)
var bool calculatePercentileInput = input.bool(defval = true, title = "Calculate Percentile", tooltip = 'Use percentiles to remove fat tails. You need to have at least 3 full periods to be able to calculate perceniles.', group = GROUP_TWEAKS)
var int percentileInput = input.int(defval = 80, title = "Percentile", minval = 1, maxval = 99, group=GROUP_TWEAKS)
var bool showAggregatesInput = input.bool(defval = true, title = "Show Aggeragates Table", group = GROUP_TWEAKS)

var bool useCustomStartRangeInput = input.bool(defval = false, title = "Use Custom Start Date", tooltip = 'Just in case if you want to analyse only a subset of data', group = GROUP_CUSTOM)
var int rangeStartDateInput = input.time(defval = 0, title = "Range Start Date", tooltip = "Start of the analysis period", group = GROUP_CUSTOM)
var bool useCustomEndRangeInput = input.bool(defval = false, title = "Use Custom End Date", tooltip = 'Just in case if you want to analyse only a subset of data', group = GROUP_CUSTOM)
var int rangeEndDateInput = input.time(defval = 0, title = "Range End Exit", tooltip = "End of the analysis period", group = GROUP_CUSTOM)

var bool durationInYearsInput = input.bool(defval = true, title = "Years", group = GROUP_DURATION, inline = GROUP_DURATION)
var bool durationInMonthsInput = input.bool(defval = true, title = "Month", group = GROUP_DURATION, inline = GROUP_DURATION)
var bool durationInDaysInput = input.bool(defval = true, title = "Days", group = GROUP_DURATION, inline = GROUP_DURATION)
var bool durationInHoursInput = input.bool(defval = false, title = "Hours", group = GROUP_DURATION, inline = GROUP_DURATION)
var bool durationInMinutesInput = input.bool(defval = false, title = "Minutes", group = GROUP_DURATION, inline = GROUP_DURATION)
var bool durationInSecondsInput = input.bool(defval = false, title = "Seconds", group = GROUP_DURATION, inline = GROUP_DURATION)

var bool showBackgroundInput = input.bool(defval = true, title = "Show Background", group = GROUP_VISUAL)
var bool showLablesInput = input.bool(defval = true, title = "Show Lables", group = GROUP_VISUAL)
var bool showNewHighsLowsInput = input.bool(defval = false, title = "Show New Highs/Lows", group = GROUP_VISUAL)
var bool showReversalDetectionPointInput = input.bool(defval = true, title = "Show the point when the direction change was detected", group = GROUP_VISUAL)
//#endregion

//#region ======Types======
type crestType
    string crestCategory
    int crestTime
    int crestBar
    float price
    int durationMs
    float changePercentage
    line marker
    int totalStagnation = 0

type periodType
    string direction 
    float curHighPrice
    int curHighDate
    int curHighBar
    float curLowPrice
    int curLowDate
    int curLowBar
    int totalStagnation = 0

type iterationDataType
    string printText = ""
    string printYLocation = ""

    bool newHigh = false
    bool newLow = false
    bool displayLastCrest = false
    bool stagnationFinished = false
    int stagnationStart = na
    int stagnationEnd = na
    int stagnatioDurationMs = na
    float stagnationCrest = na
    float stagnationChangePercent = na

    float bennerCrest = na
    color bennerColor = na

type resultTableType
    string title
    string valueBull
    string valueBear

type calcVisualsType
    line finalLine = na
    linefill finalFill = na
    box predictionBox = na
    label predictionMean = na
    label predictionMedian = na
//#endregion

//#region ======Long term vars======
var array<crestType> crests = array.new<crestType>()

var periodType period = periodType.new()

var calcVisuals = calcVisualsType.new(
  finalLine = line.new(na, close, na, close + 1, xloc.bar_index, extend.both, color.gray),
  finalFill = linefill.new(na, na, na),
  predictionBox = box.new(left = na, top = na, right = na, bottom = na, border_color = na, border_width = 1, border_style = line.style_solid, extend = extend.none, xloc = xloc.bar_time, bgcolor = na),
  predictionMean = label.new(x = na, y = na, text = "X", xloc = xloc.bar_time, yloc = yloc.price, color = color(na), style = label.style_none, textcolor = na, size = size.normal, textalign = text.align_center),
  predictionMedian = label.new(x = na, y = na, text = "O", xloc = xloc.bar_time, yloc = yloc.price, color = color(na), style = label.style_none, textcolor = na, size = size.normal, textalign = text.align_center))

var bool usePercentageChange = changeInDirectionModeInput == DIRECTION_CHANGE_BOTH or changeInDirectionModeInput == DIRECTION_CHANGE_PERCENTAGE
var bool useDurationChange = changeInDirectionModeInput == DIRECTION_CHANGE_BOTH or changeInDirectionModeInput == DIRECTION_CHANGE_DURATION

var bool enforceMinimumDurationForBull = enforceMinimumPeriodDurationModeInput == DIRECTION_CHANGE_BOTH or enforceMinimumPeriodDurationModeInput == DIRECTION_BULL
var bool enforceMinimumDurationForBear = enforceMinimumPeriodDurationModeInput == DIRECTION_CHANGE_BOTH or enforceMinimumPeriodDurationModeInput == DIRECTION_BEAR
//#endregion

//#region ======Short term vars======
iterationDataType iterationData = iterationDataType.new()
//#endregion

//#region ======Functions======
addPrintText(txt, string yPosition = yloc.price) =>
    string newText = iterationData.printText
    if (newText != "")
        newText += "\n"
    newText += str.tostring(txt)
    iterationData.printText := newText
    iterationData.printYLocation := yPosition

print(bool display = true) =>
    if (iterationData.printText != "" and display)
        lbl = label.new(bar_index, high, iterationData.printText, xloc.bar_index, iterationData.printYLocation, color(na), label.style_none, color.gray, size.normal, text.align_left)

calculateDifferenceBetween(duration) =>
    yearsBetween = (duration) / (1000*60*60*24*360)
    monthsBetween = (yearsBetween - math.floor(yearsBetween)) * 12
    daysBetween = (monthsBetween - math.floor(monthsBetween)) * 30
    hoursBetween = (daysBetween - math.floor(daysBetween)) * 24
    minutesBetween = (hoursBetween - math.floor(hoursBetween)) * 60
    secondsBetween = (minutesBetween - math.floor(minutesBetween)) * 60
    [math.floor(yearsBetween), math.floor(monthsBetween), math.floor(daysBetween), math.floor(hoursBetween), math.floor(minutesBetween), math.floor(secondsBetween)]

calculateDifferenceInUnits(startTime, endTime, startBar, endBar) =>
    float result = durationUnitsInput == TIME_DURATION_DAYS ? math.round((endTime - startTime) / MS_IN_DAY) : endBar - startBar

calculateDifferenceInPercentage(start, end) =>
    math.abs(end * 100 / start - 100)

isInTimePeriod() =>
    bool afterBeginning = (useCustomStartRangeInput == false or time >= rangeStartDateInput)
    bool beforeEnd = (useCustomEndRangeInput == false or time <= rangeEndDateInput)
    afterBeginning and beforeEnd

formatDuration(duration) =>
    [yearsBetween, monthsBetween, daysBetween, hoursBetween, minutesBetween, secondsBetween] = calculateDifferenceBetween(duration)
    array<string> result = array.new_string(0)
    if durationInYearsInput
        result.push(str.tostring(yearsBetween) + "y")
    else 
        monthsBetween := monthsBetween + 12 * yearsBetween
    if durationInMonthsInput
        result.push(str.tostring(monthsBetween) + "m")
    else 
        daysBetween := daysBetween + 30 * monthsBetween
    if durationInDaysInput
        result.push(str.tostring(daysBetween) + "d")
    else 
        hoursBetween := hoursBetween + 24 * daysBetween
    if durationInHoursInput
        result.push(str.tostring(hoursBetween) + "h")
    else 
        minutesBetween := minutesBetween + 60 * hoursBetween
    if durationInMinutesInput
        result.push(str.tostring(minutesBetween) + "min")
    else 
        secondsBetween := secondsBetween + 60 * minutesBetween
    if durationInSecondsInput
        result.push(str.tostring(secondsBetween) + "sec")
 
    array.join(result, ", ")

addResultDurationsData(resultData, bullDurations, bearDurations, titlePrefix = "") =>
    resultData.push(resultTableType.new(title = titlePrefix + "Shortest", valueBull = str.tostring(formatDuration(array.min(bullDurations))), valueBear = str.tostring(formatDuration(array.min(bearDurations)))))
    resultData.push(resultTableType.new(title = titlePrefix + "Longest", valueBull = str.tostring(formatDuration(array.max(bullDurations))), valueBear = str.tostring(formatDuration(array.max(bearDurations)))))
    resultData.push(resultTableType.new(title = titlePrefix + "Median Duraion", valueBull = str.tostring(formatDuration(array.median(bullDurations))), valueBear = str.tostring(formatDuration(array.median(bearDurations)))))
    resultData.push(resultTableType.new(title = titlePrefix + " Mean Duraiton", valueBull = str.tostring(formatDuration(array.avg(bullDurations))), valueBear = str.tostring(formatDuration(array.avg(bearDurations)))))

addResultChangesData(resultData, bullChanges, bearChanges, titlePrefix = "") =>
    resultData.push(resultTableType.new(title = titlePrefix + "Smallest Change", valueBull = str.tostring(array.min(bullChanges), format.percent), valueBear = str.tostring(array.min(bearChanges), format.percent)))
    resultData.push(resultTableType.new(title = titlePrefix + "Biggest Change", valueBull = str.tostring(array.max(bullChanges), format.percent), valueBear = str.tostring(array.max(bearChanges), format.percent)))
    resultData.push(resultTableType.new(title = titlePrefix + "Median Change", valueBull = str.tostring(array.median(bullChanges), format.percent), valueBear = str.tostring(array.median(bearChanges), format.percent)))
    resultData.push(resultTableType.new(title = titlePrefix + "Mean Change", valueBull = str.tostring(array.avg(bullChanges), format.percent), valueBear = str.tostring(array.avg(bearChanges), format.percent)))

addResultData(resultData, bullChanges, bullDurations, bearChanges, bearDurations, titlePrefix = "") =>
    addResultDurationsData(resultData, bullDurations, bearDurations, titlePrefix)
    addResultChangesData(resultData, bullChanges, bearChanges, titlePrefix)

calculatePercentileItemsToRemove(arr) =>
    int itemsToRemove = 0
    int size = array.size(arr)
    if (size >= 3)
        float halfPsize = size * (1 - percentileInput / 100) / 2
        //we have to remove at least one item from each side. That's why we need at least 3 items in the original array.
        if (halfPsize < 1)
            halfPsize := 1
        itemsToRemove := math.floor(halfPsize)
    itemsToRemove

getPeriodColor() =>
    period.direction == DIRECTION_BEAR ? color.red : color.green
//#endregion

//#region ======Input check======
if useCustomStartRangeInput and useCustomEndRangeInput and rangeStartDateInput > rangeEndDateInput
    runtime.error("Range Start Date should be before Range End Date")

//#endregion

//#region ======Init======
//initialisation when:
//no custom date selected and this is the first bar
//or there is custom date and (we just entered this range or this is the first date and the range start is before the first date)
if (useCustomStartRangeInput == false and bar_index == 0) or (useCustomStartRangeInput == true and (time[1] < rangeStartDateInput and time >= rangeStartDateInput) or (bar_index == 0 and rangeStartDateInput < time))
    //we need the first crest calculate the distance to the next proper crest
    string firstCrestCategory = firstPeriodDirectionInput == DIRECTION_BULL ? CREST_TROUGH : CREST_PEAK
    crestType firstCrest = crestType.new(crestCategory = CREST_TROUGH, crestTime = time, crestBar = bar_index, price = low, durationMs = 0, changePercentage = 0)
    if showBackgroundInput
        line start = line.new(bar_index, close, bar_index, close + 1, xloc.bar_index, extend.both, color.gray)
        firstCrest.marker := start
    crests.push(firstCrest)
    period.direction := firstPeriodDirectionInput
    period.curHighPrice := high
    period.curHighDate := time
    period.curHighBar := bar_index
    period.curLowPrice := low
    period.curLowDate := time
    period.curLowBar := bar_index
//#endregion

//#region ======Main logic======
if (isInTimePeriod())
    crestType prevCrest = crests.last()

    int prevHighDate = period.curHighDate
    int prevHighBar = period.curHighBar
    int prevLowDate = period.curLowDate
    int prevLowBar = period.curLowBar
    if (high > period.curHighPrice)
        period.curHighPrice := high
        period.curHighDate := time
        period.curHighBar := bar_index
        iterationData.newHigh := true
    if (low < period.curLowPrice)
        period.curLowPrice := low
        period.curLowDate := time
        period.curLowBar := bar_index
        iterationData.newLow := true

    if period.direction == DIRECTION_BULL
        if iterationData.newHigh
            iterationData.stagnationCrest := period.curLowPrice
            period.curLowPrice := low
            period.curLowDate := time
            period.curLowBar := bar_index
            //we calculate stagnations even if we don't show them, for that reason we can't use showStagnationInput here
            if stagnationUnitsInput > 0 and calculateDifferenceInUnits(prevHighDate, time, prevHighBar, bar_index) >= stagnationUnitsInput
                iterationData.stagnationFinished := true
                iterationData.stagnationStart := prevHighDate
                iterationData.stagnationEnd := period.curHighDate
                iterationData.stagnationChangePercent := calculateDifferenceInPercentage(period.curHighPrice, iterationData.stagnationCrest) 
                iterationData.stagnatioDurationMs := iterationData.stagnationEnd - iterationData.stagnationStart
                period.totalStagnation += iterationData.stagnatioDurationMs
        
        //change in direction
        //we change if we get a new low that is % lower than the current high
        //and it can't happen on the same candle when we got a new high (it's possible if we are on a higher timeframe like monthly and the whole candle is bigger than % selected)  
        //or if it's been X days without new high
        //also we have to check that we've passed the minimum period duration
        float bearChangePercentage = useSeparatePercentageForBearChangeInput ? changeInDirectionPercentsBearInput : changeInDirectionPercentsInput
        if (
          (iterationData.newHigh == false and usePercentageChange == true and low < period.curHighPrice * (1 - bearChangePercentage/100)) 
          or (useDurationChange == true and calculateDifferenceInUnits(period.curHighDate, time, period.curHighBar, bar_index) >= changeInDirectionUnitsInput)
          )
          and
          (enforceMinimumDurationForBear == false or calculateDifferenceInUnits(period.curHighDate, period.curLowDate, period.curHighBar, period.curLowBar) >= minimumPeriodDurationUnitsInput)
            //add a new crest record
            
            int duration = period.curHighDate - prevCrest.crestTime
            float distance = calculateDifferenceInPercentage(prevCrest.price, period.curHighPrice)
            crestType newCrest = crestType.new(crestCategory = CREST_PEAK, crestTime = period.curHighDate, crestBar = bar_index, price = period.curHighPrice, durationMs = duration, changePercentage = distance, totalStagnation = period.totalStagnation)
            crests.push(newCrest)

            //display the last crest
            iterationData.displayLastCrest := true

            //reset the period value
            period.direction := DIRECTION_BEAR
            period.curHighPrice := high
            period.curHighDate := time
            period.curHighBar := bar_index
            period.totalStagnation := 0
            
    else // in bear now
        if iterationData.newLow
            iterationData.stagnationCrest := period.curHighPrice
            period.curHighPrice := high
            period.curHighDate := time
            period.curHighBar := bar_index
            //we calculate stagnations even if we don't show them, for that reason we can't use showStagnationInput here
            if stagnationUnitsInput > 0 and calculateDifferenceInUnits(prevLowDate, time, prevLowBar, bar_index) >= stagnationUnitsInput
                iterationData.stagnationFinished := true
                iterationData.stagnationStart := prevLowDate
                iterationData.stagnationEnd := period.curLowDate
                iterationData.stagnationChangePercent := calculateDifferenceInPercentage(period.curLowPrice, iterationData.stagnationCrest) 
                iterationData.stagnatioDurationMs := iterationData.stagnationEnd - iterationData.stagnationStart
                period.totalStagnation += iterationData.stagnatioDurationMs
        //change in direction
        //we change if we get a new high that is % higher than the current low
        //and it can't happen on the same candle when we got a new low (it's possible if we are on a higher timeframe like monthly and the whole candle is bigger than % selected)  
        //or if it's been X days without new low
        //also we have to check that we've passed the minimum period duration
        if (
          (iterationData.newLow == false and usePercentageChange == true and high > period.curLowPrice * (1 + changeInDirectionPercentsInput/100)) 
          or 
          (useDurationChange == true and calculateDifferenceInUnits(period.curLowDate, time, period.curLowBar, bar_index) >= changeInDirectionUnitsInput)
          )
          and
          (enforceMinimumDurationForBull == false or calculateDifferenceInUnits(period.curLowDate, period.curHighDate, period.curLowBar, period.curHighBar) >= minimumPeriodDurationUnitsInput)
            //add a new crest record
            int duration = period.curLowDate - prevCrest.crestTime
            float distance = calculateDifferenceInPercentage(prevCrest.price, period.curLowPrice)
            crestType newCrest = crestType.new(crestCategory = CREST_TROUGH, crestTime = period.curLowDate, crestBar = bar_index, price = period.curLowPrice, durationMs = duration, changePercentage = distance, totalStagnation = period.totalStagnation)
            crests.push(newCrest)

            //display the last crest
            iterationData.displayLastCrest := true

            //reset the period value
            period.direction := DIRECTION_BULL
            period.curLowPrice := low
            period.curLowDate := time
            period.curLowBar := bar_index
            period.totalStagnation := 0
//#endregion

//#region ======Visuals======
//show a new high was found
plotshape(showNewHighsLowsInput ? iterationData.newHigh : false, location = location.abovebar, style=shape.triangleup, color = color.green)

//show a new low was found
plotshape(showNewHighsLowsInput ? iterationData.newLow : false, location = location.belowbar, style=shape.triangledown, color = color.red)

if (iterationData.displayLastCrest)

    crestType lastCrest = crests.last()
    string yLoc = yloc.belowbar
    string lblStyle = label.style_label_up
    color lineColor = color.red
    if lastCrest.crestCategory == CREST_PEAK
        yLoc := yloc.abovebar
        lblStyle := label.style_label_down
        lineColor := color.green
    
    if showLablesInput
        string fromCrest = "n/a"
        //we need at least 3 crests to figure out the distance to the previous crest of the same direction
        if (array.size(crests) > 2)
            crestType lastSameDirectionCrest = crests.get(array.size(crests)-3)
            fromCrest := formatDuration(lastCrest.crestTime - lastSameDirectionCrest.crestTime)
        string crestTxt = str.format("Price: {0}\nChange: {1}\nDuration: {2}\nFrom Crest: {3}\nTotal Stagnation: {4}", 
          str.tostring(lastCrest.price, format.mintick), 
          str.tostring(lastCrest.changePercentage, format.percent), 
          formatDuration(lastCrest.durationMs),
          fromCrest,
          formatDuration(lastCrest.totalStagnation))
        label.new(lastCrest.crestTime, 0, crestTxt, xloc=xloc.bar_time, yloc=yLoc, color=color.new(lineColor, 30), style=lblStyle)

    //paint the area with appropriate color
    crestType lastButOneCrest = crests.get(array.size(crests)-2)
    if showBackgroundInput
        lastCrest.marker := line.new(lastCrest.crestTime, close, lastCrest.crestTime, close + 1, xloc.bar_time, extend.both, lineColor)
        linefill.new(lastCrest.marker, lastButOneCrest.marker, color.new(lineColor, BACKGROUND_TRANSPARENCY))

    
//show a new crest was found
plotshape(showReversalDetectionPointInput ? iterationData.displayLastCrest : false, location = location.belowbar, style=shape.diamond, color = color.fuchsia, size = size.tiny)

//show stagnation
if (showStagnationInput and iterationData.stagnationFinished)
    color lineColor = color.gray
    if showBackgroundInput
        line stagnationStartLine = line.new(iterationData.stagnationStart, close, iterationData.stagnationStart, close + 1, xloc.bar_time, extend.both, lineColor)
        line stagnationEndLine = line.new(iterationData.stagnationEnd, close, iterationData.stagnationEnd, close + 1, xloc.bar_time, extend.both, lineColor)
        linefill.new(stagnationStartLine, stagnationEndLine, color.new(lineColor, 80))
    if showLablesInput
        string stagTxt = str.format("Duration: {0}\nChange: {1}", 
          formatDuration(iterationData.stagnatioDurationMs),
          str.tostring(iterationData.stagnationChangePercent, format.percent))
        int stagPosition = iterationData.stagnationEnd - math.round((iterationData.stagnationEnd - iterationData.stagnationStart)/2)
        label.new(stagPosition, 0, stagTxt, xloc=xloc.bar_time, yloc=yloc.belowbar, color=color.new(lineColor, 30), style=label.style_label_center)
//#endregion


//#region ======Last Close======
if ((useCustomEndRangeInput == false) or (useCustomEndRangeInput == true and time >= rangeStartDateInput and time <= rangeEndDateInput)) and barstate.islast
    if showBackgroundInput
        color lineColor = getPeriodColor()
        crestType lastCrest = crests.last()
        line.set_x1(calcVisuals.finalLine, bar_index)
        line.set_x2(calcVisuals.finalLine, bar_index)
        //becase linefill is between lastcrest and the last line, and lastcrest might change any time - we have to delete the fill before refilling
        //it would be possible to make it faster by comparing the fill's fist line with the lastcrest and deleting only if they are different, but the speed is not too important in this setup, hence opting out for simplicity 
        linefill.delete(calcVisuals.finalFill)
        calcVisuals.finalFill := linefill.new(lastCrest.marker, calcVisuals.finalLine, color.new(lineColor, BACKGROUND_TRANSPARENCY))

    //the first element is a default fake crest, so we ignore it
    array<float> bullChanges = array.new_float(0)
    array<float> bearChanges = array.new_float(0)
    array<int> bullDurations = array.new_int(0)
    array<int> bearDurations = array.new_int(0)
    if array.size(crests) > 1
        for i = 1 to array.size(crests) - 1
            crestType curCrest = array.get(crests, i)
            if (curCrest.crestCategory == CREST_PEAK)
                bullChanges.push(curCrest.changePercentage)
                bullDurations.push(curCrest.durationMs)
            else
                bearChanges.push(curCrest.changePercentage)
                bearDurations.push(curCrest.durationMs)
    bullChanges.sort(order.ascending)
    bearChanges.sort(order.ascending)
    bullDurations.sort(order.ascending)
    bearDurations.sort(order.ascending)

    array<resultTableType> resultData = array.new<resultTableType>()
    resultData.push(resultTableType.new(title = "", valueBull = "Bull", valueBear = "Bear"))
    resultData.push(resultTableType.new(title = "Periods", valueBull = str.tostring(array.size(bullChanges)), valueBear = str.tostring(array.size(bearChanges))))
    addResultData(resultData, bullChanges, bullDurations, bearChanges, bearDurations)

    array<float> bullPercentileChanges = array.new_float(0)
    array<float> bearPercentileChanges = array.new_float(0)
    array<int> bullPercentileDurations = array.new_int(0)
    array<int> bearPercentileDurations = array.new_int(0)
    //we need at least 3 items for percentile
    if calculatePercentileInput
        int percentileItemsRemoveBull = calculatePercentileItemsToRemove(bullDurations)
        int percentileItemsRemoveBear = calculatePercentileItemsToRemove(bearDurations)
        string pPrefix = "P" + str.tostring(percentileInput) + " "
        if array.size(bullChanges) > 0
            bullPercentileChanges := array.slice(bullChanges, percentileItemsRemoveBull, array.size(bullChanges) - percentileItemsRemoveBull)
        if array.size(bearChanges) > 0
            bearPercentileChanges := array.slice(bearChanges, percentileItemsRemoveBear, array.size(bearChanges) - percentileItemsRemoveBear)
        if array.size(bullDurations) > 0
            bullPercentileDurations := array.slice(bullDurations, percentileItemsRemoveBull, array.size(bullDurations) - percentileItemsRemoveBull)
        if array.size(bearDurations) > 0    
            bearPercentileDurations := array.slice(bearDurations, percentileItemsRemoveBear, array.size(bearDurations) - percentileItemsRemoveBear)
        resultData.push(resultTableType.new(title = pPrefix + "Duration Periods", valueBull = str.tostring(array.size(bullDurations) - 2 * percentileItemsRemoveBull), valueBear = str.tostring(array.size(bearDurations) - 2 * percentileItemsRemoveBear)))
        addResultData(resultData, bullPercentileChanges, bullPercentileDurations, bearPercentileChanges, bearPercentileDurations, pPrefix)
    table results = table.new(position.top_right, 3, array.size(resultData), frame_width = 1, frame_color = color.black, border_color = color.black, border_width = 1, bgcolor = color.white)

    if showAggregatesInput
        for [i, row] in resultData
            table.cell(results, 0, i, text = row.title, text_halign = text.align_right)
            table.cell(results, 1, i, text = row.valueBull, text_halign = text.align_left)
            table.cell(results, 2, i, text = row.valueBear, text_halign = text.align_left)

    if showPredictionZoneInput
        color boxColor = getPeriodColor()
        crestType lastCrest = crests.last()
        array<float> changesArr = array.new_float(0)
        array<int> durationsArr = array.new_int(0)
        int directionSign = period.direction == DIRECTION_BULL ? 1 : -1
        if period.direction == DIRECTION_BULL 
            if calculatePercentileInput == true
                durationsArr := bullPercentileDurations
                changesArr := bullPercentileChanges
            else //
                durationsArr := bullDurations
                changesArr := bullChanges
        else //bear
            if calculatePercentileInput == true
                durationsArr := bearPercentileDurations
                changesArr := bearPercentileChanges
            else //
                durationsArr := bearDurations
                changesArr := bearChanges

        int predictionLeft = lastCrest.crestTime + array.min(durationsArr)
        int predictionRight = lastCrest.crestTime + array.max(durationsArr)
        float predictionBottom = lastCrest.price * (1 + directionSign * array.min(changesArr) / 100)
        float predictionTop = lastCrest.price * (1 + directionSign * array.max(changesArr) / 100)
        int predictionMeanX = lastCrest.crestTime + array.avg(durationsArr)
        int predictionMedianX = lastCrest.crestTime + array.median(durationsArr)
        float predictionMeanY = lastCrest.price * (1 + directionSign * array.avg(changesArr) / 100)
        float predictionMedianY = lastCrest.price * (1 + directionSign * array.median(changesArr) / 100)
        box.set_lefttop(calcVisuals.predictionBox, left = predictionLeft, top = predictionTop)
        box.set_rightbottom(calcVisuals.predictionBox, right = predictionRight, bottom = predictionBottom)
        box.set_bgcolor(calcVisuals.predictionBox, color.new(boxColor, BACKGROUND_TRANSPARENCY))
        box.set_border_color(calcVisuals.predictionBox, boxColor)
        label.set_xy(calcVisuals.predictionMean, x = predictionMeanX, y = predictionMeanY)
        label.set_textcolor(calcVisuals.predictionMean, boxColor)
        label.set_xy(calcVisuals.predictionMedian, x = predictionMedianX, y = predictionMedianY)
        label.set_textcolor(calcVisuals.predictionMedian, boxColor)
//#endregion

//#region ======Iteration Close======
print()
//#endregion





////////////////////
// PATTERN INPUTS //
////////////////////

bear_pattern_colour = input(color.red, 'Bearish Pattern Colour', group = 'Pattern Colours')
bull_pattern_colour = input(color.green, 'Bullish Pattern Colour', group = 'Pattern Colours')
neutral_pattern_colour = input(color.blue, 'Neutral Pattern Colour', group = 'Pattern Colours')
dot_colour = input(color.blue, 'Dotted Line Colour', group = 'Pattern Colours')
label_colour = input(color.blue, 'Label Colour', group = 'Pattern Colours')

show_bear_5_0 = input(true, 'Show Bear 5-0', group = 'Patterns')
show_bull_5_0 = input(true, 'Show Bull 5-0', group = 'Patterns')
show_bear_abcd = input(true, 'Show Bear ABCD', group = 'Patterns')
show_bull_abcd = input(true, 'Show Bull ABCD', group = 'Patterns')
show_bear_alt_bat = input(true, 'Show Bear Alt. Bat', group = 'Patterns')
show_bull_alt_bat = input(true, 'Show Bull Alt. Bat', group = 'Patterns')
show_bear_bat = input(true, 'Show Bear Bat', group = 'Patterns')
show_bull_bat = input(true, 'Show Bull Bat', group = 'Patterns')
show_bear_butterfly = input(true, 'Show Bear Butterfly', group = 'Patterns')
show_bull_butterfly = input(true, 'Show Bull Butterfly', group = 'Patterns')
show_bear_cassiopeia_a = input(true, 'Show Bear Cassiopeia A', group = 'Patterns')
show_bull_cassiopeia_a = input(true, 'Show Bull Cassiopeia A', group = 'Patterns')
show_bear_cassiopeia_b = input(true, 'Show Bear Cassiopeia B', group = 'Patterns')
show_bull_cassiopeia_b = input(true, 'Show Bull Cassiopeia B', group = 'Patterns')
show_bear_cassiopeia_c = input(true, 'Show Bear Cassiopeia C', group = 'Patterns')
show_bull_cassiopeia_c = input(true, 'Show Bull Cassiopeia C', group = 'Patterns')
show_bear_crab = input(true, 'Show Bear Crab', group = 'Patterns')
show_bull_crab = input(true, 'Show Bull Crab', group = 'Patterns')
show_bear_deep_crab = input(true, 'Show Bear Deep Crab', group = 'Patterns')
show_bull_deep_crab = input(true, 'Show Bull Deep Crab', group = 'Patterns')
show_bear_cypher = input(true, 'Show Bear Cypher', group = 'Patterns')
show_bull_cypher = input(true, 'Show Bull Cypher', group = 'Patterns')
show_bear_gartley = input(true, 'Show Bear Gartley', group = 'Patterns')
show_bull_gartley = input(true, 'Show Bull Gartley', group = 'Patterns')
show_bear_shark = input(true, 'Show Bear Shark', group = 'Patterns')
show_bull_shark = input(true, 'Show Bull Shark', group = 'Patterns')
show_bear_three_drive = input(true, 'Show Bear Three-Drive', group = 'Patterns')
show_bull_three_drive = input(true, 'Show Bull Three-Drive', group = 'Patterns')

ab_low_tol = input(defval = 10, title = 'AB Lower Tolerance (%)', group = 'Pattern Tolerances')
ab_up_tol = input(defval = 10, title = 'AB Upper Tolerance (%)', group = 'Pattern Tolerances')
bc_low_tol = input(defval = 10, title = 'BC Lower Tolerance (%)', group = 'Pattern Tolerances')
bc_up_tol = input(defval = 10, title = 'BC Upper Tolerance (%)', group = 'Pattern Tolerances')
cd_low_tol = input(defval = 10, title = 'CD Lower Tolerance (%)', group = 'Pattern Tolerances')
cd_up_tol = input(defval = 10, title = 'CD Upper Tolerance (%)', group = 'Pattern Tolerances')
ad_low_tol = input(defval = 10, title = 'AD Lower Tolerance (%)', group = 'Pattern Tolerances')
ad_up_tol = input(defval = 10, title = 'AD Upper Tolerance (%)', group = 'Pattern Tolerances')
xc_low_tol = input(defval = 10, title = 'XC Lower Tolerance (%)', group = 'Pattern Tolerances')
xc_up_tol = input(defval = 10, title = 'XC Upper Tolerance (%)', group = 'Pattern Tolerances')
x1_low_tol = input(defval = 20, title = 'X1 Lower Tolerance (%)', group = 'Pattern Tolerances')
a1_low_tol = input(defval = 20, title = 'A1 Lower Tolerance (%)', group = 'Pattern Tolerances')
a1_up_tol = input(defval = 20, title = 'A1 Upper Tolerance (%)', group = 'Pattern Tolerances')
a2_low_tol = input(defval = 20, title = 'A2 Lower Tolerance (%)', group = 'Pattern Tolerances')
a2_up_tol = input(defval = 20, title = 'A2 Upper Tolerance (%)', group = 'Pattern Tolerances')
b2_low_tol = input(defval = 20, title = 'B2 Lower Tolerance (%)', group = 'Pattern Tolerances')
b2_up_tol = input(defval = 20, title = 'B2 Upper Tolerance (%)', group = 'Pattern Tolerances')
b3_low_tol = input(defval = 20, title = 'B3 Lower Tolerance (%)', group = 'Pattern Tolerances')
b3_up_tol = input(defval = 20, title = 'B3 Upper Tolerance (%)', group = 'Pattern Tolerances')

bear_5_0_alert = input(true, 'Bear 5-0 Alert', group = 'Alerts')
bull_5_0_alert = input(true, 'Bull 5-0 Alert', group = 'Alerts')
bear_abcd_alert = input(true, 'Bear ABCD Alert', group = 'Alerts')
bull_abcd_alert = input(true, 'Bull ABCD Alert', group = 'Alerts')
bear_alt_bat_alert = input(true, 'Bear Alt. Bat Alert', group = 'Alerts')
bull_alt_bat_alert = input(true, 'Bull Alt. Bat Alert', group = 'Alerts')
bear_bat_alert = input(true, 'Bear Bat Alert', group = 'Alerts')
bull_bat_alert = input(true, 'Bull Bat Alert', group = 'Alerts')
bear_butterfly_alert = input(true, 'Bear Butterfly Alert', group = 'Alerts')
bull_butterfly_alert = input(true, 'Bull Butterfly Alert', group = 'Alerts')
bear_cassiopeia_a_alert = input(true, 'Bear Cassiopeia A Alert', group = 'Alerts')
bull_cassiopeia_a_alert = input(true, 'Bull Cassiopeia A Alert', group = 'Alerts')
bear_cassiopeia_b_alert = input(true, 'Bear Cassiopeia B Alert', group = 'Alerts')
bull_cassiopeia_b_alert = input(true, 'Bull Cassiopeia B Alert', group = 'Alerts')
bear_cassiopeia_c_alert = input(true, 'Bear Cassiopeia C Alert', group = 'Alerts')
bull_cassiopeia_c_alert = input(true, 'Bull Cassiopeia C Alert', group = 'Alerts')
bear_crab_alert = input(true, 'Bear Crab Alert', group = 'Alerts')
bull_crab_alert = input(true, 'Bull Crab Alert', group = 'Alerts')
bear_deep_crab_alert = input(true, 'Bear Deep Crab Alert', group = 'Alerts')
bull_deep_crab_alert = input(true, 'Bull Deep Crab Alert', group = 'Alerts')
bear_cypher_alert = input(true, 'Bear Cypher Alert', group = 'Alerts')
bull_cypher_alert = input(true, 'Bull Cypher Alert', group = 'Alerts')
bear_gartley_alert = input(true, 'Bear Gartley Alert', group = 'Alerts')
bull_gartley_alert = input(true, 'Bull Gartley Alert', group = 'Alerts')
bear_shark_alert = input(true, 'Bear Shark Alert', group = 'Alerts')
bull_shark_alert = input(true, 'Bull Shark Alert', group = 'Alerts')
bear_three_drive_alert = input(true, 'Bear Three-Drive Alert', group = 'Alerts')
bull_three_drive_alert = input(true, 'Bull Three-Drive Alert', group = 'Alerts')

///////////////////////////
// CONDITIONAL VARIABLES //
///////////////////////////

sh = sw.sh()
sl = sw.sl()

shp_0 = sw.shp(0)
shpbi_0 = sw.shpbi(0)
shrr_0 = sw.shrr(0)

slp_0 = sw.slp(0)
slpbi_0 = sw.slpbi(0)
slrr_0 = sw.slrr(0)

shp_1 = sw.shp(1)
shpbi_1 = sw.shpbi(1)
shrr_1 = sw.shrr(1)

slp_1 = sw.slp(1)
slpbi_1 = sw.slpbi(1)
slrr_1 = sw.slrr(1)

shp_2 = sw.shp(2)
shpbi_2 = sw.shpbi(2)
shrr_2 = sw.shrr(2)

slp_2 = sw.slp(2)
slpbi_2 = sw.slpbi(2)
slrr_2 = sw.slrr(2)

bear_5_0 = pa.bear_5_0(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)
bull_5_0 = pa.bull_5_0(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)

bear_abcd = pa.bear_abcd(bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)
bull_abcd = pa.bull_abcd(bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)

bear_alt_bat = pa.bear_alt_bat(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_alt_bat = pa.bull_alt_bat(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_bat = pa.bear_bat(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_bat = pa.bull_bat(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_butterfly = pa.bear_butterfly(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_butterfly = pa.bull_butterfly(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_cassiopeia_a = pa.bear_cassiopeia_a(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)
bull_cassiopeia_a = pa.bull_cassiopeia_a(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)

bear_cassiopeia_b = pa.bear_cassiopeia_b(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)
bull_cassiopeia_b = pa.bull_cassiopeia_b(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)

bear_cassiopeia_c = pa.bear_cassiopeia_c(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)
bull_cassiopeia_c = pa.bull_cassiopeia_c(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol)

bear_crab = pa.bear_crab(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_crab = pa.bull_crab(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_deep_crab = pa.bear_deep_crab(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_deep_crab = pa.bull_deep_crab(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_cypher = pa.bear_cypher(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, xc_low_tol, xc_up_tol)
bull_cypher = pa.bull_cypher(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, xc_low_tol, xc_up_tol)

bear_gartley = pa.bear_gartley(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)
bull_gartley = pa.bull_gartley(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, cd_low_tol, cd_up_tol, ad_low_tol, ad_up_tol)

bear_shark = pa.bear_shark(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, xc_low_tol, xc_up_tol)
bull_shark = pa.bull_shark(ab_low_tol, ab_up_tol, bc_low_tol, bc_up_tol, xc_low_tol, xc_up_tol)

bear_three_drive = pa.bear_three_drive(x1_low_tol, a1_low_tol, a1_up_tol, a2_low_tol, a2_up_tol, b2_low_tol, b2_up_tol, b3_low_tol, b3_up_tol)
bull_three_drive = pa.bull_three_drive(x1_low_tol, a1_low_tol, a1_up_tol, a2_low_tol, a2_up_tol, b2_low_tol, b2_up_tol, b3_low_tol, b3_up_tol)

/////////
// 5-0 //
/////////

var bear_5_0_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_5_0_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_5_0_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_5_0_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_5_0_line_5 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_5_0_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_5_0_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_5_0_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_5_0_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'O', textcolor = label_colour)
var bear_5_0_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bear_5_0_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bear_5_0_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_5_0_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_5_0_label_6 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_5_0 and barstate.isconfirmed
    if show_bear_5_0
        line.set_xy1(bear_5_0_line_1, slpbi_2, slp_2)
        line.set_xy2(bear_5_0_line_1, shpbi_2, shp_2)
        line.set_xy1(bear_5_0_line_2, shpbi_2, shp_2)
        line.set_xy2(bear_5_0_line_2, slpbi_1, slp_1)
        line.set_xy1(bear_5_0_line_3, slpbi_1, slp_1)
        line.set_xy2(bear_5_0_line_3, shpbi_1, shp_1)
        line.set_xy1(bear_5_0_line_4, shpbi_1, shp_1)
        line.set_xy2(bear_5_0_line_4, slpbi_0, slp_0)
        line.set_xy1(bear_5_0_line_5, slpbi_0, slp_0)
        line.set_xy2(bear_5_0_line_5, shpbi_0, shp_0)
        line.set_xy1(bear_5_0_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_5_0_line_6, shpbi_1, shp_1)
        line.set_xy1(bear_5_0_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_5_0_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_5_0_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_5_0_line_8, slpbi_0, slp_0)
        label.set_xy(bear_5_0_label_1, slpbi_2, slp_2)
        label.set_xy(bear_5_0_label_2, shpbi_2, shp_2)
        label.set_xy(bear_5_0_label_3, slpbi_1, slp_1)
        label.set_xy(bear_5_0_label_4, shpbi_1, shp_1)
        label.set_xy(bear_5_0_label_5, slpbi_0, slp_0)
        label.set_xy(bear_5_0_label_6, shpbi_0, shp_0)
        label.set_text(bear_5_0_label_4, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_5_0_label_5, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_5_0_label_6, 'BEAR 5-0\nD (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_5_0_alert
        alert('Bearish 5-0')

var bull_5_0_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_5_0_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_5_0_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_5_0_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_5_0_line_5 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_5_0_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_5_0_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_5_0_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_5_0_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'O', textcolor = label_colour)
var bull_5_0_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bull_5_0_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_5_0_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_5_0_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_5_0_label_6 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_5_0 and barstate.isconfirmed
    if show_bull_5_0
        line.set_xy1(bull_5_0_line_1, shpbi_2, shp_2)
        line.set_xy2(bull_5_0_line_1, slpbi_2, slp_2)
        line.set_xy1(bull_5_0_line_2, slpbi_2, slp_2)
        line.set_xy2(bull_5_0_line_2, shpbi_1, shp_1)
        line.set_xy1(bull_5_0_line_3, shpbi_1, shp_1)
        line.set_xy2(bull_5_0_line_3, slpbi_1, slp_1)
        line.set_xy1(bull_5_0_line_4, slpbi_1, slp_1)
        line.set_xy2(bull_5_0_line_4, shpbi_0, shp_0)
        line.set_xy1(bull_5_0_line_5, shpbi_0, shp_0)
        line.set_xy2(bull_5_0_line_5, slpbi_0, slp_0)
        line.set_xy1(bull_5_0_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_5_0_line_6, slpbi_1, slp_1)
        line.set_xy1(bull_5_0_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_5_0_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_5_0_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_5_0_line_8, shpbi_0, shp_0)
        label.set_xy(bull_5_0_label_1, shpbi_2, shp_2)
        label.set_xy(bull_5_0_label_2, slpbi_2, slp_2)
        label.set_xy(bull_5_0_label_3, shpbi_1, shp_1)
        label.set_xy(bull_5_0_label_4, slpbi_1, slp_1)
        label.set_xy(bull_5_0_label_5, shpbi_0, shp_0)
        label.set_xy(bull_5_0_label_6, slpbi_0, slp_0)
        label.set_text(bull_5_0_label_4, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_5_0_label_5, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_5_0_label_6, 'Bull 5-0\nD (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_5_0_alert
        alert('Bullish 5-0')

//////////
// ABCD //
//////////

var bear_abcd_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_abcd_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_abcd_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_abcd_line_4 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_abcd_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_abcd_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bear_abcd_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'B', textcolor = label_colour)
var bear_abcd_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_abcd_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_abcd and barstate.isconfirmed
    if show_bear_abcd
        line.set_xy1(bear_abcd_line_1, slpbi_1, slp_1)
        line.set_xy2(bear_abcd_line_1, shpbi_1, shp_1)
        line.set_xy1(bear_abcd_line_2, shpbi_1, shp_1)
        line.set_xy2(bear_abcd_line_2, slpbi_0, slp_0)
        line.set_xy1(bear_abcd_line_3, slpbi_0, slp_0)
        line.set_xy2(bear_abcd_line_3, shpbi_0, shp_0)
        line.set_xy1(bear_abcd_line_4, shpbi_1, shp_1)
        line.set_xy2(bear_abcd_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_abcd_line_5, slpbi_1, slp_1)
        line.set_xy2(bear_abcd_line_5, slpbi_0, slp_0)
        label.set_xy(bear_abcd_label_1, slpbi_1, slp_1)
        label.set_xy(bear_abcd_label_2, shpbi_1, shp_1)
        label.set_xy(bear_abcd_label_3, slpbi_0, slp_0)
        label.set_xy(bear_abcd_label_4, shpbi_0, shp_0)
        label.set_text(bear_abcd_label_3, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_abcd_label_4, 'BEAR ABCD\nD (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_abcd_alert
        alert('Bearish ABCD')

var bull_abcd_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_abcd_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_abcd_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_abcd_line_4 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_abcd_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_abcd_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_abcd_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'B', textcolor = label_colour)
var bull_abcd_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_abcd_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_abcd and barstate.isconfirmed
    if show_bull_abcd
        line.set_xy1(bull_abcd_line_1, shpbi_1, shp_1)
        line.set_xy2(bull_abcd_line_1, slpbi_1, slp_1)
        line.set_xy1(bull_abcd_line_2, slpbi_1, slp_1)
        line.set_xy2(bull_abcd_line_2, shpbi_0, shp_0)
        line.set_xy1(bull_abcd_line_3, shpbi_0, shp_0)
        line.set_xy2(bull_abcd_line_3, slpbi_0, slp_0)
        line.set_xy1(bull_abcd_line_4, slpbi_1, slp_1)
        line.set_xy2(bull_abcd_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_abcd_line_5, shpbi_1, shp_1)
        line.set_xy2(bull_abcd_line_5, shpbi_0, shp_0)
        label.set_xy(bull_abcd_label_1, shpbi_1, shp_1)
        label.set_xy(bull_abcd_label_2, slpbi_1, slp_1)
        label.set_xy(bull_abcd_label_3, shpbi_0, shp_0)
        label.set_xy(bull_abcd_label_4, slpbi_0, slp_0)
        label.set_text(bull_abcd_label_3, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_abcd_label_4, 'Bull ABCD\nD (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_abcd_alert
        alert('Bullish ABCD')

///////////////////
// ALTERNATE BAT //
///////////////////

var bear_alt_bat_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_alt_bat_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_alt_bat_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_alt_bat_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_alt_bat_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_alt_bat_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_alt_bat_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_alt_bat_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_alt_bat_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bear_alt_bat_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bear_alt_bat_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_alt_bat_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_alt_bat_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_alt_bat and barstate.isconfirmed
    if show_bear_alt_bat
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_alt_bat_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_alt_bat_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_alt_bat_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_alt_bat_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_alt_bat_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_alt_bat_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_alt_bat_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_alt_bat_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_alt_bat_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_alt_bat_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_alt_bat_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_alt_bat_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_alt_bat_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_alt_bat_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_alt_bat_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_alt_bat_line_8, slpbi_0, slp_0)
        label.set_xy(bear_alt_bat_label_1, shpbi_2, shp_2)
        label.set_xy(bear_alt_bat_label_2, slpbi_1, slp_1)
        label.set_xy(bear_alt_bat_label_3, shpbi_1, shp_1)
        label.set_xy(bear_alt_bat_label_4, slpbi_0, slp_0)
        label.set_xy(bear_alt_bat_label_5, shpbi_0, shp_0)
        label.set_text(bear_alt_bat_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_alt_bat_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_alt_bat_label_5, 'BEAR ALT. BAT\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_alt_bat_alert
        alert('Bearish Alt. Bat')

var bull_alt_bat_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_alt_bat_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_alt_bat_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_alt_bat_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_alt_bat_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_alt_bat_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_alt_bat_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_alt_bat_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_alt_bat_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bull_alt_bat_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_alt_bat_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_alt_bat_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_alt_bat_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_alt_bat and barstate.isconfirmed
    if show_bull_alt_bat
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_alt_bat_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_alt_bat_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_alt_bat_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_alt_bat_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_alt_bat_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_alt_bat_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_alt_bat_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_alt_bat_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_alt_bat_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_alt_bat_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_alt_bat_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_alt_bat_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_alt_bat_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_alt_bat_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_alt_bat_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_alt_bat_line_8, shpbi_0, shp_0)
        label.set_xy(bull_alt_bat_label_1, slpbi_2, slp_2)
        label.set_xy(bull_alt_bat_label_2, shpbi_1, shp_1)
        label.set_xy(bull_alt_bat_label_3, slpbi_1, slp_1)
        label.set_xy(bull_alt_bat_label_4, shpbi_0, shp_0)
        label.set_xy(bull_alt_bat_label_5, slpbi_0, slp_0)
        label.set_text(bull_alt_bat_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_alt_bat_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_alt_bat_label_5, 'BULL ALT. BAT\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_alt_bat_alert
        alert('Bullish Alt. Bat')

/////////
// BAT //
/////////

var bear_bat_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_bat_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_bat_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_bat_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_bat_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_bat_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_bat_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_bat_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_bat_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bear_bat_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bear_bat_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_bat_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_bat_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_bat and barstate.isconfirmed
    if show_bear_bat
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_bat_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_bat_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_bat_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_bat_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_bat_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_bat_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_bat_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_bat_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_bat_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_bat_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_bat_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_bat_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_bat_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_bat_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_bat_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_bat_line_8, slpbi_0, slp_0)
        label.set_xy(bear_bat_label_1, shpbi_2, shp_2)
        label.set_xy(bear_bat_label_2, slpbi_1, slp_1)
        label.set_xy(bear_bat_label_3, shpbi_1, shp_1)
        label.set_xy(bear_bat_label_4, slpbi_0, slp_0)
        label.set_xy(bear_bat_label_5, shpbi_0, shp_0)
        label.set_text(bear_bat_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_bat_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_bat_label_5, 'BEAR BAT\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_bat_alert
        alert('Bearish Bat')

var bull_bat_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_bat_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_bat_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_bat_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_bat_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_bat_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_bat_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_bat_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_bat_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bull_bat_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_bat_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_bat_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_bat_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_bat and barstate.isconfirmed
    if show_bull_bat
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_bat_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_bat_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_bat_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_bat_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_bat_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_bat_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_bat_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_bat_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_bat_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_bat_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_bat_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_bat_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_bat_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_bat_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_bat_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_bat_line_8, shpbi_0, shp_0)
        label.set_xy(bull_bat_label_1, slpbi_2, slp_2)
        label.set_xy(bull_bat_label_2, shpbi_1, shp_1)
        label.set_xy(bull_bat_label_3, slpbi_1, slp_1)
        label.set_xy(bull_bat_label_4, shpbi_0, shp_0)
        label.set_xy(bull_bat_label_5, slpbi_0, slp_0)
        label.set_text(bull_bat_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_bat_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_bat_label_5, 'BULL BAT\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_bat_alert
        alert('Bullish Bat')

///////////////
// BUTTERFLY //
///////////////

var bear_butterfly_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_butterfly_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_butterfly_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_butterfly_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_butterfly_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_butterfly_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_butterfly_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_butterfly_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_butterfly_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bear_butterfly_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bear_butterfly_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_butterfly_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_butterfly_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_butterfly and barstate.isconfirmed
    if show_bear_butterfly
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_butterfly_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_butterfly_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_butterfly_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_butterfly_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_butterfly_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_butterfly_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_butterfly_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_butterfly_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_butterfly_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_butterfly_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_butterfly_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_butterfly_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_butterfly_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_butterfly_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_butterfly_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_butterfly_line_8, slpbi_0, slp_0)
        label.set_xy(bear_butterfly_label_1, shpbi_2, shp_2)
        label.set_xy(bear_butterfly_label_2, slpbi_1, slp_1)
        label.set_xy(bear_butterfly_label_3, shpbi_1, shp_1)
        label.set_xy(bear_butterfly_label_4, slpbi_0, slp_0)
        label.set_xy(bear_butterfly_label_5, shpbi_0, shp_0)
        label.set_text(bear_butterfly_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_butterfly_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_butterfly_label_5, 'BEAR BUTTERFLY\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_butterfly_alert
        alert('Bearish Butterfly')

var bull_butterfly_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_butterfly_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_butterfly_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_butterfly_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_butterfly_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_butterfly_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_butterfly_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_butterfly_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_butterfly_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bull_butterfly_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_butterfly_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_butterfly_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_butterfly_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_butterfly and barstate.isconfirmed
    if show_bull_butterfly
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_butterfly_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_butterfly_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_butterfly_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_butterfly_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_butterfly_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_butterfly_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_butterfly_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_butterfly_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_butterfly_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_butterfly_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_butterfly_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_butterfly_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_butterfly_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_butterfly_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_butterfly_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_butterfly_line_8, shpbi_0, shp_0)
        label.set_xy(bull_butterfly_label_1, slpbi_2, slp_2)
        label.set_xy(bull_butterfly_label_2, shpbi_1, shp_1)
        label.set_xy(bull_butterfly_label_3, slpbi_1, slp_1)
        label.set_xy(bull_butterfly_label_4, shpbi_0, shp_0)
        label.set_xy(bull_butterfly_label_5, slpbi_0, slp_0)
        label.set_text(bull_butterfly_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_butterfly_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_butterfly_label_5, 'BULL BUTTERFLY\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_butterfly_alert
        alert('Bullish Butterfly')

//////////////////
// CASSIOPEIA A //
//////////////////

var bear_cassiopeia_a_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_a_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_a_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_a_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_a_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_a_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_a_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_a_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_a_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bear_cassiopeia_a_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bear_cassiopeia_a_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_cassiopeia_a_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_cassiopeia_a_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_cassiopeia_a and barstate.isconfirmed
    if show_bear_cassiopeia_a
        line.set_xy1(bear_cassiopeia_a_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_a_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_cassiopeia_a_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_a_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_a_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_a_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_cassiopeia_a_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_cassiopeia_a_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_a_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_a_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_a_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_a_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_a_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_a_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_a_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_a_line_8, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_a_label_1, shpbi_2, shp_2)
        label.set_xy(bear_cassiopeia_a_label_2, slpbi_1, slp_1)
        label.set_xy(bear_cassiopeia_a_label_3, shpbi_1, shp_1)
        label.set_xy(bear_cassiopeia_a_label_4, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_a_label_5, shpbi_0, shp_0)
        label.set_text(bear_cassiopeia_a_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_cassiopeia_a_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_cassiopeia_a_label_5, 'BEAR CASSIOPEIA A\nD (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_cassiopeia_a_alert
        alert('Bearish Cassiopeia A')

var bull_cassiopeia_a_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_a_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_a_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_a_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_a_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_a_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_a_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_a_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_a_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bull_cassiopeia_a_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_cassiopeia_a_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_cassiopeia_a_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_cassiopeia_a_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_cassiopeia_a and barstate.isconfirmed
    if show_bull_cassiopeia_a
        line.set_xy1(bull_cassiopeia_a_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_a_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_cassiopeia_a_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_a_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_a_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_a_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_cassiopeia_a_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_cassiopeia_a_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_a_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_a_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_a_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_a_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_a_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_a_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_a_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_a_line_8, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_a_label_1, slpbi_2, slp_2)
        label.set_xy(bull_cassiopeia_a_label_2, shpbi_1, shp_1)
        label.set_xy(bull_cassiopeia_a_label_3, slpbi_1, slp_1)
        label.set_xy(bull_cassiopeia_a_label_4, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_a_label_5, slpbi_0, slp_0)
        label.set_text(bull_cassiopeia_a_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_cassiopeia_a_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_cassiopeia_a_label_5, 'BULL CASSIOPEIA A\nD (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_cassiopeia_a_alert
        alert('Bullish Cassiopeia A')

//////////////////
// CASSIOPEIA B //
//////////////////

var bear_cassiopeia_b_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_b_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_b_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_b_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_b_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_b_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_b_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_b_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_b_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bear_cassiopeia_b_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bear_cassiopeia_b_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_cassiopeia_b_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_cassiopeia_b_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_cassiopeia_b and barstate.isconfirmed
    if show_bear_cassiopeia_b
        line.set_xy1(bear_cassiopeia_b_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_b_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_cassiopeia_b_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_b_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_b_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_b_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_cassiopeia_b_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_cassiopeia_b_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_b_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_b_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_b_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_b_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_b_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_b_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_b_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_b_line_8, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_b_label_1, shpbi_2, shp_2)
        label.set_xy(bear_cassiopeia_b_label_2, slpbi_1, slp_1)
        label.set_xy(bear_cassiopeia_b_label_3, shpbi_1, shp_1)
        label.set_xy(bear_cassiopeia_b_label_4, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_b_label_5, shpbi_0, shp_0)
        label.set_text(bear_cassiopeia_b_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_cassiopeia_b_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_cassiopeia_b_label_5, 'BEAR CASSIOPEIA B\nD (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_cassiopeia_b_alert
        alert('Bearish Cassiopeia B')

var bull_cassiopeia_b_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_b_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_b_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_b_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_b_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_b_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_b_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_b_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_b_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bull_cassiopeia_b_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_cassiopeia_b_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_cassiopeia_b_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_cassiopeia_b_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_cassiopeia_b and barstate.isconfirmed
    if show_bull_cassiopeia_b
        line.set_xy1(bull_cassiopeia_b_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_b_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_cassiopeia_b_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_b_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_b_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_b_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_cassiopeia_b_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_cassiopeia_b_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_b_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_b_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_b_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_b_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_b_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_b_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_b_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_b_line_8, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_b_label_1, slpbi_2, slp_2)
        label.set_xy(bull_cassiopeia_b_label_2, shpbi_1, shp_1)
        label.set_xy(bull_cassiopeia_b_label_3, slpbi_1, slp_1)
        label.set_xy(bull_cassiopeia_b_label_4, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_b_label_5, slpbi_0, slp_0)
        label.set_text(bull_cassiopeia_b_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_cassiopeia_b_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_cassiopeia_b_label_5, 'BULL CASSIOPEIA B\nD (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_cassiopeia_b_alert
        alert('Bullish Cassiopeia B')

//////////////////
// CASSIOPEIA C //
//////////////////

var bear_cassiopeia_c_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_c_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_c_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_c_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cassiopeia_c_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_c_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_c_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_c_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cassiopeia_c_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bear_cassiopeia_c_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bear_cassiopeia_c_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_cassiopeia_c_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_cassiopeia_c_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_cassiopeia_c and barstate.isconfirmed
    if show_bear_cassiopeia_c
        line.set_xy1(bear_cassiopeia_c_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_c_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_cassiopeia_c_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_c_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_c_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_c_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_cassiopeia_c_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_cassiopeia_c_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_c_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_c_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_cassiopeia_c_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_cassiopeia_c_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_c_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_cassiopeia_c_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_cassiopeia_c_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_cassiopeia_c_line_8, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_c_label_1, shpbi_2, shp_2)
        label.set_xy(bear_cassiopeia_c_label_2, slpbi_1, slp_1)
        label.set_xy(bear_cassiopeia_c_label_3, shpbi_1, shp_1)
        label.set_xy(bear_cassiopeia_c_label_4, slpbi_0, slp_0)
        label.set_xy(bear_cassiopeia_c_label_5, shpbi_0, shp_0)
        label.set_text(bear_cassiopeia_c_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_cassiopeia_c_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_cassiopeia_c_label_5, 'BEAR CASSIOPEIA C\nD (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_cassiopeia_c_alert
        alert('Bearish Cassiopeia C')

var bull_cassiopeia_c_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_c_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_c_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_c_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cassiopeia_c_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_c_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_c_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_c_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cassiopeia_c_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bull_cassiopeia_c_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_cassiopeia_c_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_cassiopeia_c_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_cassiopeia_c_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_cassiopeia_c and barstate.isconfirmed
    if show_bull_cassiopeia_c
        line.set_xy1(bull_cassiopeia_c_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_c_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_cassiopeia_c_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_c_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_c_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_c_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_cassiopeia_c_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_cassiopeia_c_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_c_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_c_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_cassiopeia_c_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_cassiopeia_c_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_c_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_cassiopeia_c_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_cassiopeia_c_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_cassiopeia_c_line_8, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_c_label_1, slpbi_2, slp_2)
        label.set_xy(bull_cassiopeia_c_label_2, shpbi_1, shp_1)
        label.set_xy(bull_cassiopeia_c_label_3, slpbi_1, slp_1)
        label.set_xy(bull_cassiopeia_c_label_4, shpbi_0, shp_0)
        label.set_xy(bull_cassiopeia_c_label_5, slpbi_0, slp_0)
        label.set_text(bull_cassiopeia_c_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_cassiopeia_c_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_cassiopeia_c_label_5, 'BULL CASSIOPEIA C\nD (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_cassiopeia_c_alert
        alert('Bullish Cassiopeia C')

//////////
// CRAB //
//////////

var bear_crab_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_crab_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_crab_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_crab_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_crab_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_crab_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_crab_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_crab_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_crab_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bear_crab_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bear_crab_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_crab_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_crab_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_crab and barstate.isconfirmed
    if show_bear_crab
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_crab_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_crab_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_crab_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_crab_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_crab_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_crab_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_crab_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_crab_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_crab_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_crab_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_crab_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_crab_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_crab_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_crab_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_crab_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_crab_line_8, slpbi_0, slp_0)
        label.set_xy(bear_crab_label_1, shpbi_2, shp_2)
        label.set_xy(bear_crab_label_2, slpbi_1, slp_1)
        label.set_xy(bear_crab_label_3, shpbi_1, shp_1)
        label.set_xy(bear_crab_label_4, slpbi_0, slp_0)
        label.set_xy(bear_crab_label_5, shpbi_0, shp_0)
        label.set_text(bear_crab_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_crab_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_crab_label_5, 'BEAR CRAB\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_crab_alert
        alert('Bearish Crab')

var bull_crab_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_crab_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_crab_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_crab_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_crab_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_crab_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_crab_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_crab_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_crab_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bull_crab_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_crab_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_crab_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_crab_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_crab and barstate.isconfirmed
    if show_bull_crab
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_crab_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_crab_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_crab_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_crab_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_crab_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_crab_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_crab_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_crab_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_crab_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_crab_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_crab_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_crab_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_crab_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_crab_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_crab_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_crab_line_8, shpbi_0, shp_0)
        label.set_xy(bull_crab_label_1, slpbi_2, slp_2)
        label.set_xy(bull_crab_label_2, shpbi_1, shp_1)
        label.set_xy(bull_crab_label_3, slpbi_1, slp_1)
        label.set_xy(bull_crab_label_4, shpbi_0, shp_0)
        label.set_xy(bull_crab_label_5, slpbi_0, slp_0)
        label.set_text(bull_crab_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_crab_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_crab_label_5, 'BULL CRAB\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_crab_alert
        alert('Bullish Crab')

///////////////
// DEEP CRAB //
///////////////

var bear_deep_crab_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_deep_crab_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_deep_crab_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_deep_crab_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_deep_crab_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_deep_crab_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_deep_crab_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_deep_crab_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_deep_crab_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bear_deep_crab_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bear_deep_crab_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_deep_crab_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_deep_crab_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_deep_crab and barstate.isconfirmed
    if show_bear_deep_crab
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_deep_crab_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_deep_crab_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_deep_crab_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_deep_crab_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_deep_crab_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_deep_crab_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_deep_crab_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_deep_crab_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_deep_crab_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_deep_crab_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_deep_crab_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_deep_crab_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_deep_crab_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_deep_crab_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_deep_crab_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_deep_crab_line_8, slpbi_0, slp_0)
        label.set_xy(bear_deep_crab_label_1, shpbi_2, shp_2)
        label.set_xy(bear_deep_crab_label_2, slpbi_1, slp_1)
        label.set_xy(bear_deep_crab_label_3, shpbi_1, shp_1)
        label.set_xy(bear_deep_crab_label_4, slpbi_0, slp_0)
        label.set_xy(bear_deep_crab_label_5, shpbi_0, shp_0)
        label.set_text(bear_deep_crab_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_deep_crab_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_deep_crab_label_5, 'BEAR DEEP CRAB\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_deep_crab_alert
        alert('Bearish Deep Crab')

var bull_deep_crab_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_deep_crab_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_deep_crab_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_deep_crab_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_deep_crab_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_deep_crab_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_deep_crab_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_deep_crab_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_deep_crab_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bull_deep_crab_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_deep_crab_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_deep_crab_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_deep_crab_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_deep_crab and barstate.isconfirmed
    if show_bull_deep_crab
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_deep_crab_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_deep_crab_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_deep_crab_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_deep_crab_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_deep_crab_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_deep_crab_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_deep_crab_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_deep_crab_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_deep_crab_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_deep_crab_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_deep_crab_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_deep_crab_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_deep_crab_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_deep_crab_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_deep_crab_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_deep_crab_line_8, shpbi_0, shp_0)
        label.set_xy(bull_deep_crab_label_1, slpbi_2, slp_2)
        label.set_xy(bull_deep_crab_label_2, shpbi_1, shp_1)
        label.set_xy(bull_deep_crab_label_3, slpbi_1, slp_1)
        label.set_xy(bull_deep_crab_label_4, shpbi_0, shp_0)
        label.set_xy(bull_deep_crab_label_5, slpbi_0, slp_0)
        label.set_text(bull_deep_crab_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_deep_crab_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_deep_crab_label_5, 'BULL DEEP CRAB\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_deep_crab_alert
        alert('Bullish Deep Crab')

////////////
// CYPHER //
////////////

var bear_cypher_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cypher_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cypher_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cypher_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_cypher_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cypher_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cypher_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cypher_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_cypher_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bear_cypher_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bear_cypher_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_cypher_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_cypher_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_cypher and barstate.isconfirmed
    if show_bear_cypher
        xcrr = (shp_0 - slp_0) / (shp_2 - slp_0) * 100
        line.set_xy1(bear_cypher_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_cypher_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_cypher_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_cypher_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_cypher_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_cypher_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_cypher_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_cypher_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_cypher_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_cypher_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_cypher_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_cypher_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_cypher_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_cypher_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_cypher_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_cypher_line_8, slpbi_0, slp_0)
        label.set_xy(bear_cypher_label_1, shpbi_2, shp_2)
        label.set_xy(bear_cypher_label_2, slpbi_1, slp_1)
        label.set_xy(bear_cypher_label_3, shpbi_1, shp_1)
        label.set_xy(bear_cypher_label_4, slpbi_0, slp_0)
        label.set_xy(bear_cypher_label_5, shpbi_0, shp_0)
        label.set_text(bear_cypher_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_cypher_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_cypher_label_5, 'BEAR CYPHER\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(XC: ' + str.tostring(math.round(xcrr, 2)) + ')')
    if bear_cypher_alert
        alert('Bearish Cypher')

var bull_cypher_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cypher_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cypher_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cypher_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_cypher_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cypher_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cypher_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cypher_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_cypher_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bull_cypher_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_cypher_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_cypher_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_cypher_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_cypher and barstate.isconfirmed
    if show_bull_cypher
        xcrr = (shp_0 - slp_0) / (shp_0 - slp_2) * 100
        line.set_xy1(bull_cypher_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_cypher_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_cypher_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_cypher_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_cypher_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_cypher_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_cypher_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_cypher_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_cypher_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_cypher_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_cypher_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_cypher_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_cypher_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_cypher_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_cypher_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_cypher_line_8, shpbi_0, shp_0)
        label.set_xy(bull_cypher_label_1, slpbi_2, slp_2)
        label.set_xy(bull_cypher_label_2, shpbi_1, shp_1)
        label.set_xy(bull_cypher_label_3, slpbi_1, slp_1)
        label.set_xy(bull_cypher_label_4, shpbi_0, shp_0)
        label.set_xy(bull_cypher_label_5, slpbi_0, slp_0)
        label.set_text(bull_cypher_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_cypher_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_cypher_label_5, 'BULL CYPHER\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(XC: ' + str.tostring(math.round(xcrr, 2)) + ')')
    if bull_cypher_alert
        alert('Bullish Cypher')

/////////////
// GARTLEY //
/////////////

var bear_gartley_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_gartley_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_gartley_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_gartley_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_gartley_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_gartley_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_gartley_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_gartley_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_gartley_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bear_gartley_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bear_gartley_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_gartley_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_gartley_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_gartley and barstate.isconfirmed
    if show_bear_gartley
        adrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_gartley_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_gartley_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_gartley_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_gartley_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_gartley_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_gartley_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_gartley_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_gartley_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_gartley_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_gartley_line_5, shpbi_1, shp_1)
        line.set_xy1(bear_gartley_line_6, shpbi_2, shp_2)
        line.set_xy2(bear_gartley_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_gartley_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_gartley_line_7, shpbi_0, shp_0)
        line.set_xy1(bear_gartley_line_8, slpbi_1, slp_1)
        line.set_xy2(bear_gartley_line_8, slpbi_0, slp_0)
        label.set_xy(bear_gartley_label_1, shpbi_2, shp_2)
        label.set_xy(bear_gartley_label_2, slpbi_1, slp_1)
        label.set_xy(bear_gartley_label_3, shpbi_1, shp_1)
        label.set_xy(bear_gartley_label_4, slpbi_0, slp_0)
        label.set_xy(bear_gartley_label_5, shpbi_0, shp_0)
        label.set_text(bear_gartley_label_3, 'B (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_gartley_label_4, 'C (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_gartley_label_5, 'BEAR GARTLEY\nD (' + str.tostring(math.round(shrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bear_gartley_alert
        alert('Bearish Gartley')

var bull_gartley_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_gartley_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_gartley_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_gartley_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_gartley_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_gartley_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_gartley_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_gartley_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_gartley_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bull_gartley_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bull_gartley_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_gartley_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_gartley_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_gartley and barstate.isconfirmed
    if show_bull_gartley
        adrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_gartley_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_gartley_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_gartley_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_gartley_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_gartley_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_gartley_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_gartley_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_gartley_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_gartley_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_gartley_line_5, slpbi_1, slp_1)
        line.set_xy1(bull_gartley_line_6, slpbi_2, slp_2)
        line.set_xy2(bull_gartley_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_gartley_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_gartley_line_7, slpbi_0, slp_0)
        line.set_xy1(bull_gartley_line_8, shpbi_1, shp_1)
        line.set_xy2(bull_gartley_line_8, shpbi_0, shp_0)
        label.set_xy(bull_gartley_label_1, slpbi_2, slp_2)
        label.set_xy(bull_gartley_label_2, shpbi_1, shp_1)
        label.set_xy(bull_gartley_label_3, slpbi_1, slp_1)
        label.set_xy(bull_gartley_label_4, shpbi_0, shp_0)
        label.set_xy(bull_gartley_label_5, slpbi_0, slp_0)
        label.set_text(bull_gartley_label_3, 'B (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_gartley_label_4, 'C (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_gartley_label_5, 'BULL GARTLEY\nD (' + str.tostring(math.round(slrr_0, 2)) + ')\n(AD: ' + str.tostring(math.round(adrr, 2)) + ')')
    if bull_gartley_alert
        alert('Bullish Gartley')

///////////
// SHARK //
///////////

var bear_shark_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_shark_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_shark_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_shark_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_shark_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_shark_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_shark_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_shark_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'O', textcolor = label_colour)
var bear_shark_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bear_shark_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'A', textcolor = label_colour)
var bear_shark_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_shark_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_shark and barstate.isconfirmed
    if show_bear_shark
        xcrr = (shp_0 - slp_1) / (shp_2 - slp_1) * 100
        line.set_xy1(bear_shark_line_1, shpbi_2, shp_2)
        line.set_xy2(bear_shark_line_1, slpbi_1, slp_1)
        line.set_xy1(bear_shark_line_2, slpbi_1, slp_1)
        line.set_xy2(bear_shark_line_2, shpbi_1, shp_1)
        line.set_xy1(bear_shark_line_3, shpbi_1, shp_1)
        line.set_xy2(bear_shark_line_3, slpbi_0, slp_0)
        line.set_xy1(bear_shark_line_4, slpbi_0, slp_0)
        line.set_xy2(bear_shark_line_4, shpbi_0, shp_0)
        line.set_xy1(bear_shark_line_5, shpbi_2, shp_2)
        line.set_xy2(bear_shark_line_5, shpbi_0, shp_0)
        line.set_xy1(bear_shark_line_6, shpbi_1, shp_1)
        line.set_xy2(bear_shark_line_6, shpbi_0, shp_0)
        line.set_xy1(bear_shark_line_7, shpbi_1, shp_1)
        line.set_xy2(bear_shark_line_7, slpbi_0, slp_0)
        label.set_xy(bear_shark_label_1, shpbi_2, shp_2)
        label.set_xy(bear_shark_label_2, slpbi_1, slp_1)
        label.set_xy(bear_shark_label_3, shpbi_1, shp_1)
        label.set_xy(bear_shark_label_4, slpbi_0, slp_0)
        label.set_xy(bear_shark_label_5, shpbi_0, shp_0)
        label.set_text(bear_shark_label_4, 'B (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_shark_label_5, 'BEAR SHARK\nC (' + str.tostring(math.round(shrr_0, 2)) + ')\n(XC: ' + str.tostring(math.round(xcrr, 2)) + ')')
    if bear_shark_alert
        alert('Bearish Shark')

var bull_shark_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_shark_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_shark_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_shark_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_shark_line_5 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_shark_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_shark_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_shark_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'O', textcolor = label_colour)
var bull_shark_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bull_shark_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'A', textcolor = label_colour)
var bull_shark_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_shark_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_shark and barstate.isconfirmed
    if show_bull_shark
        xcrr = (shp_1 - slp_0) / (shp_1 - slp_2) * 100
        line.set_xy1(bull_shark_line_1, slpbi_2, slp_2)
        line.set_xy2(bull_shark_line_1, shpbi_1, shp_1)
        line.set_xy1(bull_shark_line_2, shpbi_1, shp_1)
        line.set_xy2(bull_shark_line_2, slpbi_1, slp_1)
        line.set_xy1(bull_shark_line_3, slpbi_1, slp_1)
        line.set_xy2(bull_shark_line_3, shpbi_0, shp_0)
        line.set_xy1(bull_shark_line_4, shpbi_0, shp_0)
        line.set_xy2(bull_shark_line_4, slpbi_0, slp_0)
        line.set_xy1(bull_shark_line_5, slpbi_2, slp_2)
        line.set_xy2(bull_shark_line_5, slpbi_0, slp_0)
        line.set_xy1(bull_shark_line_6, slpbi_1, slp_1)
        line.set_xy2(bull_shark_line_6, slpbi_0, slp_0)
        line.set_xy1(bull_shark_line_7, slpbi_1, slp_1)
        line.set_xy2(bull_shark_line_7, shpbi_0, shp_0)
        label.set_xy(bull_shark_label_1, slpbi_2, slp_2)
        label.set_xy(bull_shark_label_2, shpbi_1, shp_1)
        label.set_xy(bull_shark_label_3, slpbi_1, slp_1)
        label.set_xy(bull_shark_label_4, shpbi_0, shp_0)
        label.set_xy(bull_shark_label_5, slpbi_0, slp_0)
        label.set_text(bull_shark_label_4, 'B (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_shark_label_5, 'BULL SHARK\nC (' + str.tostring(math.round(slrr_0, 2)) + ')\n(XC: ' + str.tostring(math.round(xcrr, 2)) + ')')
    if bull_shark_alert
        alert('Bullish Shark')

/////////////////
// THREE-DRIVE //
/////////////////

var bear_three_drive_line_1 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_three_drive_line_2 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_three_drive_line_3 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_three_drive_line_4 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_three_drive_line_5 = line.new(na, na, na, na, color = bear_pattern_colour, width = 2)
var bear_three_drive_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_three_drive_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_three_drive_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_three_drive_line_9 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bear_three_drive_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = 'X', textcolor = label_colour)
var bear_three_drive_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_three_drive_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_three_drive_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bear_three_drive_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bear_three_drive_label_6 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)

if sh and bear_three_drive and barstate.isconfirmed
    if show_bear_three_drive
        line.set_xy1(bear_three_drive_line_1, slpbi_2, slp_2)
        line.set_xy2(bear_three_drive_line_1, shpbi_2, shp_2)
        line.set_xy1(bear_three_drive_line_2, shpbi_2, shp_2)
        line.set_xy2(bear_three_drive_line_2, slpbi_1, slp_1)
        line.set_xy1(bear_three_drive_line_3, slpbi_1, slp_1)
        line.set_xy2(bear_three_drive_line_3, shpbi_1, shp_1)
        line.set_xy1(bear_three_drive_line_4, shpbi_1, shp_1)
        line.set_xy2(bear_three_drive_line_4, slpbi_0, slp_0)
        line.set_xy1(bear_three_drive_line_5, slpbi_0, slp_0)
        line.set_xy2(bear_three_drive_line_5, shpbi_0, shp_0)
        line.set_xy1(bear_three_drive_line_6, slpbi_2, slp_2)
        line.set_xy2(bear_three_drive_line_6, slpbi_1, slp_1)
        line.set_xy1(bear_three_drive_line_7, shpbi_2, shp_2)
        line.set_xy2(bear_three_drive_line_7, shpbi_1, shp_1)
        line.set_xy1(bear_three_drive_line_8, shpbi_1, shp_1)
        line.set_xy2(bear_three_drive_line_8, shpbi_0, shp_0)
        line.set_xy1(bear_three_drive_line_9, slpbi_1, slp_1)
        line.set_xy2(bear_three_drive_line_9, slpbi_0, slp_0)
        label.set_xy(bear_three_drive_label_1, slpbi_2, slp_2)
        label.set_xy(bear_three_drive_label_2, shpbi_2, shp_2)
        label.set_xy(bear_three_drive_label_3, slpbi_1, slp_1)
        label.set_xy(bear_three_drive_label_4, shpbi_1, shp_1)
        label.set_xy(bear_three_drive_label_5, slpbi_0, slp_0)
        label.set_xy(bear_three_drive_label_6, shpbi_0, shp_0)
        label.set_text(bear_three_drive_label_2, '1 (' + str.tostring(math.round(shrr_2, 2)) + ')')
        label.set_text(bear_three_drive_label_3, 'A (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bear_three_drive_label_4, '2 (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bear_three_drive_label_5, 'B (' + str.tostring(math.round(slrr_0, 2)) + ')')
        label.set_text(bear_three_drive_label_6, 'BEAR THREE-DRIVE\n3 (' + str.tostring(math.round(shrr_0, 2)) + ')')
    if bear_three_drive_alert
        alert('Bearish Three-Drive')

var bull_three_drive_line_1 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_three_drive_line_2 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_three_drive_line_3 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_three_drive_line_4 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_three_drive_line_5 = line.new(na, na, na, na, color = bull_pattern_colour, width = 2)
var bull_three_drive_line_6 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_three_drive_line_7 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_three_drive_line_8 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_three_drive_line_9 = line.new(na, na, na, na, color = dot_colour, style = line.style_dashed)
var bull_three_drive_label_1 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = 'X', textcolor = label_colour)
var bull_three_drive_label_2 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_three_drive_label_3 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_three_drive_label_4 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)
var bull_three_drive_label_5 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_down, text = na, textcolor = label_colour)
var bull_three_drive_label_6 = label.new(na, na, color = color.rgb(54, 58, 69, 100), style = label.style_label_up, text = na, textcolor = label_colour)

if sl and bull_three_drive and barstate.isconfirmed
    if show_bull_three_drive
        line.set_xy1(bull_three_drive_line_1, shpbi_2, shp_2)
        line.set_xy2(bull_three_drive_line_1, slpbi_2, slp_2)
        line.set_xy1(bull_three_drive_line_2, slpbi_2, slp_2)
        line.set_xy2(bull_three_drive_line_2, shpbi_1, shp_1)
        line.set_xy1(bull_three_drive_line_3, shpbi_1, shp_1)
        line.set_xy2(bull_three_drive_line_3, slpbi_1, slp_1)
        line.set_xy1(bull_three_drive_line_4, slpbi_1, slp_1)
        line.set_xy2(bull_three_drive_line_4, shpbi_0, shp_0)
        line.set_xy1(bull_three_drive_line_5, shpbi_0, shp_0)
        line.set_xy2(bull_three_drive_line_5, slpbi_0, slp_0)
        line.set_xy1(bull_three_drive_line_6, shpbi_2, shp_2)
        line.set_xy2(bull_three_drive_line_6, shpbi_1, shp_1)
        line.set_xy1(bull_three_drive_line_7, slpbi_2, slp_2)
        line.set_xy2(bull_three_drive_line_7, slpbi_1, slp_1)
        line.set_xy1(bull_three_drive_line_8, slpbi_1, slp_1)
        line.set_xy2(bull_three_drive_line_8, slpbi_0, slp_0)
        line.set_xy1(bull_three_drive_line_9, shpbi_1, shp_1)
        line.set_xy2(bull_three_drive_line_9, shpbi_0, shp_0)
        label.set_xy(bull_three_drive_label_1, shpbi_2, shp_2)
        label.set_xy(bull_three_drive_label_2, slpbi_2, slp_2)
        label.set_xy(bull_three_drive_label_3, shpbi_1, shp_1)
        label.set_xy(bull_three_drive_label_4, slpbi_1, slp_1)
        label.set_xy(bull_three_drive_label_5, shpbi_0, shp_0)
        label.set_xy(bull_three_drive_label_6, slpbi_0, slp_0)
        label.set_text(bull_three_drive_label_2, '1 (' + str.tostring(math.round(slrr_2, 2)) + ')')
        label.set_text(bull_three_drive_label_3, 'A (' + str.tostring(math.round(shrr_1, 2)) + ')')
        label.set_text(bull_three_drive_label_4, '2 (' + str.tostring(math.round(slrr_1, 2)) + ')')
        label.set_text(bull_three_drive_label_5, 'B (' + str.tostring(math.round(shrr_0, 2)) + ')')
        label.set_text(bull_three_drive_label_6, 'BULL THREE-DRIVE\n3 (' + str.tostring(math.round(slrr_0, 2)) + ')')
    if bull_three_drive_alert
        alert('Bullish Three-Drive')


















